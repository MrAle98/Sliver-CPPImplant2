// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sliver.proto

#include "sliver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sliverpb {
PROTOBUF_CONSTEXPR Envelope::Envelope(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.unknownmessagetype_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvelopeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvelopeDefaultTypeInternal() {}
  union {
    Envelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvelopeDefaultTypeInternal _Envelope_default_instance_;
PROTOBUF_CONSTEXPR BeaconTasks::BeaconTasks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nextcheckin_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BeaconTasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeaconTasksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeaconTasksDefaultTypeInternal() {}
  union {
    BeaconTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeaconTasksDefaultTypeInternal _BeaconTasks_default_instance_;
PROTOBUF_CONSTEXPR Register::Register(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.activec2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proxyurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.configid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reconnectinterval_)*/int64_t{0}
  , /*decltype(_impl_.peerid_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterDefaultTypeInternal() {}
  union {
    Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterDefaultTypeInternal _Register_default_instance_;
PROTOBUF_CONSTEXPR BeaconRegister::BeaconRegister(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.register__)*/nullptr
  , /*decltype(_impl_.interval_)*/int64_t{0}
  , /*decltype(_impl_.jitter_)*/int64_t{0}
  , /*decltype(_impl_.nextcheckin_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BeaconRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeaconRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeaconRegisterDefaultTypeInternal() {}
  union {
    BeaconRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeaconRegisterDefaultTypeInternal _BeaconRegister_default_instance_;
PROTOBUF_CONSTEXPR SessionRegister::SessionRegister(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.register__)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRegisterDefaultTypeInternal() {}
  union {
    SessionRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRegisterDefaultTypeInternal _SessionRegister_default_instance_;
PROTOBUF_CONSTEXPR OpenSession::OpenSession(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.c2s_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.delay_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpenSessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenSessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenSessionDefaultTypeInternal() {}
  union {
    OpenSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenSessionDefaultTypeInternal _OpenSession_default_instance_;
PROTOBUF_CONSTEXPR CloseSession::CloseSession(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloseSessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseSessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseSessionDefaultTypeInternal() {}
  union {
    CloseSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseSessionDefaultTypeInternal _CloseSession_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.nonce_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR KillReq::KillReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KillReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KillReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KillReqDefaultTypeInternal() {}
  union {
    KillReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KillReqDefaultTypeInternal _KillReq_default_instance_;
PROTOBUF_CONSTEXPR PsReq::PsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PsReqDefaultTypeInternal() {}
  union {
    PsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PsReqDefaultTypeInternal _PsReq_default_instance_;
PROTOBUF_CONSTEXPR Ps::Ps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processes_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PsDefaultTypeInternal() {}
  union {
    Ps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PsDefaultTypeInternal _Ps_default_instance_;
PROTOBUF_CONSTEXPR TerminateReq::TerminateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateReqDefaultTypeInternal() {}
  union {
    TerminateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateReqDefaultTypeInternal _TerminateReq_default_instance_;
PROTOBUF_CONSTEXPR Terminate::Terminate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateDefaultTypeInternal() {}
  union {
    Terminate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateDefaultTypeInternal _Terminate_default_instance_;
PROTOBUF_CONSTEXPR IfconfigReq::IfconfigReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IfconfigReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IfconfigReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IfconfigReqDefaultTypeInternal() {}
  union {
    IfconfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IfconfigReqDefaultTypeInternal _IfconfigReq_default_instance_;
PROTOBUF_CONSTEXPR Ifconfig::Ifconfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netinterfaces_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IfconfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IfconfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IfconfigDefaultTypeInternal() {}
  union {
    Ifconfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IfconfigDefaultTypeInternal _Ifconfig_default_instance_;
PROTOBUF_CONSTEXPR NetInterface::NetInterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ipaddresses_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetInterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInterfaceDefaultTypeInternal() {}
  union {
    NetInterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInterfaceDefaultTypeInternal _NetInterface_default_instance_;
PROTOBUF_CONSTEXPR LsReq::LsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LsReqDefaultTypeInternal() {}
  union {
    LsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LsReqDefaultTypeInternal _LsReq_default_instance_;
PROTOBUF_CONSTEXPR Ls::Ls(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.exists_)*/false
  , /*decltype(_impl_.timezoneoffset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LsDefaultTypeInternal() {}
  union {
    Ls _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LsDefaultTypeInternal _Ls_default_instance_;
PROTOBUF_CONSTEXPR FileInfo::FileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.link_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.modtime_)*/int64_t{0}
  , /*decltype(_impl_.isdir_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfoDefaultTypeInternal _FileInfo_default_instance_;
PROTOBUF_CONSTEXPR CdReq::CdReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CdReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdReqDefaultTypeInternal() {}
  union {
    CdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdReqDefaultTypeInternal _CdReq_default_instance_;
PROTOBUF_CONSTEXPR PwdReq::PwdReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PwdReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PwdReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PwdReqDefaultTypeInternal() {}
  union {
    PwdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PwdReqDefaultTypeInternal _PwdReq_default_instance_;
PROTOBUF_CONSTEXPR Pwd::Pwd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PwdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PwdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PwdDefaultTypeInternal() {}
  union {
    Pwd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PwdDefaultTypeInternal _Pwd_default_instance_;
PROTOBUF_CONSTEXPR RmReq::RmReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.recursive_)*/false
  , /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RmReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RmReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RmReqDefaultTypeInternal() {}
  union {
    RmReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RmReqDefaultTypeInternal _RmReq_default_instance_;
PROTOBUF_CONSTEXPR Rm::Rm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RmDefaultTypeInternal() {}
  union {
    Rm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RmDefaultTypeInternal _Rm_default_instance_;
PROTOBUF_CONSTEXPR MvReq::MvReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dst_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MvReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MvReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MvReqDefaultTypeInternal() {}
  union {
    MvReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MvReqDefaultTypeInternal _MvReq_default_instance_;
PROTOBUF_CONSTEXPR Mv::Mv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dst_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MvDefaultTypeInternal() {}
  union {
    Mv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MvDefaultTypeInternal _Mv_default_instance_;
PROTOBUF_CONSTEXPR MkdirReq::MkdirReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MkdirReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MkdirReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MkdirReqDefaultTypeInternal() {}
  union {
    MkdirReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MkdirReqDefaultTypeInternal _MkdirReq_default_instance_;
PROTOBUF_CONSTEXPR Mkdir::Mkdir(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MkdirDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MkdirDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MkdirDefaultTypeInternal() {}
  union {
    Mkdir _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MkdirDefaultTypeInternal _Mkdir_default_instance_;
PROTOBUF_CONSTEXPR DownloadReq::DownloadReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.start_)*/int64_t{0}
  , /*decltype(_impl_.stop_)*/int64_t{0}
  , /*decltype(_impl_.recurse_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownloadReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadReqDefaultTypeInternal() {}
  union {
    DownloadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadReqDefaultTypeInternal _DownloadReq_default_instance_;
PROTOBUF_CONSTEXPR Download::Download(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encoder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.start_)*/int64_t{0}
  , /*decltype(_impl_.stop_)*/int64_t{0}
  , /*decltype(_impl_.exists_)*/false
  , /*decltype(_impl_.isdir_)*/false
  , /*decltype(_impl_.readfiles_)*/0
  , /*decltype(_impl_.unreadablefiles_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadDefaultTypeInternal() {}
  union {
    Download _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadDefaultTypeInternal _Download_default_instance_;
PROTOBUF_CONSTEXPR UploadReq::UploadReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encoder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.isioc_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadReqDefaultTypeInternal() {}
  union {
    UploadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadReqDefaultTypeInternal _UploadReq_default_instance_;
PROTOBUF_CONSTEXPR Upload::Upload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadDefaultTypeInternal() {}
  union {
    Upload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadDefaultTypeInternal _Upload_default_instance_;
PROTOBUF_CONSTEXPR ProcessDumpReq::ProcessDumpReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.timeout_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessDumpReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessDumpReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessDumpReqDefaultTypeInternal() {}
  union {
    ProcessDumpReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessDumpReqDefaultTypeInternal _ProcessDumpReq_default_instance_;
PROTOBUF_CONSTEXPR ProcessDump::ProcessDump(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessDumpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessDumpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessDumpDefaultTypeInternal() {}
  union {
    ProcessDump _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessDumpDefaultTypeInternal _ProcessDump_default_instance_;
PROTOBUF_CONSTEXPR RunAsReq::RunAsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.hidewindow_)*/false
  , /*decltype(_impl_.netonly_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunAsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunAsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunAsReqDefaultTypeInternal() {}
  union {
    RunAsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunAsReqDefaultTypeInternal _RunAsReq_default_instance_;
PROTOBUF_CONSTEXPR RunAs::RunAs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunAsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunAsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunAsDefaultTypeInternal() {}
  union {
    RunAs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunAsDefaultTypeInternal _RunAs_default_instance_;
PROTOBUF_CONSTEXPR ImpersonateReq::ImpersonateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImpersonateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImpersonateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImpersonateReqDefaultTypeInternal() {}
  union {
    ImpersonateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImpersonateReqDefaultTypeInternal _ImpersonateReq_default_instance_;
PROTOBUF_CONSTEXPR Impersonate::Impersonate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImpersonateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImpersonateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImpersonateDefaultTypeInternal() {}
  union {
    Impersonate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImpersonateDefaultTypeInternal _Impersonate_default_instance_;
PROTOBUF_CONSTEXPR RevToSelfReq::RevToSelfReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RevToSelfReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevToSelfReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevToSelfReqDefaultTypeInternal() {}
  union {
    RevToSelfReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevToSelfReqDefaultTypeInternal _RevToSelfReq_default_instance_;
PROTOBUF_CONSTEXPR RevToSelf::RevToSelf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RevToSelfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevToSelfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevToSelfDefaultTypeInternal() {}
  union {
    RevToSelf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevToSelfDefaultTypeInternal _RevToSelf_default_instance_;
PROTOBUF_CONSTEXPR CurrentTokenOwnerReq::CurrentTokenOwnerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrentTokenOwnerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentTokenOwnerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentTokenOwnerReqDefaultTypeInternal() {}
  union {
    CurrentTokenOwnerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentTokenOwnerReqDefaultTypeInternal _CurrentTokenOwnerReq_default_instance_;
PROTOBUF_CONSTEXPR CurrentTokenOwner::CurrentTokenOwner(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrentTokenOwnerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentTokenOwnerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentTokenOwnerDefaultTypeInternal() {}
  union {
    CurrentTokenOwner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentTokenOwnerDefaultTypeInternal _CurrentTokenOwner_default_instance_;
PROTOBUF_CONSTEXPR InvokeGetSystemReq::InvokeGetSystemReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostingprocess_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvokeGetSystemReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeGetSystemReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeGetSystemReqDefaultTypeInternal() {}
  union {
    InvokeGetSystemReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeGetSystemReqDefaultTypeInternal _InvokeGetSystemReq_default_instance_;
PROTOBUF_CONSTEXPR GetSystem::GetSystem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSystemDefaultTypeInternal() {}
  union {
    GetSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSystemDefaultTypeInternal _GetSystem_default_instance_;
PROTOBUF_CONSTEXPR MakeTokenReq::MakeTokenReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.logontype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakeTokenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeTokenReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeTokenReqDefaultTypeInternal() {}
  union {
    MakeTokenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeTokenReqDefaultTypeInternal _MakeTokenReq_default_instance_;
PROTOBUF_CONSTEXPR MakeToken::MakeToken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakeTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeTokenDefaultTypeInternal() {}
  union {
    MakeToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeTokenDefaultTypeInternal _MakeToken_default_instance_;
PROTOBUF_CONSTEXPR TaskReq::TaskReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.rwxpages_)*/false
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskReqDefaultTypeInternal() {}
  union {
    TaskReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskReqDefaultTypeInternal _TaskReq_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR ExecuteAssemblyReq::ExecuteAssemblyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processargs_)*/{}
  , /*decltype(_impl_.assembly_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arguments_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.classname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appdomain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.runtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_.isdll_)*/false
  , /*decltype(_impl_.inprocess_)*/false
  , /*decltype(_impl_.amsibypass_)*/false
  , /*decltype(_impl_.etwbypass_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteAssemblyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteAssemblyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteAssemblyReqDefaultTypeInternal() {}
  union {
    ExecuteAssemblyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteAssemblyReqDefaultTypeInternal _ExecuteAssemblyReq_default_instance_;
PROTOBUF_CONSTEXPR InvokeExecuteAssemblyReq::InvokeExecuteAssemblyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processargs_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvokeExecuteAssemblyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeExecuteAssemblyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeExecuteAssemblyReqDefaultTypeInternal() {}
  union {
    InvokeExecuteAssemblyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeExecuteAssemblyReqDefaultTypeInternal _InvokeExecuteAssemblyReq_default_instance_;
PROTOBUF_CONSTEXPR InvokeInProcExecuteAssemblyReq::InvokeInProcExecuteAssemblyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.runtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.amsibypass_)*/false
  , /*decltype(_impl_.etwbypass_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvokeInProcExecuteAssemblyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeInProcExecuteAssemblyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeInProcExecuteAssemblyReqDefaultTypeInternal() {}
  union {
    InvokeInProcExecuteAssemblyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeInProcExecuteAssemblyReqDefaultTypeInternal _InvokeInProcExecuteAssemblyReq_default_instance_;
PROTOBUF_CONSTEXPR ExecuteAssembly::ExecuteAssembly(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteAssemblyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteAssemblyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteAssemblyDefaultTypeInternal() {}
  union {
    ExecuteAssembly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteAssemblyDefaultTypeInternal _ExecuteAssembly_default_instance_;
PROTOBUF_CONSTEXPR InvokeMigrateReq::InvokeMigrateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvokeMigrateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeMigrateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeMigrateReqDefaultTypeInternal() {}
  union {
    InvokeMigrateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeMigrateReqDefaultTypeInternal _InvokeMigrateReq_default_instance_;
PROTOBUF_CONSTEXPR Migrate::Migrate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MigrateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrateDefaultTypeInternal() {}
  union {
    Migrate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrateDefaultTypeInternal _Migrate_default_instance_;
PROTOBUF_CONSTEXPR ExecuteReq::ExecuteReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stdout_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stderr_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.output_)*/false
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteReqDefaultTypeInternal() {}
  union {
    ExecuteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteReqDefaultTypeInternal _ExecuteReq_default_instance_;
PROTOBUF_CONSTEXPR ExecuteWindowsReq::ExecuteWindowsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stdout_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stderr_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.output_)*/false
  , /*decltype(_impl_.usetoken_)*/false
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteWindowsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteWindowsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteWindowsReqDefaultTypeInternal() {}
  union {
    ExecuteWindowsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteWindowsReqDefaultTypeInternal _ExecuteWindowsReq_default_instance_;
PROTOBUF_CONSTEXPR Execute::Execute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stdout_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stderr_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteDefaultTypeInternal() {}
  union {
    Execute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteDefaultTypeInternal _Execute_default_instance_;
PROTOBUF_CONSTEXPR SideloadReq::SideloadReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processargs_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entrypoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.kill_)*/false
  , /*decltype(_impl_.isdll_)*/false
  , /*decltype(_impl_.isunicode_)*/false
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SideloadReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideloadReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideloadReqDefaultTypeInternal() {}
  union {
    SideloadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideloadReqDefaultTypeInternal _SideloadReq_default_instance_;
PROTOBUF_CONSTEXPR Sideload::Sideload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SideloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideloadDefaultTypeInternal() {}
  union {
    Sideload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideloadDefaultTypeInternal _Sideload_default_instance_;
PROTOBUF_CONSTEXPR InvokeSpawnDllReq::InvokeSpawnDllReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processargs_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entrypoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.kill_)*/false
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvokeSpawnDllReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeSpawnDllReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeSpawnDllReqDefaultTypeInternal() {}
  union {
    InvokeSpawnDllReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeSpawnDllReqDefaultTypeInternal _InvokeSpawnDllReq_default_instance_;
PROTOBUF_CONSTEXPR SpawnDllReq::SpawnDllReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processargs_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.kill_)*/false
  , /*decltype(_impl_.ppid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnDllReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnDllReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnDllReqDefaultTypeInternal() {}
  union {
    SpawnDllReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnDllReqDefaultTypeInternal _SpawnDllReq_default_instance_;
PROTOBUF_CONSTEXPR SpawnDll::SpawnDll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnDllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnDllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnDllDefaultTypeInternal() {}
  union {
    SpawnDll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnDllDefaultTypeInternal _SpawnDll_default_instance_;
PROTOBUF_CONSTEXPR NetstatReq::NetstatReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.tcp_)*/false
  , /*decltype(_impl_.udp_)*/false
  , /*decltype(_impl_.ip4_)*/false
  , /*decltype(_impl_.ip6_)*/false
  , /*decltype(_impl_.listening_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetstatReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetstatReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetstatReqDefaultTypeInternal() {}
  union {
    NetstatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetstatReqDefaultTypeInternal _NetstatReq_default_instance_;
PROTOBUF_CONSTEXPR SockTabEntry_SockAddr::SockTabEntry_SockAddr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SockTabEntry_SockAddrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SockTabEntry_SockAddrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SockTabEntry_SockAddrDefaultTypeInternal() {}
  union {
    SockTabEntry_SockAddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SockTabEntry_SockAddrDefaultTypeInternal _SockTabEntry_SockAddr_default_instance_;
PROTOBUF_CONSTEXPR SockTabEntry::SockTabEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skstate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localaddr_)*/nullptr
  , /*decltype(_impl_.remoteaddr_)*/nullptr
  , /*decltype(_impl_.process_)*/nullptr
  , /*decltype(_impl_.uid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SockTabEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SockTabEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SockTabEntryDefaultTypeInternal() {}
  union {
    SockTabEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SockTabEntryDefaultTypeInternal _SockTabEntry_default_instance_;
PROTOBUF_CONSTEXPR Netstat::Netstat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetstatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetstatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetstatDefaultTypeInternal() {}
  union {
    Netstat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetstatDefaultTypeInternal _Netstat_default_instance_;
PROTOBUF_CONSTEXPR EnvReq::EnvReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnvReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvReqDefaultTypeInternal() {}
  union {
    EnvReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvReqDefaultTypeInternal _EnvReq_default_instance_;
PROTOBUF_CONSTEXPR EnvInfo::EnvInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnvInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvInfoDefaultTypeInternal() {}
  union {
    EnvInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvInfoDefaultTypeInternal _EnvInfo_default_instance_;
PROTOBUF_CONSTEXPR SetEnvReq::SetEnvReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variable_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetEnvReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEnvReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEnvReqDefaultTypeInternal() {}
  union {
    SetEnvReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEnvReqDefaultTypeInternal _SetEnvReq_default_instance_;
PROTOBUF_CONSTEXPR SetEnv::SetEnv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetEnvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEnvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEnvDefaultTypeInternal() {}
  union {
    SetEnv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEnvDefaultTypeInternal _SetEnv_default_instance_;
PROTOBUF_CONSTEXPR UnsetEnvReq::UnsetEnvReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetEnvReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetEnvReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetEnvReqDefaultTypeInternal() {}
  union {
    UnsetEnvReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetEnvReqDefaultTypeInternal _UnsetEnvReq_default_instance_;
PROTOBUF_CONSTEXPR UnsetEnv::UnsetEnv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetEnvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetEnvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetEnvDefaultTypeInternal() {}
  union {
    UnsetEnv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetEnvDefaultTypeInternal _UnsetEnv_default_instance_;
PROTOBUF_CONSTEXPR DNSSessionInit::DNSSessionInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DNSSessionInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DNSSessionInitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DNSSessionInitDefaultTypeInternal() {}
  union {
    DNSSessionInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DNSSessionInitDefaultTypeInternal _DNSSessionInit_default_instance_;
PROTOBUF_CONSTEXPR DNSPoll::DNSPoll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DNSPollDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DNSPollDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DNSPollDefaultTypeInternal() {}
  union {
    DNSPoll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DNSPollDefaultTypeInternal _DNSPoll_default_instance_;
PROTOBUF_CONSTEXPR DNSBlockHeader::DNSBlockHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DNSBlockHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DNSBlockHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DNSBlockHeaderDefaultTypeInternal() {}
  union {
    DNSBlockHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DNSBlockHeaderDefaultTypeInternal _DNSBlockHeader_default_instance_;
PROTOBUF_CONSTEXPR HTTPSessionInit::HTTPSessionInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HTTPSessionInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTTPSessionInitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTTPSessionInitDefaultTypeInternal() {}
  union {
    HTTPSessionInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTTPSessionInitDefaultTypeInternal _HTTPSessionInit_default_instance_;
PROTOBUF_CONSTEXPR ScreenshotReq::ScreenshotReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScreenshotReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScreenshotReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScreenshotReqDefaultTypeInternal() {}
  union {
    ScreenshotReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScreenshotReqDefaultTypeInternal _ScreenshotReq_default_instance_;
PROTOBUF_CONSTEXPR Screenshot::Screenshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScreenshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScreenshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScreenshotDefaultTypeInternal() {}
  union {
    Screenshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScreenshotDefaultTypeInternal _Screenshot_default_instance_;
PROTOBUF_CONSTEXPR StartServiceReq::StartServiceReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.servicedescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.binpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arguments_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartServiceReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartServiceReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartServiceReqDefaultTypeInternal() {}
  union {
    StartServiceReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartServiceReqDefaultTypeInternal _StartServiceReq_default_instance_;
PROTOBUF_CONSTEXPR ServiceInfo::ServiceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceInfoDefaultTypeInternal() {}
  union {
    ServiceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
PROTOBUF_CONSTEXPR ServiceInfoReq::ServiceInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceInfoReqDefaultTypeInternal() {}
  union {
    ServiceInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceInfoReqDefaultTypeInternal _ServiceInfoReq_default_instance_;
PROTOBUF_CONSTEXPR StopServiceReq::StopServiceReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceinfo_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopServiceReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopServiceReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopServiceReqDefaultTypeInternal() {}
  union {
    StopServiceReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopServiceReqDefaultTypeInternal _StopServiceReq_default_instance_;
PROTOBUF_CONSTEXPR RemoveServiceReq::RemoveServiceReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceinfo_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveServiceReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveServiceReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveServiceReqDefaultTypeInternal() {}
  union {
    RemoveServiceReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveServiceReqDefaultTypeInternal _RemoveServiceReq_default_instance_;
PROTOBUF_CONSTEXPR BackdoorReq::BackdoorReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BackdoorReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackdoorReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackdoorReqDefaultTypeInternal() {}
  union {
    BackdoorReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackdoorReqDefaultTypeInternal _BackdoorReq_default_instance_;
PROTOBUF_CONSTEXPR Backdoor::Backdoor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BackdoorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackdoorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackdoorDefaultTypeInternal() {}
  union {
    Backdoor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackdoorDefaultTypeInternal _Backdoor_default_instance_;
PROTOBUF_CONSTEXPR RegistryReadReq::RegistryReadReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hive_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryReadReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryReadReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryReadReqDefaultTypeInternal() {}
  union {
    RegistryReadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryReadReqDefaultTypeInternal _RegistryReadReq_default_instance_;
PROTOBUF_CONSTEXPR RegistryRead::RegistryRead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryReadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryReadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryReadDefaultTypeInternal() {}
  union {
    RegistryRead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryReadDefaultTypeInternal _RegistryRead_default_instance_;
PROTOBUF_CONSTEXPR RegistryWriteReq::RegistryWriteReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hive_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stringvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytevalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.qwordvalue_)*/uint64_t{0u}
  , /*decltype(_impl_.dwordvalue_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryWriteReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryWriteReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryWriteReqDefaultTypeInternal() {}
  union {
    RegistryWriteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryWriteReqDefaultTypeInternal _RegistryWriteReq_default_instance_;
PROTOBUF_CONSTEXPR RegistryWrite::RegistryWrite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryWriteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryWriteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryWriteDefaultTypeInternal() {}
  union {
    RegistryWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryWriteDefaultTypeInternal _RegistryWrite_default_instance_;
PROTOBUF_CONSTEXPR RegistryCreateKeyReq::RegistryCreateKeyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hive_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryCreateKeyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryCreateKeyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryCreateKeyReqDefaultTypeInternal() {}
  union {
    RegistryCreateKeyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryCreateKeyReqDefaultTypeInternal _RegistryCreateKeyReq_default_instance_;
PROTOBUF_CONSTEXPR RegistryCreateKey::RegistryCreateKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryCreateKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryCreateKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryCreateKeyDefaultTypeInternal() {}
  union {
    RegistryCreateKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryCreateKeyDefaultTypeInternal _RegistryCreateKey_default_instance_;
PROTOBUF_CONSTEXPR RegistryDeleteKeyReq::RegistryDeleteKeyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hive_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryDeleteKeyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryDeleteKeyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryDeleteKeyReqDefaultTypeInternal() {}
  union {
    RegistryDeleteKeyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryDeleteKeyReqDefaultTypeInternal _RegistryDeleteKeyReq_default_instance_;
PROTOBUF_CONSTEXPR RegistryDeleteKey::RegistryDeleteKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryDeleteKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryDeleteKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryDeleteKeyDefaultTypeInternal() {}
  union {
    RegistryDeleteKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryDeleteKeyDefaultTypeInternal _RegistryDeleteKey_default_instance_;
PROTOBUF_CONSTEXPR RegistrySubKeyListReq::RegistrySubKeyListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hive_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistrySubKeyListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrySubKeyListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrySubKeyListReqDefaultTypeInternal() {}
  union {
    RegistrySubKeyListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrySubKeyListReqDefaultTypeInternal _RegistrySubKeyListReq_default_instance_;
PROTOBUF_CONSTEXPR RegistrySubKeyList::RegistrySubKeyList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subkeys_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistrySubKeyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrySubKeyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrySubKeyListDefaultTypeInternal() {}
  union {
    RegistrySubKeyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrySubKeyListDefaultTypeInternal _RegistrySubKeyList_default_instance_;
PROTOBUF_CONSTEXPR RegistryListValuesReq::RegistryListValuesReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hive_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryListValuesReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryListValuesReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryListValuesReqDefaultTypeInternal() {}
  union {
    RegistryListValuesReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryListValuesReqDefaultTypeInternal _RegistryListValuesReq_default_instance_;
PROTOBUF_CONSTEXPR RegistryValuesList::RegistryValuesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuenames_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryValuesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryValuesListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryValuesListDefaultTypeInternal() {}
  union {
    RegistryValuesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryValuesListDefaultTypeInternal _RegistryValuesList_default_instance_;
PROTOBUF_CONSTEXPR Tunnel::Tunnel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TunnelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelDefaultTypeInternal() {}
  union {
    Tunnel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelDefaultTypeInternal _Tunnel_default_instance_;
PROTOBUF_CONSTEXPR TunnelData::TunnelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rportfwd_)*/nullptr
  , /*decltype(_impl_.sequence_)*/uint64_t{0u}
  , /*decltype(_impl_.ack_)*/uint64_t{0u}
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_.closed_)*/false
  , /*decltype(_impl_.resend_)*/false
  , /*decltype(_impl_.createreverse_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TunnelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelDataDefaultTypeInternal() {}
  union {
    TunnelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelDataDefaultTypeInternal _TunnelData_default_instance_;
PROTOBUF_CONSTEXPR ShellReq::ShellReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.enablepty_)*/false
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShellReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellReqDefaultTypeInternal() {}
  union {
    ShellReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellReqDefaultTypeInternal _ShellReq_default_instance_;
PROTOBUF_CONSTEXPR Shell::Shell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.enablepty_)*/false
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellDefaultTypeInternal() {}
  union {
    Shell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellDefaultTypeInternal _Shell_default_instance_;
PROTOBUF_CONSTEXPR PortfwdReq::PortfwdReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfwdReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfwdReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfwdReqDefaultTypeInternal() {}
  union {
    PortfwdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfwdReqDefaultTypeInternal _PortfwdReq_default_instance_;
PROTOBUF_CONSTEXPR Portfwd::Portfwd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfwdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfwdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfwdDefaultTypeInternal() {}
  union {
    Portfwd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfwdDefaultTypeInternal _Portfwd_default_instance_;
PROTOBUF_CONSTEXPR Socks::Socks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocksDefaultTypeInternal() {}
  union {
    Socks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocksDefaultTypeInternal _Socks_default_instance_;
PROTOBUF_CONSTEXPR SocksData::SocksData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.sequence_)*/uint64_t{0u}
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_.closeconn_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocksDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocksDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocksDataDefaultTypeInternal() {}
  union {
    SocksData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocksDataDefaultTypeInternal _SocksData_default_instance_;
PROTOBUF_CONSTEXPR PivotStartListenerReq::PivotStartListenerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.bindaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotStartListenerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotStartListenerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotStartListenerReqDefaultTypeInternal() {}
  union {
    PivotStartListenerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotStartListenerReqDefaultTypeInternal _PivotStartListenerReq_default_instance_;
PROTOBUF_CONSTEXPR PivotStopListenerReq::PivotStopListenerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotStopListenerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotStopListenerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotStopListenerReqDefaultTypeInternal() {}
  union {
    PivotStopListenerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotStopListenerReqDefaultTypeInternal _PivotStopListenerReq_default_instance_;
PROTOBUF_CONSTEXPR PivotListener::PivotListener(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pivots_)*/{}
  , /*decltype(_impl_.bindaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotListenerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotListenerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotListenerDefaultTypeInternal() {}
  union {
    PivotListener _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotListenerDefaultTypeInternal _PivotListener_default_instance_;
PROTOBUF_CONSTEXPR PivotHello::PivotHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.publickeysignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sessionkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peerid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotHelloDefaultTypeInternal() {}
  union {
    PivotHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotHelloDefaultTypeInternal _PivotHello_default_instance_;
PROTOBUF_CONSTEXPR PivotServerKeyExchange::PivotServerKeyExchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotServerKeyExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotServerKeyExchangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotServerKeyExchangeDefaultTypeInternal() {}
  union {
    PivotServerKeyExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotServerKeyExchangeDefaultTypeInternal _PivotServerKeyExchange_default_instance_;
PROTOBUF_CONSTEXPR PivotPeer::PivotPeer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peerid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotPeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotPeerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotPeerDefaultTypeInternal() {}
  union {
    PivotPeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotPeerDefaultTypeInternal _PivotPeer_default_instance_;
PROTOBUF_CONSTEXPR PivotPeerEnvelope::PivotPeerEnvelope(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_.pivotsessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peerfailureat_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotPeerEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotPeerEnvelopeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotPeerEnvelopeDefaultTypeInternal() {}
  union {
    PivotPeerEnvelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotPeerEnvelopeDefaultTypeInternal _PivotPeerEnvelope_default_instance_;
PROTOBUF_CONSTEXPR PivotPing::PivotPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nonce_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotPingDefaultTypeInternal() {}
  union {
    PivotPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotPingDefaultTypeInternal _PivotPing_default_instance_;
PROTOBUF_CONSTEXPR NetConnPivot::NetConnPivot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remoteaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peerid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetConnPivotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetConnPivotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetConnPivotDefaultTypeInternal() {}
  union {
    NetConnPivot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetConnPivotDefaultTypeInternal _NetConnPivot_default_instance_;
PROTOBUF_CONSTEXPR PivotPeerFailure::PivotPeerFailure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peerid_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotPeerFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotPeerFailureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotPeerFailureDefaultTypeInternal() {}
  union {
    PivotPeerFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotPeerFailureDefaultTypeInternal _PivotPeerFailure_default_instance_;
PROTOBUF_CONSTEXPR PivotListenersReq::PivotListenersReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotListenersReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotListenersReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotListenersReqDefaultTypeInternal() {}
  union {
    PivotListenersReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotListenersReqDefaultTypeInternal _PivotListenersReq_default_instance_;
PROTOBUF_CONSTEXPR PivotListeners::PivotListeners(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listeners_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotListenersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotListenersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotListenersDefaultTypeInternal() {}
  union {
    PivotListeners _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotListenersDefaultTypeInternal _PivotListeners_default_instance_;
PROTOBUF_CONSTEXPR WGPortForwardStartReq::WGPortForwardStartReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remoteaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.localport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGPortForwardStartReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGPortForwardStartReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGPortForwardStartReqDefaultTypeInternal() {}
  union {
    WGPortForwardStartReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGPortForwardStartReqDefaultTypeInternal _WGPortForwardStartReq_default_instance_;
PROTOBUF_CONSTEXPR WGPortForward::WGPortForward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.forwarder_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGPortForwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGPortForwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGPortForwardDefaultTypeInternal() {}
  union {
    WGPortForward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGPortForwardDefaultTypeInternal _WGPortForward_default_instance_;
PROTOBUF_CONSTEXPR WGPortForwardStopReq::WGPortForwardStopReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGPortForwardStopReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGPortForwardStopReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGPortForwardStopReqDefaultTypeInternal() {}
  union {
    WGPortForwardStopReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGPortForwardStopReqDefaultTypeInternal _WGPortForwardStopReq_default_instance_;
PROTOBUF_CONSTEXPR WGSocksStartReq::WGSocksStartReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGSocksStartReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGSocksStartReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGSocksStartReqDefaultTypeInternal() {}
  union {
    WGSocksStartReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGSocksStartReqDefaultTypeInternal _WGSocksStartReq_default_instance_;
PROTOBUF_CONSTEXPR WGSocks::WGSocks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGSocksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGSocksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGSocksDefaultTypeInternal() {}
  union {
    WGSocks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGSocksDefaultTypeInternal _WGSocks_default_instance_;
PROTOBUF_CONSTEXPR WGSocksStopReq::WGSocksStopReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGSocksStopReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGSocksStopReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGSocksStopReqDefaultTypeInternal() {}
  union {
    WGSocksStopReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGSocksStopReqDefaultTypeInternal _WGSocksStopReq_default_instance_;
PROTOBUF_CONSTEXPR WGTCPForwardersReq::WGTCPForwardersReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGTCPForwardersReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGTCPForwardersReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGTCPForwardersReqDefaultTypeInternal() {}
  union {
    WGTCPForwardersReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGTCPForwardersReqDefaultTypeInternal _WGTCPForwardersReq_default_instance_;
PROTOBUF_CONSTEXPR WGSocksServersReq::WGSocksServersReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGSocksServersReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGSocksServersReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGSocksServersReqDefaultTypeInternal() {}
  union {
    WGSocksServersReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGSocksServersReqDefaultTypeInternal _WGSocksServersReq_default_instance_;
PROTOBUF_CONSTEXPR WGTCPForwarder::WGTCPForwarder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.localaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remoteaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGTCPForwarderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGTCPForwarderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGTCPForwarderDefaultTypeInternal() {}
  union {
    WGTCPForwarder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGTCPForwarderDefaultTypeInternal _WGTCPForwarder_default_instance_;
PROTOBUF_CONSTEXPR WGSocksServer::WGSocksServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.localaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGSocksServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGSocksServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGSocksServerDefaultTypeInternal() {}
  union {
    WGSocksServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGSocksServerDefaultTypeInternal _WGSocksServer_default_instance_;
PROTOBUF_CONSTEXPR WGSocksServers::WGSocksServers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servers_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGSocksServersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGSocksServersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGSocksServersDefaultTypeInternal() {}
  union {
    WGSocksServers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGSocksServersDefaultTypeInternal _WGSocksServers_default_instance_;
PROTOBUF_CONSTEXPR WGTCPForwarders::WGTCPForwarders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.forwarders_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WGTCPForwardersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WGTCPForwardersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WGTCPForwardersDefaultTypeInternal() {}
  union {
    WGTCPForwarders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WGTCPForwardersDefaultTypeInternal _WGTCPForwarders_default_instance_;
PROTOBUF_CONSTEXPR ReconfigureReq::ReconfigureReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.reconnectinterval_)*/int64_t{0}
  , /*decltype(_impl_.beaconinterval_)*/int64_t{0}
  , /*decltype(_impl_.beaconjitter_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconfigureReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconfigureReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconfigureReqDefaultTypeInternal() {}
  union {
    ReconfigureReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconfigureReqDefaultTypeInternal _ReconfigureReq_default_instance_;
PROTOBUF_CONSTEXPR Reconfigure::Reconfigure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconfigureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconfigureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconfigureDefaultTypeInternal() {}
  union {
    Reconfigure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconfigureDefaultTypeInternal _Reconfigure_default_instance_;
PROTOBUF_CONSTEXPR PollIntervalReq::PollIntervalReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.pollinterval_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PollIntervalReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollIntervalReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollIntervalReqDefaultTypeInternal() {}
  union {
    PollIntervalReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollIntervalReqDefaultTypeInternal _PollIntervalReq_default_instance_;
PROTOBUF_CONSTEXPR PollInterval::PollInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PollIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollIntervalDefaultTypeInternal() {}
  union {
    PollInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollIntervalDefaultTypeInternal _PollInterval_default_instance_;
PROTOBUF_CONSTEXPR SSHCommandReq::SSHCommandReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.krb5conf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keytab_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.realm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSHCommandReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSHCommandReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSHCommandReqDefaultTypeInternal() {}
  union {
    SSHCommandReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSHCommandReqDefaultTypeInternal _SSHCommandReq_default_instance_;
PROTOBUF_CONSTEXPR SSHCommand::SSHCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stdout_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stderr_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSHCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSHCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSHCommandDefaultTypeInternal() {}
  union {
    SSHCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSHCommandDefaultTypeInternal _SSHCommand_default_instance_;
PROTOBUF_CONSTEXPR GetPrivsReq::GetPrivsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPrivsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPrivsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPrivsReqDefaultTypeInternal() {}
  union {
    GetPrivsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPrivsReqDefaultTypeInternal _GetPrivsReq_default_instance_;
PROTOBUF_CONSTEXPR WindowsPrivilegeEntry::WindowsPrivilegeEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.enabledbydefault_)*/false
  , /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_.usedforaccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WindowsPrivilegeEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindowsPrivilegeEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindowsPrivilegeEntryDefaultTypeInternal() {}
  union {
    WindowsPrivilegeEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindowsPrivilegeEntryDefaultTypeInternal _WindowsPrivilegeEntry_default_instance_;
PROTOBUF_CONSTEXPR GetPrivs::GetPrivs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.privinfo_)*/{}
  , /*decltype(_impl_.processintegrity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPrivsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPrivsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPrivsDefaultTypeInternal() {}
  union {
    GetPrivs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPrivsDefaultTypeInternal _GetPrivs_default_instance_;
PROTOBUF_CONSTEXPR RegisterExtensionReq::RegisterExtensionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.init_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterExtensionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterExtensionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterExtensionReqDefaultTypeInternal() {}
  union {
    RegisterExtensionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterExtensionReqDefaultTypeInternal _RegisterExtensionReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterExtension::RegisterExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterExtensionDefaultTypeInternal() {}
  union {
    RegisterExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterExtensionDefaultTypeInternal _RegisterExtension_default_instance_;
PROTOBUF_CONSTEXPR CallExtensionReq::CallExtensionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.export__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.serverstore_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallExtensionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallExtensionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallExtensionReqDefaultTypeInternal() {}
  union {
    CallExtensionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallExtensionReqDefaultTypeInternal _CallExtensionReq_default_instance_;
PROTOBUF_CONSTEXPR CallExtension::CallExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.serverstore_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallExtensionDefaultTypeInternal() {}
  union {
    CallExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallExtensionDefaultTypeInternal _CallExtension_default_instance_;
PROTOBUF_CONSTEXPR ListExtensionsReq::ListExtensionsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListExtensionsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListExtensionsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListExtensionsReqDefaultTypeInternal() {}
  union {
    ListExtensionsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListExtensionsReqDefaultTypeInternal _ListExtensionsReq_default_instance_;
PROTOBUF_CONSTEXPR ListExtensions::ListExtensions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListExtensionsDefaultTypeInternal() {}
  union {
    ListExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListExtensionsDefaultTypeInternal _ListExtensions_default_instance_;
PROTOBUF_CONSTEXPR RportFwdStopListenerReq::RportFwdStopListenerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RportFwdStopListenerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RportFwdStopListenerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RportFwdStopListenerReqDefaultTypeInternal() {}
  union {
    RportFwdStopListenerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RportFwdStopListenerReqDefaultTypeInternal _RportFwdStopListenerReq_default_instance_;
PROTOBUF_CONSTEXPR RportFwdStartListenerReq::RportFwdStartListenerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bindaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forwardaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.bindport_)*/0u
  , /*decltype(_impl_.forwardport_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RportFwdStartListenerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RportFwdStartListenerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RportFwdStartListenerReqDefaultTypeInternal() {}
  union {
    RportFwdStartListenerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RportFwdStartListenerReqDefaultTypeInternal _RportFwdStartListenerReq_default_instance_;
PROTOBUF_CONSTEXPR RportFwdListener::RportFwdListener(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bindaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forwardaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.bindport_)*/0u
  , /*decltype(_impl_.forwardport_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RportFwdListenerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RportFwdListenerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RportFwdListenerDefaultTypeInternal() {}
  union {
    RportFwdListener _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RportFwdListenerDefaultTypeInternal _RportFwdListener_default_instance_;
PROTOBUF_CONSTEXPR RportFwdListeners::RportFwdListeners(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listeners_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RportFwdListenersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RportFwdListenersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RportFwdListenersDefaultTypeInternal() {}
  union {
    RportFwdListeners _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RportFwdListenersDefaultTypeInternal _RportFwdListeners_default_instance_;
PROTOBUF_CONSTEXPR RportFwdListenersReq::RportFwdListenersReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RportFwdListenersReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RportFwdListenersReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RportFwdListenersReqDefaultTypeInternal() {}
  union {
    RportFwdListenersReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RportFwdListenersReqDefaultTypeInternal _RportFwdListenersReq_default_instance_;
PROTOBUF_CONSTEXPR RPortfwd::RPortfwd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPortfwdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPortfwdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPortfwdDefaultTypeInternal() {}
  union {
    RPortfwd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPortfwdDefaultTypeInternal _RPortfwd_default_instance_;
PROTOBUF_CONSTEXPR RPortfwdReq::RPortfwdReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.tunnelid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPortfwdReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPortfwdReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPortfwdReqDefaultTypeInternal() {}
  union {
    RPortfwdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPortfwdReqDefaultTypeInternal _RPortfwdReq_default_instance_;
}  // namespace sliverpb
static ::_pb::Metadata file_level_metadata_sliver_2eproto[151];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sliver_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sliver_2eproto = nullptr;

const uint32_t TableStruct_sliver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Envelope, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Envelope, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Envelope, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Envelope, _impl_.unknownmessagetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconTasks, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconTasks, _impl_.tasks_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconTasks, _impl_.nextcheckin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.gid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.os_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.arch_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.activec2_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.reconnectinterval_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.proxyurl_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.configid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.peerid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Register, _impl_.locale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconRegister, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconRegister, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconRegister, _impl_.jitter_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconRegister, _impl_.register__),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BeaconRegister, _impl_.nextcheckin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SessionRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SessionRegister, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SessionRegister, _impl_.register__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::OpenSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::OpenSession, _impl_.c2s_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::OpenSession, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::OpenSession, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::OpenSession, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CloseSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CloseSession, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CloseSession, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ping, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ping, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ping, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::KillReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::KillReq, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::KillReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PsReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ps, _impl_.processes_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ps, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::TerminateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::TerminateReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TerminateReq, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TerminateReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Terminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Terminate, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Terminate, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::IfconfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::IfconfigReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ifconfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ifconfig, _impl_.netinterfaces_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ifconfig, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetInterface, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetInterface, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetInterface, _impl_.mac_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetInterface, _impl_.ipaddresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::LsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::LsReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::LsReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _impl_.exists_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _impl_.timezoneoffset_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Ls, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _impl_.isdir_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _impl_.modtime_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::FileInfo, _impl_.link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CdReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CdReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PwdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PwdReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Pwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Pwd, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Pwd, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RmReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RmReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RmReq, _impl_.recursive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RmReq, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RmReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Rm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Rm, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Rm, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MvReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MvReq, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MvReq, _impl_.dst_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MvReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mv, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mv, _impl_.dst_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mv, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MkdirReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MkdirReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MkdirReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mkdir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mkdir, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Mkdir, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DownloadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DownloadReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::DownloadReq, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::DownloadReq, _impl_.stop_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::DownloadReq, _impl_.recurse_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::DownloadReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.encoder_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.exists_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.stop_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.isdir_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.readfiles_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.unreadablefiles_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Download, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::UploadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::UploadReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::UploadReq, _impl_.encoder_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::UploadReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::UploadReq, _impl_.isioc_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::UploadReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Upload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Upload, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Upload, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDumpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDumpReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDumpReq, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDumpReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDump, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ProcessDump, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.processname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.hidewindow_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.netonly_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAsReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAs, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RunAs, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ImpersonateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ImpersonateReq, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ImpersonateReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Impersonate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Impersonate, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RevToSelfReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RevToSelfReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RevToSelf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RevToSelf, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CurrentTokenOwnerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CurrentTokenOwnerReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CurrentTokenOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CurrentTokenOwner, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CurrentTokenOwner, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeGetSystemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeGetSystemReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeGetSystemReq, _impl_.hostingprocess_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeGetSystemReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetSystem, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeTokenReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeTokenReq, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeTokenReq, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeTokenReq, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeTokenReq, _impl_.logontype_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeTokenReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::MakeToken, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::TaskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::TaskReq, _impl_.encoder_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TaskReq, _impl_.rwxpages_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TaskReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TaskReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TaskReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Task, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.assembly_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.isdll_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.arch_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.classname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.appdomain_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.processargs_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.inprocess_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.runtime_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.amsibypass_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.etwbypass_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssemblyReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeExecuteAssemblyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeExecuteAssemblyReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeExecuteAssemblyReq, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeExecuteAssemblyReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeExecuteAssemblyReq, _impl_.processargs_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeExecuteAssemblyReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _impl_.runtime_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _impl_.amsibypass_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _impl_.etwbypass_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeInProcExecuteAssemblyReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssembly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssembly, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteAssembly, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeMigrateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeMigrateReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeMigrateReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeMigrateReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Migrate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Migrate, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Migrate, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.stdout_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.stderr_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.stdout_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.stderr_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.usetoken_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ExecuteWindowsReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Execute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Execute, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Execute, _impl_.stdout_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Execute, _impl_.stderr_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Execute, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Execute, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.processname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.entrypoint_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.kill_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.isdll_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.isunicode_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.processargs_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SideloadReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Sideload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Sideload, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Sideload, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.processname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.entrypoint_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.kill_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.processargs_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::InvokeSpawnDllReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.processname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.kill_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.ppid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.processargs_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDllReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDll, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SpawnDll, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _impl_.tcp_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _impl_.udp_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _impl_.ip4_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _impl_.ip6_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _impl_.listening_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetstatReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry_SockAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry_SockAddr, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry_SockAddr, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _impl_.localaddr_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _impl_.remoteaddr_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _impl_.skstate_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SockTabEntry, _impl_.protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Netstat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Netstat, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Netstat, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::EnvReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::EnvReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::EnvReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::EnvInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::EnvInfo, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::EnvInfo, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SetEnvReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SetEnvReq, _impl_.variable_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SetEnvReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SetEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SetEnv, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::UnsetEnvReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::UnsetEnvReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::UnsetEnvReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::UnsetEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::UnsetEnv, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSSessionInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSSessionInit, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSPoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSPoll, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSBlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSBlockHeader, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::DNSBlockHeader, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::HTTPSessionInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::HTTPSessionInit, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ScreenshotReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ScreenshotReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Screenshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Screenshot, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Screenshot, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _impl_.servicename_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _impl_.servicedescription_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _impl_.binpath_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::StartServiceReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ServiceInfo, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ServiceInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ServiceInfoReq, _impl_.servicename_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ServiceInfoReq, _impl_.hostname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::StopServiceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::StopServiceReq, _impl_.serviceinfo_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::StopServiceReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RemoveServiceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RemoveServiceReq, _impl_.serviceinfo_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RemoveServiceReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::BackdoorReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::BackdoorReq, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BackdoorReq, _impl_.profilename_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::BackdoorReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Backdoor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Backdoor, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryReadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryReadReq, _impl_.hive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryReadReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryReadReq, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryReadReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryReadReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryRead, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryRead, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.hive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.stringvalue_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.bytevalue_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.dwordvalue_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.qwordvalue_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWriteReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryWrite, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKeyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKeyReq, _impl_.hive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKeyReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKeyReq, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKeyReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKeyReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryCreateKey, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKeyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKeyReq, _impl_.hive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKeyReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKeyReq, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKeyReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKeyReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryDeleteKey, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyListReq, _impl_.hive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyListReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyListReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyListReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyList, _impl_.subkeys_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistrySubKeyList, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryListValuesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryListValuesReq, _impl_.hive_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryListValuesReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryListValuesReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryListValuesReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryValuesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryValuesList, _impl_.valuenames_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegistryValuesList, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Tunnel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Tunnel, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Tunnel, _impl_.sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.closed_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.ack_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.resend_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.createreverse_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.rportfwd_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::TunnelData, _impl_.sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ShellReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ShellReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ShellReq, _impl_.enablepty_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ShellReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ShellReq, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ShellReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Shell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Shell, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Shell, _impl_.enablepty_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Shell, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Shell, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Shell, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PortfwdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PortfwdReq, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PortfwdReq, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PortfwdReq, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PortfwdReq, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PortfwdReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Portfwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Portfwd, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Portfwd, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Portfwd, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Portfwd, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Portfwd, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Socks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Socks, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::Socks, _impl_.sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.closeconn_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SocksData, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStartListenerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStartListenerReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStartListenerReq, _impl_.bindaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStartListenerReq, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStartListenerReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStopListenerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStopListenerReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotStopListenerReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListener, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListener, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListener, _impl_.bindaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListener, _impl_.pivots_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListener, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotHello, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotHello, _impl_.peerid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotHello, _impl_.publickeysignature_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotHello, _impl_.sessionkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotServerKeyExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotServerKeyExchange, _impl_.originid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotServerKeyExchange, _impl_.sessionkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeer, _impl_.peerid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeer, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerEnvelope, _impl_.peers_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerEnvelope, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerEnvelope, _impl_.pivotsessionid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerEnvelope, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerEnvelope, _impl_.peerfailureat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPing, _impl_.nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetConnPivot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetConnPivot, _impl_.peerid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::NetConnPivot, _impl_.remoteaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerFailure, _impl_.peerid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerFailure, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotPeerFailure, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListenersReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListenersReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListeners, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListeners, _impl_.listeners_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PivotListeners, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStartReq, _impl_.localport_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStartReq, _impl_.remoteaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStartReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForward, _impl_.forwarder_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForward, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStopReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGPortForwardStopReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksStartReq, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksStartReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocks, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocks, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksStopReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksStopReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwardersReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwardersReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServersReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServersReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarder, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarder, _impl_.localaddr_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarder, _impl_.remoteaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServer, _impl_.localaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServers, _impl_.servers_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGSocksServers, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarders, _impl_.forwarders_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WGTCPForwarders, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ReconfigureReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ReconfigureReq, _impl_.reconnectinterval_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ReconfigureReq, _impl_.beaconinterval_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ReconfigureReq, _impl_.beaconjitter_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ReconfigureReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Reconfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::Reconfigure, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PollIntervalReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PollIntervalReq, _impl_.pollinterval_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::PollIntervalReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PollInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::PollInterval, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.privkey_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.krb5conf_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.keytab_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.realm_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommandReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommand, _impl_.stdout_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommand, _impl_.stderr_pb_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::SSHCommand, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivsReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _impl_.enabledbydefault_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _impl_.removed_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::WindowsPrivilegeEntry, _impl_.usedforaccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivs, _impl_.privinfo_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivs, _impl_.processintegrity_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivs, _impl_.processname_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::GetPrivs, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtensionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtensionReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtensionReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtensionReq, _impl_.os_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtensionReq, _impl_.init_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtensionReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RegisterExtension, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtensionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtensionReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtensionReq, _impl_.serverstore_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtensionReq, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtensionReq, _impl_.export__),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtensionReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtension, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtension, _impl_.serverstore_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::CallExtension, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ListExtensionsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ListExtensionsReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ListExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::ListExtensions, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::ListExtensions, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStopListenerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStopListenerReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStopListenerReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStartListenerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStartListenerReq, _impl_.bindaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStartListenerReq, _impl_.bindport_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStartListenerReq, _impl_.forwardport_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStartListenerReq, _impl_.forwardaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdStartListenerReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _impl_.bindaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _impl_.bindport_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _impl_.forwardaddress_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _impl_.forwardport_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListener, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListeners, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListeners, _impl_.listeners_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListeners, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListenersReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RportFwdListenersReq, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwd, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwd, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwd, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwd, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwd, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwdReq, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwdReq, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwdReq, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwdReq, _impl_.tunnelid_),
  PROTOBUF_FIELD_OFFSET(::sliverpb::RPortfwdReq, _impl_.request_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sliverpb::Envelope)},
  { 10, -1, -1, sizeof(::sliverpb::BeaconTasks)},
  { 19, -1, -1, sizeof(::sliverpb::Register)},
  { 42, -1, -1, sizeof(::sliverpb::BeaconRegister)},
  { 53, -1, -1, sizeof(::sliverpb::SessionRegister)},
  { 61, -1, -1, sizeof(::sliverpb::OpenSession)},
  { 71, -1, -1, sizeof(::sliverpb::CloseSession)},
  { 79, -1, -1, sizeof(::sliverpb::Ping)},
  { 88, -1, -1, sizeof(::sliverpb::KillReq)},
  { 96, -1, -1, sizeof(::sliverpb::PsReq)},
  { 103, -1, -1, sizeof(::sliverpb::Ps)},
  { 111, -1, -1, sizeof(::sliverpb::TerminateReq)},
  { 120, -1, -1, sizeof(::sliverpb::Terminate)},
  { 128, -1, -1, sizeof(::sliverpb::IfconfigReq)},
  { 135, -1, -1, sizeof(::sliverpb::Ifconfig)},
  { 143, -1, -1, sizeof(::sliverpb::NetInterface)},
  { 153, -1, -1, sizeof(::sliverpb::LsReq)},
  { 161, -1, -1, sizeof(::sliverpb::Ls)},
  { 173, -1, -1, sizeof(::sliverpb::FileInfo)},
  { 185, -1, -1, sizeof(::sliverpb::CdReq)},
  { 193, -1, -1, sizeof(::sliverpb::PwdReq)},
  { 200, -1, -1, sizeof(::sliverpb::Pwd)},
  { 208, -1, -1, sizeof(::sliverpb::RmReq)},
  { 218, -1, -1, sizeof(::sliverpb::Rm)},
  { 226, -1, -1, sizeof(::sliverpb::MvReq)},
  { 235, -1, -1, sizeof(::sliverpb::Mv)},
  { 244, -1, -1, sizeof(::sliverpb::MkdirReq)},
  { 252, -1, -1, sizeof(::sliverpb::Mkdir)},
  { 260, -1, -1, sizeof(::sliverpb::DownloadReq)},
  { 271, -1, -1, sizeof(::sliverpb::Download)},
  { 287, -1, -1, sizeof(::sliverpb::UploadReq)},
  { 298, -1, -1, sizeof(::sliverpb::Upload)},
  { 306, -1, -1, sizeof(::sliverpb::ProcessDumpReq)},
  { 315, -1, -1, sizeof(::sliverpb::ProcessDump)},
  { 323, -1, -1, sizeof(::sliverpb::RunAsReq)},
  { 337, -1, -1, sizeof(::sliverpb::RunAs)},
  { 345, -1, -1, sizeof(::sliverpb::ImpersonateReq)},
  { 353, -1, -1, sizeof(::sliverpb::Impersonate)},
  { 360, -1, -1, sizeof(::sliverpb::RevToSelfReq)},
  { 367, -1, -1, sizeof(::sliverpb::RevToSelf)},
  { 374, -1, -1, sizeof(::sliverpb::CurrentTokenOwnerReq)},
  { 381, -1, -1, sizeof(::sliverpb::CurrentTokenOwner)},
  { 389, -1, -1, sizeof(::sliverpb::InvokeGetSystemReq)},
  { 398, -1, -1, sizeof(::sliverpb::GetSystem)},
  { 405, -1, -1, sizeof(::sliverpb::MakeTokenReq)},
  { 416, -1, -1, sizeof(::sliverpb::MakeToken)},
  { 423, -1, -1, sizeof(::sliverpb::TaskReq)},
  { 434, -1, -1, sizeof(::sliverpb::Task)},
  { 441, -1, -1, sizeof(::sliverpb::ExecuteAssemblyReq)},
  { 462, -1, -1, sizeof(::sliverpb::InvokeExecuteAssemblyReq)},
  { 473, -1, -1, sizeof(::sliverpb::InvokeInProcExecuteAssemblyReq)},
  { 485, -1, -1, sizeof(::sliverpb::ExecuteAssembly)},
  { 493, -1, -1, sizeof(::sliverpb::InvokeMigrateReq)},
  { 502, -1, -1, sizeof(::sliverpb::Migrate)},
  { 510, -1, -1, sizeof(::sliverpb::ExecuteReq)},
  { 523, -1, -1, sizeof(::sliverpb::ExecuteWindowsReq)},
  { 537, -1, -1, sizeof(::sliverpb::Execute)},
  { 548, -1, -1, sizeof(::sliverpb::SideloadReq)},
  { 564, -1, -1, sizeof(::sliverpb::Sideload)},
  { 572, -1, -1, sizeof(::sliverpb::InvokeSpawnDllReq)},
  { 586, -1, -1, sizeof(::sliverpb::SpawnDllReq)},
  { 600, -1, -1, sizeof(::sliverpb::SpawnDll)},
  { 608, -1, -1, sizeof(::sliverpb::NetstatReq)},
  { 620, -1, -1, sizeof(::sliverpb::SockTabEntry_SockAddr)},
  { 628, -1, -1, sizeof(::sliverpb::SockTabEntry)},
  { 640, -1, -1, sizeof(::sliverpb::Netstat)},
  { 648, -1, -1, sizeof(::sliverpb::EnvReq)},
  { 656, -1, -1, sizeof(::sliverpb::EnvInfo)},
  { 664, -1, -1, sizeof(::sliverpb::SetEnvReq)},
  { 672, -1, -1, sizeof(::sliverpb::SetEnv)},
  { 679, -1, -1, sizeof(::sliverpb::UnsetEnvReq)},
  { 687, -1, -1, sizeof(::sliverpb::UnsetEnv)},
  { 694, -1, -1, sizeof(::sliverpb::DNSSessionInit)},
  { 701, -1, -1, sizeof(::sliverpb::DNSPoll)},
  { 708, -1, -1, sizeof(::sliverpb::DNSBlockHeader)},
  { 716, -1, -1, sizeof(::sliverpb::HTTPSessionInit)},
  { 723, -1, -1, sizeof(::sliverpb::ScreenshotReq)},
  { 730, -1, -1, sizeof(::sliverpb::Screenshot)},
  { 738, -1, -1, sizeof(::sliverpb::StartServiceReq)},
  { 750, -1, -1, sizeof(::sliverpb::ServiceInfo)},
  { 757, -1, -1, sizeof(::sliverpb::ServiceInfoReq)},
  { 765, -1, -1, sizeof(::sliverpb::StopServiceReq)},
  { 773, -1, -1, sizeof(::sliverpb::RemoveServiceReq)},
  { 781, -1, -1, sizeof(::sliverpb::BackdoorReq)},
  { 790, -1, -1, sizeof(::sliverpb::Backdoor)},
  { 797, -1, -1, sizeof(::sliverpb::RegistryReadReq)},
  { 808, -1, -1, sizeof(::sliverpb::RegistryRead)},
  { 816, -1, -1, sizeof(::sliverpb::RegistryWriteReq)},
  { 832, -1, -1, sizeof(::sliverpb::RegistryWrite)},
  { 839, -1, -1, sizeof(::sliverpb::RegistryCreateKeyReq)},
  { 850, -1, -1, sizeof(::sliverpb::RegistryCreateKey)},
  { 857, -1, -1, sizeof(::sliverpb::RegistryDeleteKeyReq)},
  { 868, -1, -1, sizeof(::sliverpb::RegistryDeleteKey)},
  { 875, -1, -1, sizeof(::sliverpb::RegistrySubKeyListReq)},
  { 885, -1, -1, sizeof(::sliverpb::RegistrySubKeyList)},
  { 893, -1, -1, sizeof(::sliverpb::RegistryListValuesReq)},
  { 903, -1, -1, sizeof(::sliverpb::RegistryValuesList)},
  { 911, -1, -1, sizeof(::sliverpb::Tunnel)},
  { 919, -1, -1, sizeof(::sliverpb::TunnelData)},
  { 934, -1, -1, sizeof(::sliverpb::ShellReq)},
  { 945, -1, -1, sizeof(::sliverpb::Shell)},
  { 956, -1, -1, sizeof(::sliverpb::PortfwdReq)},
  { 967, -1, -1, sizeof(::sliverpb::Portfwd)},
  { 978, -1, -1, sizeof(::sliverpb::Socks)},
  { 986, -1, -1, sizeof(::sliverpb::SocksData)},
  { 999, -1, -1, sizeof(::sliverpb::PivotStartListenerReq)},
  { 1009, -1, -1, sizeof(::sliverpb::PivotStopListenerReq)},
  { 1017, -1, -1, sizeof(::sliverpb::PivotListener)},
  { 1028, -1, -1, sizeof(::sliverpb::PivotHello)},
  { 1038, -1, -1, sizeof(::sliverpb::PivotServerKeyExchange)},
  { 1046, -1, -1, sizeof(::sliverpb::PivotPeer)},
  { 1054, -1, -1, sizeof(::sliverpb::PivotPeerEnvelope)},
  { 1065, -1, -1, sizeof(::sliverpb::PivotPing)},
  { 1072, -1, -1, sizeof(::sliverpb::NetConnPivot)},
  { 1080, -1, -1, sizeof(::sliverpb::PivotPeerFailure)},
  { 1089, -1, -1, sizeof(::sliverpb::PivotListenersReq)},
  { 1096, -1, -1, sizeof(::sliverpb::PivotListeners)},
  { 1104, -1, -1, sizeof(::sliverpb::WGPortForwardStartReq)},
  { 1113, -1, -1, sizeof(::sliverpb::WGPortForward)},
  { 1121, -1, -1, sizeof(::sliverpb::WGPortForwardStopReq)},
  { 1129, -1, -1, sizeof(::sliverpb::WGSocksStartReq)},
  { 1137, -1, -1, sizeof(::sliverpb::WGSocks)},
  { 1145, -1, -1, sizeof(::sliverpb::WGSocksStopReq)},
  { 1153, -1, -1, sizeof(::sliverpb::WGTCPForwardersReq)},
  { 1160, -1, -1, sizeof(::sliverpb::WGSocksServersReq)},
  { 1167, -1, -1, sizeof(::sliverpb::WGTCPForwarder)},
  { 1176, -1, -1, sizeof(::sliverpb::WGSocksServer)},
  { 1184, -1, -1, sizeof(::sliverpb::WGSocksServers)},
  { 1192, -1, -1, sizeof(::sliverpb::WGTCPForwarders)},
  { 1200, -1, -1, sizeof(::sliverpb::ReconfigureReq)},
  { 1210, -1, -1, sizeof(::sliverpb::Reconfigure)},
  { 1217, -1, -1, sizeof(::sliverpb::PollIntervalReq)},
  { 1225, -1, -1, sizeof(::sliverpb::PollInterval)},
  { 1232, -1, -1, sizeof(::sliverpb::SSHCommandReq)},
  { 1248, -1, -1, sizeof(::sliverpb::SSHCommand)},
  { 1257, -1, -1, sizeof(::sliverpb::GetPrivsReq)},
  { 1264, -1, -1, sizeof(::sliverpb::WindowsPrivilegeEntry)},
  { 1276, -1, -1, sizeof(::sliverpb::GetPrivs)},
  { 1286, -1, -1, sizeof(::sliverpb::RegisterExtensionReq)},
  { 1297, -1, -1, sizeof(::sliverpb::RegisterExtension)},
  { 1304, -1, -1, sizeof(::sliverpb::CallExtensionReq)},
  { 1315, -1, -1, sizeof(::sliverpb::CallExtension)},
  { 1324, -1, -1, sizeof(::sliverpb::ListExtensionsReq)},
  { 1331, -1, -1, sizeof(::sliverpb::ListExtensions)},
  { 1339, -1, -1, sizeof(::sliverpb::RportFwdStopListenerReq)},
  { 1347, -1, -1, sizeof(::sliverpb::RportFwdStartListenerReq)},
  { 1358, -1, -1, sizeof(::sliverpb::RportFwdListener)},
  { 1370, -1, -1, sizeof(::sliverpb::RportFwdListeners)},
  { 1378, -1, -1, sizeof(::sliverpb::RportFwdListenersReq)},
  { 1385, -1, -1, sizeof(::sliverpb::RPortfwd)},
  { 1396, -1, -1, sizeof(::sliverpb::RPortfwdReq)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sliverpb::_Envelope_default_instance_._instance,
  &::sliverpb::_BeaconTasks_default_instance_._instance,
  &::sliverpb::_Register_default_instance_._instance,
  &::sliverpb::_BeaconRegister_default_instance_._instance,
  &::sliverpb::_SessionRegister_default_instance_._instance,
  &::sliverpb::_OpenSession_default_instance_._instance,
  &::sliverpb::_CloseSession_default_instance_._instance,
  &::sliverpb::_Ping_default_instance_._instance,
  &::sliverpb::_KillReq_default_instance_._instance,
  &::sliverpb::_PsReq_default_instance_._instance,
  &::sliverpb::_Ps_default_instance_._instance,
  &::sliverpb::_TerminateReq_default_instance_._instance,
  &::sliverpb::_Terminate_default_instance_._instance,
  &::sliverpb::_IfconfigReq_default_instance_._instance,
  &::sliverpb::_Ifconfig_default_instance_._instance,
  &::sliverpb::_NetInterface_default_instance_._instance,
  &::sliverpb::_LsReq_default_instance_._instance,
  &::sliverpb::_Ls_default_instance_._instance,
  &::sliverpb::_FileInfo_default_instance_._instance,
  &::sliverpb::_CdReq_default_instance_._instance,
  &::sliverpb::_PwdReq_default_instance_._instance,
  &::sliverpb::_Pwd_default_instance_._instance,
  &::sliverpb::_RmReq_default_instance_._instance,
  &::sliverpb::_Rm_default_instance_._instance,
  &::sliverpb::_MvReq_default_instance_._instance,
  &::sliverpb::_Mv_default_instance_._instance,
  &::sliverpb::_MkdirReq_default_instance_._instance,
  &::sliverpb::_Mkdir_default_instance_._instance,
  &::sliverpb::_DownloadReq_default_instance_._instance,
  &::sliverpb::_Download_default_instance_._instance,
  &::sliverpb::_UploadReq_default_instance_._instance,
  &::sliverpb::_Upload_default_instance_._instance,
  &::sliverpb::_ProcessDumpReq_default_instance_._instance,
  &::sliverpb::_ProcessDump_default_instance_._instance,
  &::sliverpb::_RunAsReq_default_instance_._instance,
  &::sliverpb::_RunAs_default_instance_._instance,
  &::sliverpb::_ImpersonateReq_default_instance_._instance,
  &::sliverpb::_Impersonate_default_instance_._instance,
  &::sliverpb::_RevToSelfReq_default_instance_._instance,
  &::sliverpb::_RevToSelf_default_instance_._instance,
  &::sliverpb::_CurrentTokenOwnerReq_default_instance_._instance,
  &::sliverpb::_CurrentTokenOwner_default_instance_._instance,
  &::sliverpb::_InvokeGetSystemReq_default_instance_._instance,
  &::sliverpb::_GetSystem_default_instance_._instance,
  &::sliverpb::_MakeTokenReq_default_instance_._instance,
  &::sliverpb::_MakeToken_default_instance_._instance,
  &::sliverpb::_TaskReq_default_instance_._instance,
  &::sliverpb::_Task_default_instance_._instance,
  &::sliverpb::_ExecuteAssemblyReq_default_instance_._instance,
  &::sliverpb::_InvokeExecuteAssemblyReq_default_instance_._instance,
  &::sliverpb::_InvokeInProcExecuteAssemblyReq_default_instance_._instance,
  &::sliverpb::_ExecuteAssembly_default_instance_._instance,
  &::sliverpb::_InvokeMigrateReq_default_instance_._instance,
  &::sliverpb::_Migrate_default_instance_._instance,
  &::sliverpb::_ExecuteReq_default_instance_._instance,
  &::sliverpb::_ExecuteWindowsReq_default_instance_._instance,
  &::sliverpb::_Execute_default_instance_._instance,
  &::sliverpb::_SideloadReq_default_instance_._instance,
  &::sliverpb::_Sideload_default_instance_._instance,
  &::sliverpb::_InvokeSpawnDllReq_default_instance_._instance,
  &::sliverpb::_SpawnDllReq_default_instance_._instance,
  &::sliverpb::_SpawnDll_default_instance_._instance,
  &::sliverpb::_NetstatReq_default_instance_._instance,
  &::sliverpb::_SockTabEntry_SockAddr_default_instance_._instance,
  &::sliverpb::_SockTabEntry_default_instance_._instance,
  &::sliverpb::_Netstat_default_instance_._instance,
  &::sliverpb::_EnvReq_default_instance_._instance,
  &::sliverpb::_EnvInfo_default_instance_._instance,
  &::sliverpb::_SetEnvReq_default_instance_._instance,
  &::sliverpb::_SetEnv_default_instance_._instance,
  &::sliverpb::_UnsetEnvReq_default_instance_._instance,
  &::sliverpb::_UnsetEnv_default_instance_._instance,
  &::sliverpb::_DNSSessionInit_default_instance_._instance,
  &::sliverpb::_DNSPoll_default_instance_._instance,
  &::sliverpb::_DNSBlockHeader_default_instance_._instance,
  &::sliverpb::_HTTPSessionInit_default_instance_._instance,
  &::sliverpb::_ScreenshotReq_default_instance_._instance,
  &::sliverpb::_Screenshot_default_instance_._instance,
  &::sliverpb::_StartServiceReq_default_instance_._instance,
  &::sliverpb::_ServiceInfo_default_instance_._instance,
  &::sliverpb::_ServiceInfoReq_default_instance_._instance,
  &::sliverpb::_StopServiceReq_default_instance_._instance,
  &::sliverpb::_RemoveServiceReq_default_instance_._instance,
  &::sliverpb::_BackdoorReq_default_instance_._instance,
  &::sliverpb::_Backdoor_default_instance_._instance,
  &::sliverpb::_RegistryReadReq_default_instance_._instance,
  &::sliverpb::_RegistryRead_default_instance_._instance,
  &::sliverpb::_RegistryWriteReq_default_instance_._instance,
  &::sliverpb::_RegistryWrite_default_instance_._instance,
  &::sliverpb::_RegistryCreateKeyReq_default_instance_._instance,
  &::sliverpb::_RegistryCreateKey_default_instance_._instance,
  &::sliverpb::_RegistryDeleteKeyReq_default_instance_._instance,
  &::sliverpb::_RegistryDeleteKey_default_instance_._instance,
  &::sliverpb::_RegistrySubKeyListReq_default_instance_._instance,
  &::sliverpb::_RegistrySubKeyList_default_instance_._instance,
  &::sliverpb::_RegistryListValuesReq_default_instance_._instance,
  &::sliverpb::_RegistryValuesList_default_instance_._instance,
  &::sliverpb::_Tunnel_default_instance_._instance,
  &::sliverpb::_TunnelData_default_instance_._instance,
  &::sliverpb::_ShellReq_default_instance_._instance,
  &::sliverpb::_Shell_default_instance_._instance,
  &::sliverpb::_PortfwdReq_default_instance_._instance,
  &::sliverpb::_Portfwd_default_instance_._instance,
  &::sliverpb::_Socks_default_instance_._instance,
  &::sliverpb::_SocksData_default_instance_._instance,
  &::sliverpb::_PivotStartListenerReq_default_instance_._instance,
  &::sliverpb::_PivotStopListenerReq_default_instance_._instance,
  &::sliverpb::_PivotListener_default_instance_._instance,
  &::sliverpb::_PivotHello_default_instance_._instance,
  &::sliverpb::_PivotServerKeyExchange_default_instance_._instance,
  &::sliverpb::_PivotPeer_default_instance_._instance,
  &::sliverpb::_PivotPeerEnvelope_default_instance_._instance,
  &::sliverpb::_PivotPing_default_instance_._instance,
  &::sliverpb::_NetConnPivot_default_instance_._instance,
  &::sliverpb::_PivotPeerFailure_default_instance_._instance,
  &::sliverpb::_PivotListenersReq_default_instance_._instance,
  &::sliverpb::_PivotListeners_default_instance_._instance,
  &::sliverpb::_WGPortForwardStartReq_default_instance_._instance,
  &::sliverpb::_WGPortForward_default_instance_._instance,
  &::sliverpb::_WGPortForwardStopReq_default_instance_._instance,
  &::sliverpb::_WGSocksStartReq_default_instance_._instance,
  &::sliverpb::_WGSocks_default_instance_._instance,
  &::sliverpb::_WGSocksStopReq_default_instance_._instance,
  &::sliverpb::_WGTCPForwardersReq_default_instance_._instance,
  &::sliverpb::_WGSocksServersReq_default_instance_._instance,
  &::sliverpb::_WGTCPForwarder_default_instance_._instance,
  &::sliverpb::_WGSocksServer_default_instance_._instance,
  &::sliverpb::_WGSocksServers_default_instance_._instance,
  &::sliverpb::_WGTCPForwarders_default_instance_._instance,
  &::sliverpb::_ReconfigureReq_default_instance_._instance,
  &::sliverpb::_Reconfigure_default_instance_._instance,
  &::sliverpb::_PollIntervalReq_default_instance_._instance,
  &::sliverpb::_PollInterval_default_instance_._instance,
  &::sliverpb::_SSHCommandReq_default_instance_._instance,
  &::sliverpb::_SSHCommand_default_instance_._instance,
  &::sliverpb::_GetPrivsReq_default_instance_._instance,
  &::sliverpb::_WindowsPrivilegeEntry_default_instance_._instance,
  &::sliverpb::_GetPrivs_default_instance_._instance,
  &::sliverpb::_RegisterExtensionReq_default_instance_._instance,
  &::sliverpb::_RegisterExtension_default_instance_._instance,
  &::sliverpb::_CallExtensionReq_default_instance_._instance,
  &::sliverpb::_CallExtension_default_instance_._instance,
  &::sliverpb::_ListExtensionsReq_default_instance_._instance,
  &::sliverpb::_ListExtensions_default_instance_._instance,
  &::sliverpb::_RportFwdStopListenerReq_default_instance_._instance,
  &::sliverpb::_RportFwdStartListenerReq_default_instance_._instance,
  &::sliverpb::_RportFwdListener_default_instance_._instance,
  &::sliverpb::_RportFwdListeners_default_instance_._instance,
  &::sliverpb::_RportFwdListenersReq_default_instance_._instance,
  &::sliverpb::_RPortfwd_default_instance_._instance,
  &::sliverpb::_RPortfwdReq_default_instance_._instance,
};

const char descriptor_table_protodef_sliver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sliver.proto\022\010sliverpb\032\014common.proto\"N"
  "\n\010Envelope\022\n\n\002ID\030\001 \001(\003\022\014\n\004Type\030\002 \001(\r\022\014\n\004"
  "Data\030\003 \001(\014\022\032\n\022UnknownMessageType\030\004 \001(\010\"Q"
  "\n\013BeaconTasks\022\n\n\002ID\030\001 \001(\t\022!\n\005Tasks\030\002 \003(\013"
  "2\022.sliverpb.Envelope\022\023\n\013NextCheckin\030\003 \001("
  "\003\"\237\002\n\010Register\022\014\n\004Name\030\001 \001(\t\022\020\n\010Hostname"
  "\030\002 \001(\t\022\014\n\004Uuid\030\003 \001(\t\022\020\n\010Username\030\004 \001(\t\022\013"
  "\n\003Uid\030\005 \001(\t\022\013\n\003Gid\030\006 \001(\t\022\n\n\002Os\030\007 \001(\t\022\014\n\004"
  "Arch\030\010 \001(\t\022\013\n\003Pid\030\t \001(\005\022\020\n\010Filename\030\n \001("
  "\t\022\020\n\010ActiveC2\030\013 \001(\t\022\017\n\007Version\030\014 \001(\t\022\031\n\021"
  "ReconnectInterval\030\r \001(\003\022\020\n\010ProxyURL\030\016 \001("
  "\t\022\020\n\010ConfigID\030\020 \001(\t\022\016\n\006PeerID\030\021 \001(\003\022\016\n\006L"
  "ocale\030\022 \001(\t\"y\n\016BeaconRegister\022\n\n\002ID\030\001 \001("
  "\t\022\020\n\010Interval\030\002 \001(\003\022\016\n\006Jitter\030\003 \001(\003\022$\n\010R"
  "egister\030\004 \001(\0132\022.sliverpb.Register\022\023\n\013Nex"
  "tCheckin\030\005 \001(\003\"C\n\017SessionRegister\022\n\n\002ID\030"
  "\001 \001(\t\022$\n\010Register\030\002 \001(\0132\022.sliverpb.Regis"
  "ter\"s\n\013OpenSession\022\013\n\003C2s\030\001 \003(\t\022\r\n\005Delay"
  "\030\002 \001(\003\022$\n\010Response\030\010 \001(\0132\022.sliverpb.Resp"
  "onse\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request"
  "\"X\n\014CloseSession\022$\n\010Response\030\010 \001(\0132\022.sli"
  "verpb.Response\022\"\n\007Request\030\t \001(\0132\021.sliver"
  "pb.Request\"_\n\004Ping\022\r\n\005Nonce\030\001 \001(\005\022$\n\010Res"
  "ponse\030\010 \001(\0132\022.sliverpb.Response\022\"\n\007Reque"
  "st\030\t \001(\0132\021.sliverpb.Request\"<\n\007KillReq\022\r"
  "\n\005Force\030\001 \001(\010\022\"\n\007Request\030\t \001(\0132\021.sliverp"
  "b.Request\"+\n\005PsReq\022\"\n\007Request\030\t \001(\0132\021.sl"
  "iverpb.Request\"P\n\002Ps\022$\n\tProcesses\030\001 \003(\0132"
  "\021.sliverpb.Process\022$\n\010Response\030\t \001(\0132\022.s"
  "liverpb.Response\"N\n\014TerminateReq\022\013\n\003Pid\030"
  "\001 \001(\005\022\r\n\005Force\030\002 \001(\010\022\"\n\007Request\030\t \001(\0132\021."
  "sliverpb.Request\">\n\tTerminate\022\013\n\003Pid\030\001 \001"
  "(\005\022$\n\010Response\030\t \001(\0132\022.sliverpb.Response"
  "\"1\n\013IfconfigReq\022\"\n\007Request\030\t \001(\0132\021.slive"
  "rpb.Request\"_\n\010Ifconfig\022-\n\rNetInterfaces"
  "\030\001 \003(\0132\026.sliverpb.NetInterface\022$\n\010Respon"
  "se\030\t \001(\0132\022.sliverpb.Response\"M\n\014NetInter"
  "face\022\r\n\005Index\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\013\n\003MAC"
  "\030\003 \001(\t\022\023\n\013IPAddresses\030\004 \003(\t\"9\n\005LsReq\022\014\n\004"
  "Path\030\001 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.R"
  "equest\"\225\001\n\002Ls\022\014\n\004Path\030\001 \001(\t\022\016\n\006Exists\030\002 "
  "\001(\010\022!\n\005Files\030\003 \003(\0132\022.sliverpb.FileInfo\022\020"
  "\n\010timezone\030\004 \001(\t\022\026\n\016timezoneOffset\030\005 \001(\005"
  "\022$\n\010Response\030\t \001(\0132\022.sliverpb.Response\"b"
  "\n\010FileInfo\022\014\n\004Name\030\001 \001(\t\022\r\n\005IsDir\030\002 \001(\010\022"
  "\014\n\004Size\030\003 \001(\003\022\017\n\007ModTime\030\004 \001(\003\022\014\n\004Mode\030\005"
  " \001(\t\022\014\n\004Link\030\006 \001(\t\"9\n\005CdReq\022\014\n\004Path\030\001 \001("
  "\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\",\n"
  "\006PwdReq\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"9\n\003Pwd\022\014\n\004Path\030\001 \001(\t\022$\n\010Response\030\t \001"
  "(\0132\022.sliverpb.Response\"[\n\005RmReq\022\014\n\004Path\030"
  "\001 \001(\t\022\021\n\tRecursive\030\002 \001(\010\022\r\n\005Force\030\003 \001(\010\022"
  "\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\"8\n\002R"
  "m\022\014\n\004Path\030\001 \001(\t\022$\n\010Response\030\t \001(\0132\022.sliv"
  "erpb.Response\"E\n\005MvReq\022\013\n\003Src\030\001 \001(\t\022\013\n\003D"
  "st\030\002 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Req"
  "uest\"D\n\002Mv\022\013\n\003Src\030\001 \001(\t\022\013\n\003Dst\030\002 \001(\t\022$\n\010"
  "Response\030\t \001(\0132\022.sliverpb.Response\"<\n\010Mk"
  "dirReq\022\014\n\004Path\030\001 \001(\t\022\"\n\007Request\030\t \001(\0132\021."
  "sliverpb.Request\";\n\005Mkdir\022\014\n\004Path\030\001 \001(\t\022"
  "$\n\010Response\030\t \001(\0132\022.sliverpb.Response\"m\n"
  "\013DownloadReq\022\014\n\004Path\030\001 \001(\t\022\r\n\005Start\030\002 \001("
  "\003\022\014\n\004Stop\030\003 \001(\003\022\017\n\007Recurse\030\004 \001(\010\022\"\n\007Requ"
  "est\030\t \001(\0132\021.sliverpb.Request\"\305\001\n\010Downloa"
  "d\022\014\n\004Path\030\001 \001(\t\022\017\n\007Encoder\030\002 \001(\t\022\016\n\006Exis"
  "ts\030\003 \001(\010\022\r\n\005Start\030\004 \001(\003\022\014\n\004Stop\030\005 \001(\003\022\014\n"
  "\004Data\030\006 \001(\014\022\r\n\005IsDir\030\007 \001(\010\022\021\n\tReadFiles\030"
  "\010 \001(\005\022\027\n\017UnreadableFiles\030\n \001(\005\022$\n\010Respon"
  "se\030\t \001(\0132\022.sliverpb.Response\"k\n\tUploadRe"
  "q\022\014\n\004Path\030\001 \001(\t\022\017\n\007Encoder\030\002 \001(\t\022\014\n\004Data"
  "\030\003 \001(\014\022\r\n\005IsIOC\030\004 \001(\010\022\"\n\007Request\030\t \001(\0132\021"
  ".sliverpb.Request\"<\n\006Upload\022\014\n\004Path\030\001 \001("
  "\t\022$\n\010Response\030\t \001(\0132\022.sliverpb.Response\""
  "R\n\016ProcessDumpReq\022\013\n\003Pid\030\001 \001(\005\022\017\n\007Timeou"
  "t\030\002 \001(\005\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"A\n\013ProcessDump\022\014\n\004Data\030\001 \001(\014\022$\n\010Resp"
  "onse\030\t \001(\0132\022.sliverpb.Response\"\252\001\n\010RunAs"
  "Req\022\020\n\010Username\030\001 \001(\t\022\023\n\013ProcessName\030\002 \001"
  "(\t\022\014\n\004Args\030\003 \001(\t\022\016\n\006Domain\030\004 \001(\t\022\020\n\010Pass"
  "word\030\005 \001(\t\022\022\n\nHideWindow\030\006 \001(\010\022\017\n\007NetOnl"
  "y\030\007 \001(\010\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"=\n\005RunAs\022\016\n\006Output\030\001 \001(\t\022$\n\010Response"
  "\030\t \001(\0132\022.sliverpb.Response\"F\n\016Impersonat"
  "eReq\022\020\n\010Username\030\001 \001(\t\022\"\n\007Request\030\t \001(\0132"
  "\021.sliverpb.Request\"3\n\013Impersonate\022$\n\010Res"
  "ponse\030\t \001(\0132\022.sliverpb.Response\"2\n\014RevTo"
  "SelfReq\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"1\n\tRevToSelf\022$\n\010Response\030\t \001(\0132\022.sli"
  "verpb.Response\":\n\024CurrentTokenOwnerReq\022\""
  "\n\007Request\030\t \001(\0132\021.sliverpb.Request\"I\n\021Cu"
  "rrentTokenOwner\022\016\n\006Output\030\001 \001(\t\022$\n\010Respo"
  "nse\030\t \001(\0132\022.sliverpb.Response\"^\n\022InvokeG"
  "etSystemReq\022\014\n\004Data\030\001 \001(\014\022\026\n\016HostingProc"
  "ess\030\002 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Re"
  "quest\"1\n\tGetSystem\022$\n\010Response\030\t \001(\0132\022.s"
  "liverpb.Response\"y\n\014MakeTokenReq\022\020\n\010User"
  "name\030\001 \001(\t\022\020\n\010Password\030\002 \001(\t\022\016\n\006Domain\030\003"
  " \001(\t\022\021\n\tLogonType\030\004 \001(\r\022\"\n\007Request\030\t \001(\013"
  "2\021.sliverpb.Request\"1\n\tMakeToken\022$\n\010Resp"
  "onse\030\t \001(\0132\022.sliverpb.Response\"k\n\007TaskRe"
  "q\022\017\n\007Encoder\030\001 \001(\t\022\020\n\010RWXPages\030\002 \001(\010\022\013\n\003"
  "Pid\030\003 \001(\r\022\014\n\004Data\030\004 \001(\014\022\"\n\007Request\030\t \001(\013"
  "2\021.sliverpb.Request\",\n\004Task\022$\n\010Response\030"
  "\t \001(\0132\022.sliverpb.Response\"\257\002\n\022ExecuteAss"
  "emblyReq\022\020\n\010Assembly\030\001 \001(\014\022\021\n\tArguments\030"
  "\002 \001(\t\022\017\n\007Process\030\003 \001(\t\022\r\n\005IsDLL\030\004 \001(\010\022\014\n"
  "\004Arch\030\005 \001(\t\022\021\n\tClassName\030\006 \001(\t\022\016\n\006Method"
  "\030\007 \001(\t\022\021\n\tAppDomain\030\010 \001(\t\022\014\n\004PPid\030\n \001(\r\022"
  "\023\n\013ProcessArgs\030\013 \003(\t\022\021\n\tInProcess\030\014 \001(\010\022"
  "\017\n\007Runtime\030\r \001(\t\022\022\n\nAmsiBypass\030\016 \001(\010\022\021\n\t"
  "EtwBypass\030\017 \001(\010\022\"\n\007Request\030\t \001(\0132\021.slive"
  "rpb.Request\"\200\001\n\030InvokeExecuteAssemblyReq"
  "\022\014\n\004Data\030\001 \001(\014\022\017\n\007process\030\002 \001(\t\022\014\n\004PPid\030"
  "\n \001(\r\022\023\n\013ProcessArgs\030\013 \003(\t\022\"\n\007Request\030\t "
  "\001(\0132\021.sliverpb.Request\"\235\001\n\036InvokeInProcE"
  "xecuteAssemblyReq\022\014\n\004Data\030\001 \001(\014\022\021\n\tArgum"
  "ents\030\002 \003(\t\022\017\n\007Runtime\030\003 \001(\t\022\022\n\nAmsiBypas"
  "s\030\004 \001(\010\022\021\n\tEtwBypass\030\005 \001(\010\022\"\n\007Request\030\t "
  "\001(\0132\021.sliverpb.Request\"G\n\017ExecuteAssembl"
  "y\022\016\n\006Output\030\001 \001(\014\022$\n\010Response\030\t \001(\0132\022.sl"
  "iverpb.Response\"Q\n\020InvokeMigrateReq\022\013\n\003P"
  "id\030\001 \001(\r\022\014\n\004Data\030\002 \001(\014\022\"\n\007Request\030\t \001(\0132"
  "\021.sliverpb.Request\"@\n\007Migrate\022\017\n\007Success"
  "\030\001 \001(\010\022$\n\010Response\030\t \001(\0132\022.sliverpb.Resp"
  "onse\"\220\001\n\nExecuteReq\022\014\n\004Path\030\001 \001(\t\022\014\n\004Arg"
  "s\030\002 \003(\t\022\016\n\006Output\030\003 \001(\010\022\021\n\tstdout_pb\030\004 \001"
  "(\t\022\021\n\tstderr_pb\030\005 \001(\t\022\014\n\004PPid\030\n \001(\r\022\"\n\007R"
  "equest\030\t \001(\0132\021.sliverpb.Request\"\251\001\n\021Exec"
  "uteWindowsReq\022\014\n\004Path\030\001 \001(\t\022\014\n\004Args\030\002 \003("
  "\t\022\016\n\006Output\030\003 \001(\010\022\021\n\tstdout_pb\030\004 \001(\t\022\021\n\t"
  "stderr_pb\030\005 \001(\t\022\020\n\010UseToken\030\006 \001(\010\022\014\n\004PPi"
  "d\030\n \001(\r\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"r\n\007Execute\022\016\n\006Status\030\001 \001(\r\022\021\n\tstdout"
  "_pb\030\002 \001(\014\022\021\n\tstderr_pb\030\003 \001(\014\022\013\n\003Pid\030\004 \001("
  "\r\022$\n\010Response\030\t \001(\0132\022.sliverpb.Response\""
  "\311\001\n\013SideloadReq\022\014\n\004Data\030\001 \001(\014\022\023\n\013Process"
  "Name\030\002 \001(\t\022\014\n\004Args\030\003 \001(\t\022\022\n\nEntryPoint\030\004"
  " \001(\t\022\014\n\004Kill\030\005 \001(\010\022\r\n\005isDLL\030\006 \001(\010\022\021\n\tisU"
  "nicode\030\007 \001(\010\022\014\n\004PPid\030\n \001(\r\022\023\n\013ProcessArg"
  "s\030\013 \003(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"@\n\010Sideload\022\016\n\006Result\030\001 \001(\t\022$\n\010Respo"
  "nse\030\t \001(\0132\022.sliverpb.Response\"\255\001\n\021Invoke"
  "SpawnDllReq\022\014\n\004Data\030\001 \001(\014\022\023\n\013ProcessName"
  "\030\002 \001(\t\022\014\n\004Args\030\003 \001(\t\022\022\n\nEntryPoint\030\004 \001(\t"
  "\022\014\n\004Kill\030\005 \001(\010\022\014\n\004PPid\030\n \001(\r\022\023\n\013ProcessA"
  "rgs\030\013 \003(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Re"
  "quest\"\243\001\n\013SpawnDllReq\022\014\n\004Data\030\001 \001(\014\022\023\n\013P"
  "rocessName\030\002 \001(\t\022\016\n\006Offset\030\003 \001(\r\022\014\n\004Args"
  "\030\004 \001(\t\022\014\n\004Kill\030\005 \001(\010\022\014\n\004PPid\030\n \001(\r\022\023\n\013Pr"
  "ocessArgs\030\013 \003(\t\022\"\n\007Request\030\t \001(\0132\021.slive"
  "rpb.Request\"@\n\010SpawnDll\022\016\n\006Result\030\001 \001(\t\022"
  "$\n\010Response\030\t \001(\0132\022.sliverpb.Response\"w\n"
  "\nNetstatReq\022\013\n\003TCP\030\001 \001(\010\022\013\n\003UDP\030\002 \001(\010\022\013\n"
  "\003IP4\030\003 \001(\010\022\013\n\003IP6\030\005 \001(\010\022\021\n\tListening\030\006 \001"
  "(\010\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\"\361"
  "\001\n\014SockTabEntry\0222\n\tLocalAddr\030\001 \001(\0132\037.sli"
  "verpb.SockTabEntry.SockAddr\0223\n\nRemoteAdd"
  "r\030\002 \001(\0132\037.sliverpb.SockTabEntry.SockAddr"
  "\022\017\n\007SkState\030\003 \001(\t\022\013\n\003UID\030\004 \001(\r\022\"\n\007Proces"
  "s\030\005 \001(\0132\021.sliverpb.Process\022\020\n\010Protocol\030\006"
  " \001(\t\032$\n\010SockAddr\022\n\n\002Ip\030\001 \001(\t\022\014\n\004Port\030\002 \001"
  "(\r\"X\n\007Netstat\022\'\n\007Entries\030\001 \003(\0132\026.sliverp"
  "b.SockTabEntry\022$\n\010Response\030\t \001(\0132\022.slive"
  "rpb.Response\":\n\006EnvReq\022\014\n\004Name\030\001 \001(\t\022\"\n\007"
  "Request\030\t \001(\0132\021.sliverpb.Request\"T\n\007EnvI"
  "nfo\022#\n\tVariables\030\001 \003(\0132\020.sliverpb.EnvVar"
  "\022$\n\010Response\030\t \001(\0132\022.sliverpb.Response\"S"
  "\n\tSetEnvReq\022\"\n\010Variable\030\001 \001(\0132\020.sliverpb"
  ".EnvVar\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\".\n\006SetEnv\022$\n\010Response\030\t \001(\0132\022.sliver"
  "pb.Response\"\?\n\013UnsetEnvReq\022\014\n\004Name\030\001 \001(\t"
  "\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\"0\n\010"
  "UnsetEnv\022$\n\010Response\030\t \001(\0132\022.sliverpb.Re"
  "sponse\"\035\n\016DNSSessionInit\022\013\n\003Key\030\001 \001(\014\"3\n"
  "\007DNSPoll\022(\n\006blocks\030\001 \003(\0132\030.sliverpb.DNSB"
  "lockHeader\"*\n\016DNSBlockHeader\022\n\n\002ID\030\001 \001(\t"
  "\022\014\n\004Size\030\002 \001(\r\"\036\n\017HTTPSessionInit\022\013\n\003Key"
  "\030\001 \001(\014\"3\n\rScreenshotReq\022\"\n\007Request\030\t \001(\013"
  "2\021.sliverpb.Request\"@\n\nScreenshot\022\014\n\004Dat"
  "a\030\001 \001(\014\022$\n\010Response\030\t \001(\0132\022.sliverpb.Res"
  "ponse\"\234\001\n\017StartServiceReq\022\023\n\013ServiceName"
  "\030\001 \001(\t\022\032\n\022ServiceDescription\030\002 \001(\t\022\017\n\007Bi"
  "nPath\030\003 \001(\t\022\020\n\010Hostname\030\004 \001(\t\022\021\n\tArgumen"
  "ts\030\005 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Req"
  "uest\"3\n\013ServiceInfo\022$\n\010Response\030\t \001(\0132\022."
  "sliverpb.Response\"7\n\016ServiceInfoReq\022\023\n\013S"
  "erviceName\030\001 \001(\t\022\020\n\010Hostname\030\002 \001(\t\"c\n\016St"
  "opServiceReq\022-\n\013ServiceInfo\030\001 \001(\0132\030.sliv"
  "erpb.ServiceInfoReq\022\"\n\007Request\030\t \001(\0132\021.s"
  "liverpb.Request\"e\n\020RemoveServiceReq\022-\n\013S"
  "erviceInfo\030\001 \001(\0132\030.sliverpb.ServiceInfoR"
  "eq\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\"X"
  "\n\013BackdoorReq\022\020\n\010FilePath\030\001 \001(\t\022\023\n\013Profi"
  "leName\030\002 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb"
  ".Request\"0\n\010Backdoor\022$\n\010Response\030\t \001(\0132\022"
  ".sliverpb.Response\"p\n\017RegistryReadReq\022\014\n"
  "\004Hive\030\001 \001(\t\022\014\n\004Path\030\002 \001(\t\022\013\n\003Key\030\003 \001(\t\022\020"
  "\n\010Hostname\030\004 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliv"
  "erpb.Request\"C\n\014RegistryRead\022\r\n\005Value\030\001 "
  "\001(\t\022$\n\010Response\030\t \001(\0132\022.sliverpb.Respons"
  "e\"\317\001\n\020RegistryWriteReq\022\014\n\004Hive\030\001 \001(\t\022\014\n\004"
  "Path\030\002 \001(\t\022\013\n\003Key\030\003 \001(\t\022\020\n\010Hostname\030\004 \001("
  "\t\022\023\n\013StringValue\030\005 \001(\t\022\021\n\tByteValue\030\006 \001("
  "\014\022\022\n\nDWordValue\030\007 \001(\r\022\022\n\nQWordValue\030\010 \001("
  "\004\022\014\n\004Type\030\n \001(\r\022\"\n\007Request\030\t \001(\0132\021.slive"
  "rpb.Request\"5\n\rRegistryWrite\022$\n\010Response"
  "\030\t \001(\0132\022.sliverpb.Response\"u\n\024RegistryCr"
  "eateKeyReq\022\014\n\004Hive\030\001 \001(\t\022\014\n\004Path\030\002 \001(\t\022\013"
  "\n\003Key\030\003 \001(\t\022\020\n\010Hostname\030\004 \001(\t\022\"\n\007Request"
  "\030\t \001(\0132\021.sliverpb.Request\"9\n\021RegistryCre"
  "ateKey\022$\n\010Response\030\t \001(\0132\022.sliverpb.Resp"
  "onse\"u\n\024RegistryDeleteKeyReq\022\014\n\004Hive\030\001 \001"
  "(\t\022\014\n\004Path\030\002 \001(\t\022\013\n\003Key\030\003 \001(\t\022\020\n\010Hostnam"
  "e\030\004 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Requ"
  "est\"9\n\021RegistryDeleteKey\022$\n\010Response\030\t \001"
  "(\0132\022.sliverpb.Response\"i\n\025RegistrySubKey"
  "ListReq\022\014\n\004Hive\030\001 \001(\t\022\014\n\004Path\030\002 \001(\t\022\020\n\010H"
  "ostname\030\004 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverp"
  "b.Request\"K\n\022RegistrySubKeyList\022\017\n\007Subke"
  "ys\030\001 \003(\t\022$\n\010Response\030\t \001(\0132\022.sliverpb.Re"
  "sponse\"i\n\025RegistryListValuesReq\022\014\n\004Hive\030"
  "\001 \001(\t\022\014\n\004Path\030\002 \001(\t\022\020\n\010Hostname\030\004 \001(\t\022\"\n"
  "\007Request\030\t \001(\0132\021.sliverpb.Request\"N\n\022Reg"
  "istryValuesList\022\022\n\nValueNames\030\001 \003(\t\022$\n\010R"
  "esponse\030\t \001(\0132\022.sliverpb.Response\"1\n\006Tun"
  "nel\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022\021\n\tSessionID\030\t"
  " \001(\t\"\277\001\n\nTunnelData\022\014\n\004Data\030\001 \001(\014\022\016\n\006Clo"
  "sed\030\002 \001(\010\022\020\n\010Sequence\030\003 \001(\004\022\013\n\003Ack\030\004 \001(\004"
  "\022\016\n\006Resend\030\005 \001(\010\022\025\n\rCreateReverse\030\006 \001(\010\022"
  "$\n\010rportfwd\030\007 \001(\0132\022.sliverpb.RPortfwd\022\024\n"
  "\010TunnelID\030\010 \001(\004B\0020\001\022\021\n\tSessionID\030\t \001(\t\"r"
  "\n\010ShellReq\022\014\n\004Path\030\001 \001(\t\022\021\n\tEnablePTY\030\002 "
  "\001(\010\022\013\n\003Pid\030\003 \001(\r\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022\""
  "\n\007Request\030\t \001(\0132\021.sliverpb.Request\"q\n\005Sh"
  "ell\022\014\n\004Path\030\001 \001(\t\022\021\n\tEnablePTY\030\002 \001(\010\022\013\n\003"
  "Pid\030\003 \001(\r\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022$\n\010Respo"
  "nse\030\t \001(\0132\022.sliverpb.Response\"t\n\nPortfwd"
  "Req\022\014\n\004Port\030\001 \001(\r\022\020\n\010Protocol\030\002 \001(\005\022\014\n\004H"
  "ost\030\003 \001(\t\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022\"\n\007Reque"
  "st\030\t \001(\0132\021.sliverpb.Request\"s\n\007Portfwd\022\014"
  "\n\004Port\030\001 \001(\r\022\020\n\010Protocol\030\002 \001(\005\022\014\n\004Host\030\003"
  " \001(\t\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022$\n\010Response\030\t"
  " \001(\0132\022.sliverpb.Response\"0\n\005Socks\022\024\n\010Tun"
  "nelID\030\010 \001(\004B\0020\001\022\021\n\tSessionID\030\t \001(\t\"\234\001\n\tS"
  "ocksData\022\014\n\004Data\030\001 \001(\014\022\021\n\tCloseConn\030\002 \001("
  "\010\022\020\n\010Username\030\003 \001(\t\022\020\n\010Password\030\004 \001(\t\022\020\n"
  "\010Sequence\030\005 \001(\004\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022\"\n"
  "\007Request\030\t \001(\0132\021.sliverpb.Request\"\204\001\n\025Pi"
  "votStartListenerReq\022!\n\004Type\030\001 \001(\0162\023.sliv"
  "erpb.PivotType\022\023\n\013BindAddress\030\002 \001(\t\022\017\n\007O"
  "ptions\030\003 \003(\010\022\"\n\007Request\030\t \001(\0132\021.sliverpb"
  ".Request\"F\n\024PivotStopListenerReq\022\n\n\002ID\030\001"
  " \001(\r\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request"
  "\"\241\001\n\rPivotListener\022\n\n\002ID\030\001 \001(\r\022!\n\004Type\030\002"
  " \001(\0162\023.sliverpb.PivotType\022\023\n\013BindAddress"
  "\030\003 \001(\t\022&\n\006Pivots\030\004 \003(\0132\026.sliverpb.NetCon"
  "nPivot\022$\n\010Response\030\t \001(\0132\022.sliverpb.Resp"
  "onse\"c\n\nPivotHello\022\021\n\tPublicKey\030\001 \001(\014\022\022\n"
  "\006PeerID\030\002 \001(\003B\0020\001\022\032\n\022PublicKeySignature\030"
  "\003 \001(\t\022\022\n\nSessionKey\030\004 \001(\014\">\n\026PivotServer"
  "KeyExchange\022\020\n\010OriginID\030\001 \001(\003\022\022\n\nSession"
  "Key\030\002 \001(\014\"-\n\tPivotPeer\022\022\n\006PeerID\030\001 \001(\003B\002"
  "0\001\022\014\n\004Name\030\002 \001(\t\"\202\001\n\021PivotPeerEnvelope\022\""
  "\n\005Peers\030\001 \003(\0132\023.sliverpb.PivotPeer\022\014\n\004Ty"
  "pe\030\002 \001(\r\022\026\n\016PivotSessionID\030\003 \001(\014\022\014\n\004Data"
  "\030\004 \001(\014\022\025\n\rPeerFailureAt\030\005 \001(\003\"\032\n\tPivotPi"
  "ng\022\r\n\005Nonce\030\001 \001(\r\"9\n\014NetConnPivot\022\022\n\006Pee"
  "rID\030\001 \001(\003B\0020\001\022\025\n\rRemoteAddress\030\002 \001(\t\"\\\n\020"
  "PivotPeerFailure\022\022\n\006PeerID\030\001 \001(\003B\0020\001\022\'\n\004"
  "Type\030\002 \001(\0162\031.sliverpb.PeerFailureType\022\013\n"
  "\003Err\030\003 \001(\t\"7\n\021PivotListenersReq\022\"\n\007Reque"
  "st\030\t \001(\0132\021.sliverpb.Request\"b\n\016PivotList"
  "eners\022*\n\tListeners\030\001 \003(\0132\027.sliverpb.Pivo"
  "tListener\022$\n\010Response\030\t \001(\0132\022.sliverpb.R"
  "esponse\"e\n\025WGPortForwardStartReq\022\021\n\tLoca"
  "lPort\030\001 \001(\005\022\025\n\rRemoteAddress\030\002 \001(\t\022\"\n\007Re"
  "quest\030\t \001(\0132\021.sliverpb.Request\"b\n\rWGPort"
  "Forward\022+\n\tForwarder\030\001 \001(\0132\030.sliverpb.WG"
  "TCPForwarder\022$\n\010Response\030\t \001(\0132\022.sliverp"
  "b.Response\"F\n\024WGPortForwardStopReq\022\n\n\002ID"
  "\030\001 \001(\005\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Reque"
  "st\"C\n\017WGSocksStartReq\022\014\n\004Port\030\001 \001(\005\022\"\n\007R"
  "equest\030\t \001(\0132\021.sliverpb.Request\"X\n\007WGSoc"
  "ks\022\'\n\006Server\030\001 \001(\0132\027.sliverpb.WGSocksSer"
  "ver\022$\n\010Response\030\t \001(\0132\022.sliverpb.Respons"
  "e\"@\n\016WGSocksStopReq\022\n\n\002ID\030\001 \001(\005\022\"\n\007Reque"
  "st\030\t \001(\0132\021.sliverpb.Request\"8\n\022WGTCPForw"
  "ardersReq\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Re"
  "quest\"7\n\021WGSocksServersReq\022\"\n\007Request\030\t "
  "\001(\0132\021.sliverpb.Request\"C\n\016WGTCPForwarder"
  "\022\n\n\002ID\030\001 \001(\005\022\021\n\tLocalAddr\030\002 \001(\t\022\022\n\nRemot"
  "eAddr\030\003 \001(\t\".\n\rWGSocksServer\022\n\n\002ID\030\001 \001(\005"
  "\022\021\n\tLocalAddr\030\002 \001(\t\"`\n\016WGSocksServers\022(\n"
  "\007Servers\030\001 \003(\0132\027.sliverpb.WGSocksServer\022"
  "$\n\010Response\030\t \001(\0132\022.sliverpb.Response\"e\n"
  "\017WGTCPForwarders\022,\n\nForwarders\030\001 \003(\0132\030.s"
  "liverpb.WGTCPForwarder\022$\n\010Response\030\t \001(\013"
  "2\022.sliverpb.Response\"}\n\016ReconfigureReq\022\031"
  "\n\021ReconnectInterval\030\001 \001(\003\022\026\n\016BeaconInter"
  "val\030\002 \001(\003\022\024\n\014BeaconJitter\030\003 \001(\003\022\"\n\007Reque"
  "st\030\t \001(\0132\021.sliverpb.Request\"3\n\013Reconfigu"
  "re\022$\n\010Response\030\t \001(\0132\022.sliverpb.Response"
  "\"K\n\017PollIntervalReq\022\024\n\014PollInterval\030\001 \001("
  "\003\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\"4\n"
  "\014PollInterval\022$\n\010Response\030\t \001(\0132\022.sliver"
  "pb.Response\"\312\001\n\rSSHCommandReq\022\020\n\010Usernam"
  "e\030\001 \001(\t\022\020\n\010Hostname\030\002 \001(\t\022\014\n\004Port\030\003 \001(\r\022"
  "\017\n\007Command\030\004 \001(\t\022\020\n\010Password\030\005 \001(\t\022\017\n\007Pr"
  "ivKey\030\006 \001(\014\022\020\n\010Krb5Conf\030\007 \001(\t\022\016\n\006Keytab\030"
  "\010 \001(\014\022\r\n\005Realm\030\n \001(\t\022\"\n\007Request\030\t \001(\0132\021."
  "sliverpb.Request\"X\n\nSSHCommand\022\021\n\tstdout"
  "_pb\030\001 \001(\t\022\021\n\tstderr_pb\030\002 \001(\t\022$\n\010Response"
  "\030\t \001(\0132\022.sliverpb.Response\"1\n\013GetPrivsRe"
  "q\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\"\215\001"
  "\n\025WindowsPrivilegeEntry\022\014\n\004Name\030\001 \001(\t\022\023\n"
  "\013Description\030\002 \001(\t\022\017\n\007Enabled\030\003 \001(\010\022\030\n\020E"
  "nabledByDefault\030\004 \001(\010\022\017\n\007Removed\030\005 \001(\010\022\025"
  "\n\rUsedForAccess\030\006 \001(\010\"\222\001\n\010GetPrivs\0221\n\010Pr"
  "ivInfo\030\001 \003(\0132\037.sliverpb.WindowsPrivilege"
  "Entry\022\030\n\020ProcessIntegrity\030\002 \001(\t\022\023\n\013Proce"
  "ssName\030\003 \001(\t\022$\n\010Response\030\t \001(\0132\022.sliverp"
  "b.Response\"p\n\024RegisterExtensionReq\022\014\n\004Na"
  "me\030\001 \001(\t\022\014\n\004Data\030\002 \001(\014\022\n\n\002OS\030\003 \001(\t\022\014\n\004In"
  "it\030\004 \001(\t\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Req"
  "uest\"9\n\021RegisterExtension\022$\n\010Response\030\t "
  "\001(\0132\022.sliverpb.Response\"w\n\020CallExtension"
  "Req\022\014\n\004Name\030\001 \001(\t\022\023\n\013ServerStore\030\002 \001(\010\022\014"
  "\n\004Args\030\003 \001(\014\022\016\n\006Export\030\004 \001(\t\022\"\n\007Request\030"
  "\t \001(\0132\021.sliverpb.Request\"Z\n\rCallExtensio"
  "n\022\016\n\006Output\030\001 \001(\014\022\023\n\013ServerStore\030\002 \001(\010\022$"
  "\n\010Response\030\t \001(\0132\022.sliverpb.Response\"7\n\021"
  "ListExtensionsReq\022\"\n\007Request\030\t \001(\0132\021.sli"
  "verpb.Request\"E\n\016ListExtensions\022\r\n\005Names"
  "\030\001 \003(\t\022$\n\010Response\030\t \001(\0132\022.sliverpb.Resp"
  "onse\"I\n\027RportFwdStopListenerReq\022\n\n\002ID\030\001 "
  "\001(\r\022\"\n\007Request\030\t \001(\0132\021.sliverpb.Request\""
  "\222\001\n\030RportFwdStartListenerReq\022\023\n\013BindAddr"
  "ess\030\001 \001(\t\022\020\n\010BindPort\030\002 \001(\r\022\023\n\013forwardPo"
  "rt\030\003 \001(\r\022\026\n\016forwardAddress\030\004 \001(\t\022\"\n\007Requ"
  "est\030\t \001(\0132\021.sliverpb.Request\"\230\001\n\020RportFw"
  "dListener\022\n\n\002ID\030\001 \001(\r\022\023\n\013BindAddress\030\002 \001"
  "(\t\022\020\n\010bindPort\030\003 \001(\r\022\026\n\016forwardAddress\030\004"
  " \001(\t\022\023\n\013forwardPort\030\005 \001(\r\022$\n\010Response\030\t "
  "\001(\0132\022.sliverpb.Response\"h\n\021RportFwdListe"
  "ners\022-\n\tListeners\030\001 \003(\0132\032.sliverpb.Rport"
  "FwdListener\022$\n\010Response\030\t \001(\0132\022.sliverpb"
  ".Response\":\n\024RportFwdListenersReq\022\"\n\007Req"
  "uest\030\t \001(\0132\021.sliverpb.Request\"t\n\010RPortfw"
  "d\022\014\n\004Port\030\001 \001(\r\022\020\n\010Protocol\030\002 \001(\005\022\014\n\004Hos"
  "t\030\003 \001(\t\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022$\n\010Respons"
  "e\030\t \001(\0132\022.sliverpb.Response\"u\n\013RPortfwdR"
  "eq\022\014\n\004Port\030\001 \001(\r\022\020\n\010Protocol\030\002 \001(\005\022\014\n\004Ho"
  "st\030\003 \001(\t\022\024\n\010TunnelID\030\010 \001(\004B\0020\001\022\"\n\007Reques"
  "t\030\t \001(\0132\021.sliverpb.Request*I\n\014RegistryTy"
  "pe\022\013\n\007Unknown\020\000\022\n\n\006Binary\020\001\022\n\n\006String\020\002\022"
  "\t\n\005DWORD\020\003\022\t\n\005QWORD\020\004*,\n\tPivotType\022\007\n\003TC"
  "P\020\000\022\007\n\003UDP\020\001\022\r\n\tNamedPipe\020\002*3\n\017PeerFailu"
  "reType\022\020\n\014SEND_FAILURE\020\000\022\016\n\nDISCONNECT\020\001"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sliver_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_sliver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sliver_2eproto = {
    false, false, 14328, descriptor_table_protodef_sliver_2eproto,
    "sliver.proto",
    &descriptor_table_sliver_2eproto_once, descriptor_table_sliver_2eproto_deps, 1, 151,
    schemas, file_default_instances, TableStruct_sliver_2eproto::offsets,
    file_level_metadata_sliver_2eproto, file_level_enum_descriptors_sliver_2eproto,
    file_level_service_descriptors_sliver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sliver_2eproto_getter() {
  return &descriptor_table_sliver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sliver_2eproto(&descriptor_table_sliver_2eproto);
namespace sliverpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegistryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sliver_2eproto);
  return file_level_enum_descriptors_sliver_2eproto[0];
}
bool RegistryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PivotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sliver_2eproto);
  return file_level_enum_descriptors_sliver_2eproto[1];
}
bool PivotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerFailureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sliver_2eproto);
  return file_level_enum_descriptors_sliver_2eproto[2];
}
bool PeerFailureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Envelope::_Internal {
 public:
};

Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Envelope* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.unknownmessagetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknownmessagetype_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unknownmessagetype_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Envelope)
}

inline void Envelope::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.unknownmessagetype_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:sliverpb.Envelope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Envelope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Envelope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unknownmessagetype_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unknownmessagetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool UnknownMessageType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.unknownmessagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Envelope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Envelope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // bytes Data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // bool UnknownMessageType = 4;
  if (this->_internal_unknownmessagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_unknownmessagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Envelope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // uint32 Type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // bool UnknownMessageType = 4;
  if (this->_internal_unknownmessagetype() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Envelope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Envelope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Envelope::GetClassData() const { return &_class_data_; }


void Envelope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Envelope*>(&to_msg);
  auto& from = static_cast<const Envelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Envelope)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_unknownmessagetype() != 0) {
    _this->_internal_set_unknownmessagetype(from._internal_unknownmessagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Envelope, _impl_.unknownmessagetype_)
      + sizeof(Envelope::_impl_.unknownmessagetype_)
      - PROTOBUF_FIELD_OFFSET(Envelope, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[0]);
}

// ===================================================================

class BeaconTasks::_Internal {
 public:
};

BeaconTasks::BeaconTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.BeaconTasks)
}
BeaconTasks::BeaconTasks(const BeaconTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BeaconTasks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.nextcheckin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nextcheckin_ = from._impl_.nextcheckin_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.BeaconTasks)
}

inline void BeaconTasks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.nextcheckin_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BeaconTasks::~BeaconTasks() {
  // @@protoc_insertion_point(destructor:sliverpb.BeaconTasks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeaconTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void BeaconTasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeaconTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.BeaconTasks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.nextcheckin_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeaconTasks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.BeaconTasks.ID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .sliverpb.Envelope Tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 NextCheckin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.nextcheckin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeaconTasks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.BeaconTasks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.BeaconTasks.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .sliverpb.Envelope Tasks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 NextCheckin = 3;
  if (this->_internal_nextcheckin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_nextcheckin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.BeaconTasks)
  return target;
}

size_t BeaconTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.BeaconTasks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.Envelope Tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 NextCheckin = 3;
  if (this->_internal_nextcheckin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nextcheckin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeaconTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BeaconTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeaconTasks::GetClassData() const { return &_class_data_; }


void BeaconTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BeaconTasks*>(&to_msg);
  auto& from = static_cast<const BeaconTasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.BeaconTasks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_nextcheckin() != 0) {
    _this->_internal_set_nextcheckin(from._internal_nextcheckin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeaconTasks::CopyFrom(const BeaconTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.BeaconTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconTasks::IsInitialized() const {
  return true;
}

void BeaconTasks::InternalSwap(BeaconTasks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.nextcheckin_, other->_impl_.nextcheckin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeaconTasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[1]);
}

// ===================================================================

class Register::_Internal {
 public:
};

Register::Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Register)
}
Register::Register(const Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Register* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.gid_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.activec2_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.proxyurl_){}
    , decltype(_impl_.configid_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.reconnectinterval_){}
    , decltype(_impl_.peerid_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gid().empty()) {
    _this->_impl_.gid_.Set(from._internal_gid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    _this->_impl_.os_.Set(from._internal_os(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arch().empty()) {
    _this->_impl_.arch_.Set(from._internal_arch(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.activec2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activec2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activec2().empty()) {
    _this->_impl_.activec2_.Set(from._internal_activec2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proxyurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxyurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxyurl().empty()) {
    _this->_impl_.proxyurl_.Set(from._internal_proxyurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.configid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.configid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_configid().empty()) {
    _this->_impl_.configid_.Set(from._internal_configid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reconnectinterval_, &from._impl_.reconnectinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.reconnectinterval_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Register)
}

inline void Register::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.gid_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.activec2_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.proxyurl_){}
    , decltype(_impl_.configid_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.reconnectinterval_){int64_t{0}}
    , decltype(_impl_.peerid_){int64_t{0}}
    , decltype(_impl_.pid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.activec2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activec2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proxyurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxyurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.configid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.configid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:sliverpb.Register)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.username_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.gid_.Destroy();
  _impl_.os_.Destroy();
  _impl_.arch_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.activec2_.Destroy();
  _impl_.version_.Destroy();
  _impl_.proxyurl_.Destroy();
  _impl_.configid_.Destroy();
  _impl_.locale_.Destroy();
}

void Register::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Register)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.gid_.ClearToEmpty();
  _impl_.os_.ClearToEmpty();
  _impl_.arch_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.activec2_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.proxyurl_.ClearToEmpty();
  _impl_.configid_.ClearToEmpty();
  _impl_.locale_.ClearToEmpty();
  ::memset(&_impl_.reconnectinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.reconnectinterval_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Register::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // string Uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Uuid"));
        } else
          goto handle_unusual;
        continue;
      // string Username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Username"));
        } else
          goto handle_unusual;
        continue;
      // string Uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Uid"));
        } else
          goto handle_unusual;
        continue;
      // string Gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_gid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Gid"));
        } else
          goto handle_unusual;
        continue;
      // string Os = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Os"));
        } else
          goto handle_unusual;
        continue;
      // string Arch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_arch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Arch"));
        } else
          goto handle_unusual;
        continue;
      // int32 Pid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Filename = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Filename"));
        } else
          goto handle_unusual;
        continue;
      // string ActiveC2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_activec2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.ActiveC2"));
        } else
          goto handle_unusual;
        continue;
      // string Version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Version"));
        } else
          goto handle_unusual;
        continue;
      // int64 ReconnectInterval = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.reconnectinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProxyURL = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proxyurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.ProxyURL"));
        } else
          goto handle_unusual;
        continue;
      // string ConfigID = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_configid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.ConfigID"));
        } else
          goto handle_unusual;
        continue;
      // int64 PeerID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Locale = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Register.Locale"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Register::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Register)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Hostname = 2;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // string Uuid = 3;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uuid(), target);
  }

  // string Username = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // string Uid = 5;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Uid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_uid(), target);
  }

  // string Gid = 6;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Gid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gid(), target);
  }

  // string Os = 7;
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Os");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_os(), target);
  }

  // string Arch = 8;
  if (!this->_internal_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Arch");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_arch(), target);
  }

  // int32 Pid = 9;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_pid(), target);
  }

  // string Filename = 10;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Filename");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_filename(), target);
  }

  // string ActiveC2 = 11;
  if (!this->_internal_activec2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activec2().data(), static_cast<int>(this->_internal_activec2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.ActiveC2");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_activec2(), target);
  }

  // string Version = 12;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Version");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_version(), target);
  }

  // int64 ReconnectInterval = 13;
  if (this->_internal_reconnectinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_reconnectinterval(), target);
  }

  // string ProxyURL = 14;
  if (!this->_internal_proxyurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxyurl().data(), static_cast<int>(this->_internal_proxyurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.ProxyURL");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_proxyurl(), target);
  }

  // string ConfigID = 16;
  if (!this->_internal_configid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configid().data(), static_cast<int>(this->_internal_configid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.ConfigID");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_configid(), target);
  }

  // int64 PeerID = 17;
  if (this->_internal_peerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_peerid(), target);
  }

  // string Locale = 18;
  if (!this->_internal_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Register.Locale");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Register)
  return target;
}

size_t Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Register)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Hostname = 2;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string Uuid = 3;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string Username = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Uid = 5;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string Gid = 6;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // string Os = 7;
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string Arch = 8;
  if (!this->_internal_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string Filename = 10;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string ActiveC2 = 11;
  if (!this->_internal_activec2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activec2());
  }

  // string Version = 12;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string ProxyURL = 14;
  if (!this->_internal_proxyurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxyurl());
  }

  // string ConfigID = 16;
  if (!this->_internal_configid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configid());
  }

  // string Locale = 18;
  if (!this->_internal_locale().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // int64 ReconnectInterval = 13;
  if (this->_internal_reconnectinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reconnectinterval());
  }

  // int64 PeerID = 17;
  if (this->_internal_peerid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_peerid());
  }

  // int32 Pid = 9;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Register::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Register::GetClassData() const { return &_class_data_; }


void Register::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Register*>(&to_msg);
  auto& from = static_cast<const Register&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Register)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_gid().empty()) {
    _this->_internal_set_gid(from._internal_gid());
  }
  if (!from._internal_os().empty()) {
    _this->_internal_set_os(from._internal_os());
  }
  if (!from._internal_arch().empty()) {
    _this->_internal_set_arch(from._internal_arch());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_activec2().empty()) {
    _this->_internal_set_activec2(from._internal_activec2());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_proxyurl().empty()) {
    _this->_internal_set_proxyurl(from._internal_proxyurl());
  }
  if (!from._internal_configid().empty()) {
    _this->_internal_set_configid(from._internal_configid());
  }
  if (!from._internal_locale().empty()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (from._internal_reconnectinterval() != 0) {
    _this->_internal_set_reconnectinterval(from._internal_reconnectinterval());
  }
  if (from._internal_peerid() != 0) {
    _this->_internal_set_peerid(from._internal_peerid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  return true;
}

void Register::InternalSwap(Register* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gid_, lhs_arena,
      &other->_impl_.gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_, lhs_arena,
      &other->_impl_.os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arch_, lhs_arena,
      &other->_impl_.arch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activec2_, lhs_arena,
      &other->_impl_.activec2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proxyurl_, lhs_arena,
      &other->_impl_.proxyurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.configid_, lhs_arena,
      &other->_impl_.configid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Register, _impl_.pid_)
      + sizeof(Register::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(Register, _impl_.reconnectinterval_)>(
          reinterpret_cast<char*>(&_impl_.reconnectinterval_),
          reinterpret_cast<char*>(&other->_impl_.reconnectinterval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Register::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[2]);
}

// ===================================================================

class BeaconRegister::_Internal {
 public:
  static const ::sliverpb::Register& register_(const BeaconRegister* msg);
};

const ::sliverpb::Register&
BeaconRegister::_Internal::register_(const BeaconRegister* msg) {
  return *msg->_impl_.register__;
}
BeaconRegister::BeaconRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.BeaconRegister)
}
BeaconRegister::BeaconRegister(const BeaconRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BeaconRegister* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.register__){nullptr}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.jitter_){}
    , decltype(_impl_.nextcheckin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_register_()) {
    _this->_impl_.register__ = new ::sliverpb::Register(*from._impl_.register__);
  }
  ::memcpy(&_impl_.interval_, &from._impl_.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nextcheckin_) -
    reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.nextcheckin_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.BeaconRegister)
}

inline void BeaconRegister::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.register__){nullptr}
    , decltype(_impl_.interval_){int64_t{0}}
    , decltype(_impl_.jitter_){int64_t{0}}
    , decltype(_impl_.nextcheckin_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BeaconRegister::~BeaconRegister() {
  // @@protoc_insertion_point(destructor:sliverpb.BeaconRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeaconRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.register__;
}

void BeaconRegister::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeaconRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.BeaconRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.register__ != nullptr) {
    delete _impl_.register__;
  }
  _impl_.register__ = nullptr;
  ::memset(&_impl_.interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nextcheckin_) -
      reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.nextcheckin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeaconRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.BeaconRegister.ID"));
        } else
          goto handle_unusual;
        continue;
      // int64 Interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Jitter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Register Register = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 NextCheckin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.nextcheckin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeaconRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.BeaconRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.BeaconRegister.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 Interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_interval(), target);
  }

  // int64 Jitter = 3;
  if (this->_internal_jitter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_jitter(), target);
  }

  // .sliverpb.Register Register = 4;
  if (this->_internal_has_register_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::register_(this),
        _Internal::register_(this).GetCachedSize(), target, stream);
  }

  // int64 NextCheckin = 5;
  if (this->_internal_nextcheckin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_nextcheckin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.BeaconRegister)
  return target;
}

size_t BeaconRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.BeaconRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .sliverpb.Register Register = 4;
  if (this->_internal_has_register_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.register__);
  }

  // int64 Interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interval());
  }

  // int64 Jitter = 3;
  if (this->_internal_jitter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_jitter());
  }

  // int64 NextCheckin = 5;
  if (this->_internal_nextcheckin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nextcheckin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeaconRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BeaconRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeaconRegister::GetClassData() const { return &_class_data_; }


void BeaconRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BeaconRegister*>(&to_msg);
  auto& from = static_cast<const BeaconRegister&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.BeaconRegister)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_register_()) {
    _this->_internal_mutable_register_()->::sliverpb::Register::MergeFrom(
        from._internal_register_());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_jitter() != 0) {
    _this->_internal_set_jitter(from._internal_jitter());
  }
  if (from._internal_nextcheckin() != 0) {
    _this->_internal_set_nextcheckin(from._internal_nextcheckin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeaconRegister::CopyFrom(const BeaconRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.BeaconRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconRegister::IsInitialized() const {
  return true;
}

void BeaconRegister::InternalSwap(BeaconRegister* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeaconRegister, _impl_.nextcheckin_)
      + sizeof(BeaconRegister::_impl_.nextcheckin_)
      - PROTOBUF_FIELD_OFFSET(BeaconRegister, _impl_.register__)>(
          reinterpret_cast<char*>(&_impl_.register__),
          reinterpret_cast<char*>(&other->_impl_.register__));
}

::PROTOBUF_NAMESPACE_ID::Metadata BeaconRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[3]);
}

// ===================================================================

class SessionRegister::_Internal {
 public:
  static const ::sliverpb::Register& register_(const SessionRegister* msg);
};

const ::sliverpb::Register&
SessionRegister::_Internal::register_(const SessionRegister* msg) {
  return *msg->_impl_.register__;
}
SessionRegister::SessionRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SessionRegister)
}
SessionRegister::SessionRegister(const SessionRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionRegister* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.register__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_register_()) {
    _this->_impl_.register__ = new ::sliverpb::Register(*from._impl_.register__);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.SessionRegister)
}

inline void SessionRegister::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.register__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionRegister::~SessionRegister() {
  // @@protoc_insertion_point(destructor:sliverpb.SessionRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.register__;
}

void SessionRegister::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SessionRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.register__ != nullptr) {
    delete _impl_.register__;
  }
  _impl_.register__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SessionRegister.ID"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Register Register = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SessionRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SessionRegister.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .sliverpb.Register Register = 2;
  if (this->_internal_has_register_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::register_(this),
        _Internal::register_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SessionRegister)
  return target;
}

size_t SessionRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SessionRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .sliverpb.Register Register = 2;
  if (this->_internal_has_register_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.register__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRegister::GetClassData() const { return &_class_data_; }


void SessionRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionRegister*>(&to_msg);
  auto& from = static_cast<const SessionRegister&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SessionRegister)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_register_()) {
    _this->_internal_mutable_register_()->::sliverpb::Register::MergeFrom(
        from._internal_register_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRegister::CopyFrom(const SessionRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SessionRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRegister::IsInitialized() const {
  return true;
}

void SessionRegister::InternalSwap(SessionRegister* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.register__, other->_impl_.register__);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[4]);
}

// ===================================================================

class OpenSession::_Internal {
 public:
  static const ::sliverpb::Response& response(const OpenSession* msg);
  static const ::sliverpb::Request& request(const OpenSession* msg);
};

const ::sliverpb::Response&
OpenSession::_Internal::response(const OpenSession* msg) {
  return *msg->_impl_.response_;
}
const ::sliverpb::Request&
OpenSession::_Internal::request(const OpenSession* msg) {
  return *msg->_impl_.request_;
}
void OpenSession::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void OpenSession::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
OpenSession::OpenSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.OpenSession)
}
OpenSession::OpenSession(const OpenSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpenSession* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.c2s_){from._impl_.c2s_}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.delay_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.delay_ = from._impl_.delay_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.OpenSession)
}

inline void OpenSession::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.c2s_){arena}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.delay_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpenSession::~OpenSession() {
  // @@protoc_insertion_point(destructor:sliverpb.OpenSession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpenSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.c2s_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void OpenSession::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpenSession::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.OpenSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c2s_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.delay_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string C2s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_c2s();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.OpenSession.C2s"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 Delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.OpenSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string C2s = 1;
  for (int i = 0, n = this->_internal_c2s_size(); i < n; i++) {
    const auto& s = this->_internal_c2s(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.OpenSession.C2s");
    target = stream->WriteString(1, s, target);
  }

  // int64 Delay = 2;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_delay(), target);
  }

  // .sliverpb.Response Response = 8;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.OpenSession)
  return target;
}

size_t OpenSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.OpenSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string C2s = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.c2s_.size());
  for (int i = 0, n = _impl_.c2s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.c2s_.Get(i));
  }

  // .sliverpb.Response Response = 8;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int64 Delay = 2;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_delay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpenSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSession::GetClassData() const { return &_class_data_; }


void OpenSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpenSession*>(&to_msg);
  auto& from = static_cast<const OpenSession&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.OpenSession)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.c2s_.MergeFrom(from._impl_.c2s_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSession::CopyFrom(const OpenSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.OpenSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession::IsInitialized() const {
  return true;
}

void OpenSession::InternalSwap(OpenSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.c2s_.InternalSwap(&other->_impl_.c2s_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenSession, _impl_.delay_)
      + sizeof(OpenSession::_impl_.delay_)
      - PROTOBUF_FIELD_OFFSET(OpenSession, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[5]);
}

// ===================================================================

class CloseSession::_Internal {
 public:
  static const ::sliverpb::Response& response(const CloseSession* msg);
  static const ::sliverpb::Request& request(const CloseSession* msg);
};

const ::sliverpb::Response&
CloseSession::_Internal::response(const CloseSession* msg) {
  return *msg->_impl_.response_;
}
const ::sliverpb::Request&
CloseSession::_Internal::request(const CloseSession* msg) {
  return *msg->_impl_.request_;
}
void CloseSession::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void CloseSession::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
CloseSession::CloseSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.CloseSession)
}
CloseSession::CloseSession(const CloseSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseSession* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.CloseSession)
}

inline void CloseSession::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CloseSession::~CloseSession() {
  // @@protoc_insertion_point(destructor:sliverpb.CloseSession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void CloseSession::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseSession::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.CloseSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseSession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.CloseSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 8;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.CloseSession)
  return target;
}

size_t CloseSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.CloseSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 8;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseSession::GetClassData() const { return &_class_data_; }


void CloseSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseSession*>(&to_msg);
  auto& from = static_cast<const CloseSession&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.CloseSession)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseSession::CopyFrom(const CloseSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.CloseSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSession::IsInitialized() const {
  return true;
}

void CloseSession::InternalSwap(CloseSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseSession, _impl_.request_)
      + sizeof(CloseSession::_impl_.request_)
      - PROTOBUF_FIELD_OFFSET(CloseSession, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseSession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[6]);
}

// ===================================================================

class Ping::_Internal {
 public:
  static const ::sliverpb::Response& response(const Ping* msg);
  static const ::sliverpb::Request& request(const Ping* msg);
};

const ::sliverpb::Response&
Ping::_Internal::response(const Ping* msg) {
  return *msg->_impl_.response_;
}
const ::sliverpb::Request&
Ping::_Internal::request(const Ping* msg) {
  return *msg->_impl_.request_;
}
void Ping::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
void Ping::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.nonce_ = from._impl_.nonce_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.nonce_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:sliverpb.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.nonce_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nonce(), target);
  }

  // .sliverpb.Response Response = 8;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 8;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 Nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, _impl_.nonce_)
      + sizeof(Ping::_impl_.nonce_)
      - PROTOBUF_FIELD_OFFSET(Ping, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[7]);
}

// ===================================================================

class KillReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const KillReq* msg);
};

const ::sliverpb::Request&
KillReq::_Internal::request(const KillReq* msg) {
  return *msg->_impl_.request_;
}
void KillReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
KillReq::KillReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.KillReq)
}
KillReq::KillReq(const KillReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KillReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.force_ = from._impl_.force_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.KillReq)
}

inline void KillReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.force_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KillReq::~KillReq() {
  // @@protoc_insertion_point(destructor:sliverpb.KillReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KillReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void KillReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KillReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.KillReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KillReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KillReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.KillReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Force = 1;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_force(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.KillReq)
  return target;
}

size_t KillReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.KillReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool Force = 1;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KillReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KillReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KillReq::GetClassData() const { return &_class_data_; }


void KillReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KillReq*>(&to_msg);
  auto& from = static_cast<const KillReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.KillReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KillReq::CopyFrom(const KillReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.KillReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillReq::IsInitialized() const {
  return true;
}

void KillReq::InternalSwap(KillReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KillReq, _impl_.force_)
      + sizeof(KillReq::_impl_.force_)
      - PROTOBUF_FIELD_OFFSET(KillReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KillReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[8]);
}

// ===================================================================

class PsReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PsReq* msg);
};

const ::sliverpb::Request&
PsReq::_Internal::request(const PsReq* msg) {
  return *msg->_impl_.request_;
}
void PsReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PsReq::PsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PsReq)
}
PsReq::PsReq(const PsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.PsReq)
}

inline void PsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PsReq::~PsReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PsReq)
  return target;
}

size_t PsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PsReq::GetClassData() const { return &_class_data_; }


void PsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PsReq*>(&to_msg);
  auto& from = static_cast<const PsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PsReq::CopyFrom(const PsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsReq::IsInitialized() const {
  return true;
}

void PsReq::InternalSwap(PsReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[9]);
}

// ===================================================================

class Ps::_Internal {
 public:
  static const ::sliverpb::Response& response(const Ps* msg);
};

const ::sliverpb::Response&
Ps::_Internal::response(const Ps* msg) {
  return *msg->_impl_.response_;
}
void Ps::clear_processes() {
  _impl_.processes_.Clear();
}
void Ps::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Ps::Ps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Ps)
}
Ps::Ps(const Ps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processes_){from._impl_.processes_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Ps)
}

inline void Ps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processes_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ps::~Ps() {
  // @@protoc_insertion_point(destructor:sliverpb.Ps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Ps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ps::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Ps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.Process Processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Ps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.Process Processes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Ps)
  return target;
}

size_t Ps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Ps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.Process Processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->_impl_.processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ps::GetClassData() const { return &_class_data_; }


void Ps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ps*>(&to_msg);
  auto& from = static_cast<const Ps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Ps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processes_.MergeFrom(from._impl_.processes_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ps::CopyFrom(const Ps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Ps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ps::IsInitialized() const {
  return true;
}

void Ps::InternalSwap(Ps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processes_.InternalSwap(&other->_impl_.processes_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[10]);
}

// ===================================================================

class TerminateReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const TerminateReq* msg);
};

const ::sliverpb::Request&
TerminateReq::_Internal::request(const TerminateReq* msg) {
  return *msg->_impl_.request_;
}
void TerminateReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
TerminateReq::TerminateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.TerminateReq)
}
TerminateReq::TerminateReq(const TerminateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.force_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.TerminateReq)
}

inline void TerminateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.force_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TerminateReq::~TerminateReq() {
  // @@protoc_insertion_point(destructor:sliverpb.TerminateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void TerminateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.TerminateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.force_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.force_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.TerminateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // bool Force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.TerminateReq)
  return target;
}

size_t TerminateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.TerminateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // bool Force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateReq::GetClassData() const { return &_class_data_; }


void TerminateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminateReq*>(&to_msg);
  auto& from = static_cast<const TerminateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.TerminateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateReq::CopyFrom(const TerminateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.TerminateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateReq::IsInitialized() const {
  return true;
}

void TerminateReq::InternalSwap(TerminateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TerminateReq, _impl_.force_)
      + sizeof(TerminateReq::_impl_.force_)
      - PROTOBUF_FIELD_OFFSET(TerminateReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[11]);
}

// ===================================================================

class Terminate::_Internal {
 public:
  static const ::sliverpb::Response& response(const Terminate* msg);
};

const ::sliverpb::Response&
Terminate::_Internal::response(const Terminate* msg) {
  return *msg->_impl_.response_;
}
void Terminate::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Terminate::Terminate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Terminate)
}
Terminate::Terminate(const Terminate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Terminate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.Terminate)
}

inline void Terminate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Terminate::~Terminate() {
  // @@protoc_insertion_point(destructor:sliverpb.Terminate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Terminate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Terminate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Terminate::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Terminate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_.pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Terminate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Terminate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Terminate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Terminate)
  return target;
}

size_t Terminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Terminate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Terminate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Terminate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Terminate::GetClassData() const { return &_class_data_; }


void Terminate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Terminate*>(&to_msg);
  auto& from = static_cast<const Terminate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Terminate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Terminate::CopyFrom(const Terminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Terminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Terminate::IsInitialized() const {
  return true;
}

void Terminate::InternalSwap(Terminate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Terminate, _impl_.pid_)
      + sizeof(Terminate::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(Terminate, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Terminate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[12]);
}

// ===================================================================

class IfconfigReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const IfconfigReq* msg);
};

const ::sliverpb::Request&
IfconfigReq::_Internal::request(const IfconfigReq* msg) {
  return *msg->_impl_.request_;
}
void IfconfigReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
IfconfigReq::IfconfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.IfconfigReq)
}
IfconfigReq::IfconfigReq(const IfconfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IfconfigReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.IfconfigReq)
}

inline void IfconfigReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IfconfigReq::~IfconfigReq() {
  // @@protoc_insertion_point(destructor:sliverpb.IfconfigReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IfconfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void IfconfigReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IfconfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.IfconfigReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IfconfigReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IfconfigReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.IfconfigReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.IfconfigReq)
  return target;
}

size_t IfconfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.IfconfigReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IfconfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IfconfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IfconfigReq::GetClassData() const { return &_class_data_; }


void IfconfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IfconfigReq*>(&to_msg);
  auto& from = static_cast<const IfconfigReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.IfconfigReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IfconfigReq::CopyFrom(const IfconfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.IfconfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfconfigReq::IsInitialized() const {
  return true;
}

void IfconfigReq::InternalSwap(IfconfigReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IfconfigReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[13]);
}

// ===================================================================

class Ifconfig::_Internal {
 public:
  static const ::sliverpb::Response& response(const Ifconfig* msg);
};

const ::sliverpb::Response&
Ifconfig::_Internal::response(const Ifconfig* msg) {
  return *msg->_impl_.response_;
}
void Ifconfig::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Ifconfig::Ifconfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Ifconfig)
}
Ifconfig::Ifconfig(const Ifconfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ifconfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netinterfaces_){from._impl_.netinterfaces_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Ifconfig)
}

inline void Ifconfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netinterfaces_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ifconfig::~Ifconfig() {
  // @@protoc_insertion_point(destructor:sliverpb.Ifconfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ifconfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.netinterfaces_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Ifconfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ifconfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Ifconfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.netinterfaces_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ifconfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.NetInterface NetInterfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_netinterfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ifconfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Ifconfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.NetInterface NetInterfaces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_netinterfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_netinterfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Ifconfig)
  return target;
}

size_t Ifconfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Ifconfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.NetInterface NetInterfaces = 1;
  total_size += 1UL * this->_internal_netinterfaces_size();
  for (const auto& msg : this->_impl_.netinterfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ifconfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ifconfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ifconfig::GetClassData() const { return &_class_data_; }


void Ifconfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ifconfig*>(&to_msg);
  auto& from = static_cast<const Ifconfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Ifconfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.netinterfaces_.MergeFrom(from._impl_.netinterfaces_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ifconfig::CopyFrom(const Ifconfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Ifconfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ifconfig::IsInitialized() const {
  return true;
}

void Ifconfig::InternalSwap(Ifconfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.netinterfaces_.InternalSwap(&other->_impl_.netinterfaces_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ifconfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[14]);
}

// ===================================================================

class NetInterface::_Internal {
 public:
};

NetInterface::NetInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.NetInterface)
}
NetInterface::NetInterface(const NetInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetInterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ipaddresses_){from._impl_.ipaddresses_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    _this->_impl_.mac_.Set(from._internal_mac(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.NetInterface)
}

inline void NetInterface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ipaddresses_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetInterface::~NetInterface() {
  // @@protoc_insertion_point(destructor:sliverpb.NetInterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ipaddresses_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.mac_.Destroy();
}

void NetInterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.NetInterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ipaddresses_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.mac_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.NetInterface.Name"));
        } else
          goto handle_unusual;
        continue;
      // string MAC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.NetInterface.MAC"));
        } else
          goto handle_unusual;
        continue;
      // repeated string IPAddresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ipaddresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.NetInterface.IPAddresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.NetInterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.NetInterface.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string MAC = 3;
  if (!this->_internal_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.NetInterface.MAC");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mac(), target);
  }

  // repeated string IPAddresses = 4;
  for (int i = 0, n = this->_internal_ipaddresses_size(); i < n; i++) {
    const auto& s = this->_internal_ipaddresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.NetInterface.IPAddresses");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.NetInterface)
  return target;
}

size_t NetInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.NetInterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string IPAddresses = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ipaddresses_.size());
  for (int i = 0, n = _impl_.ipaddresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ipaddresses_.Get(i));
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string MAC = 3;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface::GetClassData() const { return &_class_data_; }


void NetInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetInterface*>(&to_msg);
  auto& from = static_cast<const NetInterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.NetInterface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ipaddresses_.MergeFrom(from._impl_.ipaddresses_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_mac().empty()) {
    _this->_internal_set_mac(from._internal_mac());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface::CopyFrom(const NetInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.NetInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface::IsInitialized() const {
  return true;
}

void NetInterface::InternalSwap(NetInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ipaddresses_.InternalSwap(&other->_impl_.ipaddresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_, lhs_arena,
      &other->_impl_.mac_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[15]);
}

// ===================================================================

class LsReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const LsReq* msg);
};

const ::sliverpb::Request&
LsReq::_Internal::request(const LsReq* msg) {
  return *msg->_impl_.request_;
}
void LsReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
LsReq::LsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.LsReq)
}
LsReq::LsReq(const LsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.LsReq)
}

inline void LsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LsReq::~LsReq() {
  // @@protoc_insertion_point(destructor:sliverpb.LsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void LsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.LsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.LsReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.LsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.LsReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.LsReq)
  return target;
}

size_t LsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.LsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LsReq::GetClassData() const { return &_class_data_; }


void LsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LsReq*>(&to_msg);
  auto& from = static_cast<const LsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.LsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LsReq::CopyFrom(const LsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.LsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsReq::IsInitialized() const {
  return true;
}

void LsReq::InternalSwap(LsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[16]);
}

// ===================================================================

class Ls::_Internal {
 public:
  static const ::sliverpb::Response& response(const Ls* msg);
};

const ::sliverpb::Response&
Ls::_Internal::response(const Ls* msg) {
  return *msg->_impl_.response_;
}
void Ls::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Ls::Ls(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Ls)
}
Ls::Ls(const Ls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ls* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.exists_){}
    , decltype(_impl_.timezoneoffset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.exists_, &from._impl_.exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timezoneoffset_) -
    reinterpret_cast<char*>(&_impl_.exists_)) + sizeof(_impl_.timezoneoffset_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Ls)
}

inline void Ls::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.exists_){false}
    , decltype(_impl_.timezoneoffset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ls::~Ls() {
  // @@protoc_insertion_point(destructor:sliverpb.Ls)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ls::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.timezone_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Ls::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ls::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Ls)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.exists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timezoneoffset_) -
      reinterpret_cast<char*>(&_impl_.exists_)) + sizeof(_impl_.timezoneoffset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ls::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Ls.Path"));
        } else
          goto handle_unusual;
        continue;
      // bool Exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sliverpb.FileInfo Files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Ls.timezone"));
        } else
          goto handle_unusual;
        continue;
      // int32 timezoneOffset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timezoneoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ls::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Ls)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Ls.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool Exists = 2;
  if (this->_internal_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_exists(), target);
  }

  // repeated .sliverpb.FileInfo Files = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string timezone = 4;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Ls.timezone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timezone(), target);
  }

  // int32 timezoneOffset = 5;
  if (this->_internal_timezoneoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_timezoneoffset(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Ls)
  return target;
}

size_t Ls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Ls)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.FileInfo Files = 3;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string timezone = 4;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // bool Exists = 2;
  if (this->_internal_exists() != 0) {
    total_size += 1 + 1;
  }

  // int32 timezoneOffset = 5;
  if (this->_internal_timezoneoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timezoneoffset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ls::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ls::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ls::GetClassData() const { return &_class_data_; }


void Ls::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ls*>(&to_msg);
  auto& from = static_cast<const Ls&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Ls)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_exists() != 0) {
    _this->_internal_set_exists(from._internal_exists());
  }
  if (from._internal_timezoneoffset() != 0) {
    _this->_internal_set_timezoneoffset(from._internal_timezoneoffset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ls::CopyFrom(const Ls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Ls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ls::IsInitialized() const {
  return true;
}

void Ls::InternalSwap(Ls* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ls, _impl_.timezoneoffset_)
      + sizeof(Ls::_impl_.timezoneoffset_)
      - PROTOBUF_FIELD_OFFSET(Ls, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ls::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[17]);
}

// ===================================================================

class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.link_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.modtime_){}
    , decltype(_impl_.isdir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link().empty()) {
    _this->_impl_.link_.Set(from._internal_link(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isdir_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.isdir_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.FileInfo)
}

inline void FileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.link_){}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.modtime_){int64_t{0}}
    , decltype(_impl_.isdir_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:sliverpb.FileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.mode_.Destroy();
  _impl_.link_.Destroy();
}

void FileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mode_.ClearToEmpty();
  _impl_.link_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isdir_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.isdir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.FileInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // bool IsDir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ModTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.modtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.FileInfo.Mode"));
        } else
          goto handle_unusual;
        continue;
      // string Link = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_link();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.FileInfo.Link"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.FileInfo.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool IsDir = 2;
  if (this->_internal_isdir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isdir(), target);
  }

  // int64 Size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // int64 ModTime = 4;
  if (this->_internal_modtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_modtime(), target);
  }

  // string Mode = 5;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.FileInfo.Mode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mode(), target);
  }

  // string Link = 6;
  if (!this->_internal_link().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.FileInfo.Link");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_link(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.FileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Mode = 5;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // string Link = 6;
  if (!this->_internal_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link());
  }

  // int64 Size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 ModTime = 4;
  if (this->_internal_modtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modtime());
  }

  // bool IsDir = 2;
  if (this->_internal_isdir() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileInfo::GetClassData() const { return &_class_data_; }


void FileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileInfo*>(&to_msg);
  auto& from = static_cast<const FileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.FileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (!from._internal_link().empty()) {
    _this->_internal_set_link(from._internal_link());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_modtime() != 0) {
    _this->_internal_set_modtime(from._internal_modtime());
  }
  if (from._internal_isdir() != 0) {
    _this->_internal_set_isdir(from._internal_isdir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.link_, lhs_arena,
      &other->_impl_.link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.isdir_)
      + sizeof(FileInfo::_impl_.isdir_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[18]);
}

// ===================================================================

class CdReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const CdReq* msg);
};

const ::sliverpb::Request&
CdReq::_Internal::request(const CdReq* msg) {
  return *msg->_impl_.request_;
}
void CdReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
CdReq::CdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.CdReq)
}
CdReq::CdReq(const CdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.CdReq)
}

inline void CdReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CdReq::~CdReq() {
  // @@protoc_insertion_point(destructor:sliverpb.CdReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void CdReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.CdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.CdReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.CdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.CdReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.CdReq)
  return target;
}

size_t CdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.CdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdReq::GetClassData() const { return &_class_data_; }


void CdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdReq*>(&to_msg);
  auto& from = static_cast<const CdReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.CdReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdReq::CopyFrom(const CdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.CdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdReq::IsInitialized() const {
  return true;
}

void CdReq::InternalSwap(CdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[19]);
}

// ===================================================================

class PwdReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PwdReq* msg);
};

const ::sliverpb::Request&
PwdReq::_Internal::request(const PwdReq* msg) {
  return *msg->_impl_.request_;
}
void PwdReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PwdReq::PwdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PwdReq)
}
PwdReq::PwdReq(const PwdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PwdReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.PwdReq)
}

inline void PwdReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PwdReq::~PwdReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PwdReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PwdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PwdReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PwdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PwdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PwdReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PwdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PwdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PwdReq)
  return target;
}

size_t PwdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PwdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PwdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PwdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PwdReq::GetClassData() const { return &_class_data_; }


void PwdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PwdReq*>(&to_msg);
  auto& from = static_cast<const PwdReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PwdReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PwdReq::CopyFrom(const PwdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PwdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PwdReq::IsInitialized() const {
  return true;
}

void PwdReq::InternalSwap(PwdReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PwdReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[20]);
}

// ===================================================================

class Pwd::_Internal {
 public:
  static const ::sliverpb::Response& response(const Pwd* msg);
};

const ::sliverpb::Response&
Pwd::_Internal::response(const Pwd* msg) {
  return *msg->_impl_.response_;
}
void Pwd::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Pwd::Pwd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Pwd)
}
Pwd::Pwd(const Pwd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pwd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Pwd)
}

inline void Pwd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pwd::~Pwd() {
  // @@protoc_insertion_point(destructor:sliverpb.Pwd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pwd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Pwd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pwd::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Pwd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pwd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Pwd.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pwd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Pwd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Pwd.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Pwd)
  return target;
}

size_t Pwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Pwd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pwd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pwd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pwd::GetClassData() const { return &_class_data_; }


void Pwd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pwd*>(&to_msg);
  auto& from = static_cast<const Pwd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Pwd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pwd::CopyFrom(const Pwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Pwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pwd::IsInitialized() const {
  return true;
}

void Pwd::InternalSwap(Pwd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pwd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[21]);
}

// ===================================================================

class RmReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RmReq* msg);
};

const ::sliverpb::Request&
RmReq::_Internal::request(const RmReq* msg) {
  return *msg->_impl_.request_;
}
void RmReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RmReq::RmReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RmReq)
}
RmReq::RmReq(const RmReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RmReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.recursive_){}
    , decltype(_impl_.force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.recursive_, &from._impl_.recursive_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_) -
    reinterpret_cast<char*>(&_impl_.recursive_)) + sizeof(_impl_.force_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RmReq)
}

inline void RmReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.recursive_){false}
    , decltype(_impl_.force_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RmReq::~RmReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RmReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RmReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RmReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RmReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RmReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.recursive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.force_) -
      reinterpret_cast<char*>(&_impl_.recursive_)) + sizeof(_impl_.force_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RmReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RmReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // bool Recursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.recursive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Force = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RmReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RmReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RmReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool Recursive = 2;
  if (this->_internal_recursive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_recursive(), target);
  }

  // bool Force = 3;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_force(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RmReq)
  return target;
}

size_t RmReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RmReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool Recursive = 2;
  if (this->_internal_recursive() != 0) {
    total_size += 1 + 1;
  }

  // bool Force = 3;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RmReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RmReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RmReq::GetClassData() const { return &_class_data_; }


void RmReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RmReq*>(&to_msg);
  auto& from = static_cast<const RmReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RmReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_recursive() != 0) {
    _this->_internal_set_recursive(from._internal_recursive());
  }
  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RmReq::CopyFrom(const RmReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RmReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmReq::IsInitialized() const {
  return true;
}

void RmReq::InternalSwap(RmReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RmReq, _impl_.force_)
      + sizeof(RmReq::_impl_.force_)
      - PROTOBUF_FIELD_OFFSET(RmReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RmReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[22]);
}

// ===================================================================

class Rm::_Internal {
 public:
  static const ::sliverpb::Response& response(const Rm* msg);
};

const ::sliverpb::Response&
Rm::_Internal::response(const Rm* msg) {
  return *msg->_impl_.response_;
}
void Rm::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Rm::Rm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Rm)
}
Rm::Rm(const Rm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Rm)
}

inline void Rm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rm::~Rm() {
  // @@protoc_insertion_point(destructor:sliverpb.Rm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Rm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rm::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Rm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Rm.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Rm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Rm.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Rm)
  return target;
}

size_t Rm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Rm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rm::GetClassData() const { return &_class_data_; }


void Rm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rm*>(&to_msg);
  auto& from = static_cast<const Rm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Rm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rm::CopyFrom(const Rm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Rm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rm::IsInitialized() const {
  return true;
}

void Rm::InternalSwap(Rm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[23]);
}

// ===================================================================

class MvReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const MvReq* msg);
};

const ::sliverpb::Request&
MvReq::_Internal::request(const MvReq* msg) {
  return *msg->_impl_.request_;
}
void MvReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
MvReq::MvReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.MvReq)
}
MvReq::MvReq(const MvReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MvReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dst().empty()) {
    _this->_impl_.dst_.Set(from._internal_dst(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.MvReq)
}

inline void MvReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MvReq::~MvReq() {
  // @@protoc_insertion_point(destructor:sliverpb.MvReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MvReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.dst_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void MvReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MvReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.MvReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.dst_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MvReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.MvReq.Src"));
        } else
          goto handle_unusual;
        continue;
      // string Dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.MvReq.Dst"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MvReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.MvReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.MvReq.Src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string Dst = 2;
  if (!this->_internal_dst().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst().data(), static_cast<int>(this->_internal_dst().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.MvReq.Dst");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.MvReq)
  return target;
}

size_t MvReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.MvReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string Dst = 2;
  if (!this->_internal_dst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MvReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MvReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MvReq::GetClassData() const { return &_class_data_; }


void MvReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MvReq*>(&to_msg);
  auto& from = static_cast<const MvReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.MvReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_dst().empty()) {
    _this->_internal_set_dst(from._internal_dst());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MvReq::CopyFrom(const MvReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.MvReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MvReq::IsInitialized() const {
  return true;
}

void MvReq::InternalSwap(MvReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dst_, lhs_arena,
      &other->_impl_.dst_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MvReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[24]);
}

// ===================================================================

class Mv::_Internal {
 public:
  static const ::sliverpb::Response& response(const Mv* msg);
};

const ::sliverpb::Response&
Mv::_Internal::response(const Mv* msg) {
  return *msg->_impl_.response_;
}
void Mv::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Mv::Mv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Mv)
}
Mv::Mv(const Mv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dst().empty()) {
    _this->_impl_.dst_.Set(from._internal_dst(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Mv)
}

inline void Mv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Mv::~Mv() {
  // @@protoc_insertion_point(destructor:sliverpb.Mv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.dst_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mv::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Mv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.dst_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Mv.Src"));
        } else
          goto handle_unusual;
        continue;
      // string Dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Mv.Dst"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Mv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Mv.Src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string Dst = 2;
  if (!this->_internal_dst().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst().data(), static_cast<int>(this->_internal_dst().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Mv.Dst");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Mv)
  return target;
}

size_t Mv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Mv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string Dst = 2;
  if (!this->_internal_dst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mv::GetClassData() const { return &_class_data_; }


void Mv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mv*>(&to_msg);
  auto& from = static_cast<const Mv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Mv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_dst().empty()) {
    _this->_internal_set_dst(from._internal_dst());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mv::CopyFrom(const Mv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Mv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mv::IsInitialized() const {
  return true;
}

void Mv::InternalSwap(Mv* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dst_, lhs_arena,
      &other->_impl_.dst_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[25]);
}

// ===================================================================

class MkdirReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const MkdirReq* msg);
};

const ::sliverpb::Request&
MkdirReq::_Internal::request(const MkdirReq* msg) {
  return *msg->_impl_.request_;
}
void MkdirReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
MkdirReq::MkdirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.MkdirReq)
}
MkdirReq::MkdirReq(const MkdirReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MkdirReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.MkdirReq)
}

inline void MkdirReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MkdirReq::~MkdirReq() {
  // @@protoc_insertion_point(destructor:sliverpb.MkdirReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MkdirReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void MkdirReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MkdirReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.MkdirReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MkdirReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.MkdirReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MkdirReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.MkdirReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.MkdirReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.MkdirReq)
  return target;
}

size_t MkdirReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.MkdirReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MkdirReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirReq::GetClassData() const { return &_class_data_; }


void MkdirReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MkdirReq*>(&to_msg);
  auto& from = static_cast<const MkdirReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.MkdirReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MkdirReq::CopyFrom(const MkdirReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.MkdirReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirReq::IsInitialized() const {
  return true;
}

void MkdirReq::InternalSwap(MkdirReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[26]);
}

// ===================================================================

class Mkdir::_Internal {
 public:
  static const ::sliverpb::Response& response(const Mkdir* msg);
};

const ::sliverpb::Response&
Mkdir::_Internal::response(const Mkdir* msg) {
  return *msg->_impl_.response_;
}
void Mkdir::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Mkdir::Mkdir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Mkdir)
}
Mkdir::Mkdir(const Mkdir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mkdir* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Mkdir)
}

inline void Mkdir::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Mkdir::~Mkdir() {
  // @@protoc_insertion_point(destructor:sliverpb.Mkdir)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mkdir::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mkdir::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mkdir::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Mkdir)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mkdir::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Mkdir.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mkdir::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Mkdir)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Mkdir.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Mkdir)
  return target;
}

size_t Mkdir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Mkdir)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mkdir::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mkdir::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mkdir::GetClassData() const { return &_class_data_; }


void Mkdir::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mkdir*>(&to_msg);
  auto& from = static_cast<const Mkdir&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Mkdir)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mkdir::CopyFrom(const Mkdir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Mkdir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mkdir::IsInitialized() const {
  return true;
}

void Mkdir::InternalSwap(Mkdir* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mkdir::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[27]);
}

// ===================================================================

class DownloadReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const DownloadReq* msg);
};

const ::sliverpb::Request&
DownloadReq::_Internal::request(const DownloadReq* msg) {
  return *msg->_impl_.request_;
}
void DownloadReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
DownloadReq::DownloadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.DownloadReq)
}
DownloadReq::DownloadReq(const DownloadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownloadReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.start_){}
    , decltype(_impl_.stop_){}
    , decltype(_impl_.recurse_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recurse_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.recurse_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.DownloadReq)
}

inline void DownloadReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.start_){int64_t{0}}
    , decltype(_impl_.stop_){int64_t{0}}
    , decltype(_impl_.recurse_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DownloadReq::~DownloadReq() {
  // @@protoc_insertion_point(destructor:sliverpb.DownloadReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void DownloadReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownloadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.DownloadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recurse_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.recurse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.DownloadReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // int64 Start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Recurse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.recurse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.DownloadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.DownloadReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // int64 Start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_start(), target);
  }

  // int64 Stop = 3;
  if (this->_internal_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_stop(), target);
  }

  // bool Recurse = 4;
  if (this->_internal_recurse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_recurse(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.DownloadReq)
  return target;
}

size_t DownloadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.DownloadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int64 Start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 Stop = 3;
  if (this->_internal_stop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stop());
  }

  // bool Recurse = 4;
  if (this->_internal_recurse() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownloadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadReq::GetClassData() const { return &_class_data_; }


void DownloadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownloadReq*>(&to_msg);
  auto& from = static_cast<const DownloadReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.DownloadReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_stop() != 0) {
    _this->_internal_set_stop(from._internal_stop());
  }
  if (from._internal_recurse() != 0) {
    _this->_internal_set_recurse(from._internal_recurse());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadReq::CopyFrom(const DownloadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.DownloadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadReq::IsInitialized() const {
  return true;
}

void DownloadReq::InternalSwap(DownloadReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadReq, _impl_.recurse_)
      + sizeof(DownloadReq::_impl_.recurse_)
      - PROTOBUF_FIELD_OFFSET(DownloadReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[28]);
}

// ===================================================================

class Download::_Internal {
 public:
  static const ::sliverpb::Response& response(const Download* msg);
};

const ::sliverpb::Response&
Download::_Internal::response(const Download* msg) {
  return *msg->_impl_.response_;
}
void Download::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Download::Download(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Download)
}
Download::Download(const Download& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Download* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.encoder_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.start_){}
    , decltype(_impl_.stop_){}
    , decltype(_impl_.exists_){}
    , decltype(_impl_.isdir_){}
    , decltype(_impl_.readfiles_){}
    , decltype(_impl_.unreadablefiles_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoder().empty()) {
    _this->_impl_.encoder_.Set(from._internal_encoder(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unreadablefiles_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.unreadablefiles_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Download)
}

inline void Download::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.encoder_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.start_){int64_t{0}}
    , decltype(_impl_.stop_){int64_t{0}}
    , decltype(_impl_.exists_){false}
    , decltype(_impl_.isdir_){false}
    , decltype(_impl_.readfiles_){0}
    , decltype(_impl_.unreadablefiles_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Download::~Download() {
  // @@protoc_insertion_point(destructor:sliverpb.Download)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Download::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.encoder_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Download::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Download::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Download)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.encoder_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unreadablefiles_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.unreadablefiles_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Download::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Download.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Encoder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encoder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Download.Encoder"));
        } else
          goto handle_unusual;
        continue;
      // bool Exists = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsDir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ReadFiles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.readfiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 UnreadableFiles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.unreadablefiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Download::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Download)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Download.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string Encoder = 2;
  if (!this->_internal_encoder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoder().data(), static_cast<int>(this->_internal_encoder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Download.Encoder");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encoder(), target);
  }

  // bool Exists = 3;
  if (this->_internal_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_exists(), target);
  }

  // int64 Start = 4;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_start(), target);
  }

  // int64 Stop = 5;
  if (this->_internal_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_stop(), target);
  }

  // bytes Data = 6;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  // bool IsDir = 7;
  if (this->_internal_isdir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isdir(), target);
  }

  // int32 ReadFiles = 8;
  if (this->_internal_readfiles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_readfiles(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // int32 UnreadableFiles = 10;
  if (this->_internal_unreadablefiles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_unreadablefiles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Download)
  return target;
}

size_t Download::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Download)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Encoder = 2;
  if (!this->_internal_encoder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoder());
  }

  // bytes Data = 6;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int64 Start = 4;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 Stop = 5;
  if (this->_internal_stop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stop());
  }

  // bool Exists = 3;
  if (this->_internal_exists() != 0) {
    total_size += 1 + 1;
  }

  // bool IsDir = 7;
  if (this->_internal_isdir() != 0) {
    total_size += 1 + 1;
  }

  // int32 ReadFiles = 8;
  if (this->_internal_readfiles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_readfiles());
  }

  // int32 UnreadableFiles = 10;
  if (this->_internal_unreadablefiles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unreadablefiles());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Download::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Download::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Download::GetClassData() const { return &_class_data_; }


void Download::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Download*>(&to_msg);
  auto& from = static_cast<const Download&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Download)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_encoder().empty()) {
    _this->_internal_set_encoder(from._internal_encoder());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_stop() != 0) {
    _this->_internal_set_stop(from._internal_stop());
  }
  if (from._internal_exists() != 0) {
    _this->_internal_set_exists(from._internal_exists());
  }
  if (from._internal_isdir() != 0) {
    _this->_internal_set_isdir(from._internal_isdir());
  }
  if (from._internal_readfiles() != 0) {
    _this->_internal_set_readfiles(from._internal_readfiles());
  }
  if (from._internal_unreadablefiles() != 0) {
    _this->_internal_set_unreadablefiles(from._internal_unreadablefiles());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Download::CopyFrom(const Download& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Download)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Download::IsInitialized() const {
  return true;
}

void Download::InternalSwap(Download* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoder_, lhs_arena,
      &other->_impl_.encoder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Download, _impl_.unreadablefiles_)
      + sizeof(Download::_impl_.unreadablefiles_)
      - PROTOBUF_FIELD_OFFSET(Download, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Download::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[29]);
}

// ===================================================================

class UploadReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const UploadReq* msg);
};

const ::sliverpb::Request&
UploadReq::_Internal::request(const UploadReq* msg) {
  return *msg->_impl_.request_;
}
void UploadReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
UploadReq::UploadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.UploadReq)
}
UploadReq::UploadReq(const UploadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.encoder_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.isioc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoder().empty()) {
    _this->_impl_.encoder_.Set(from._internal_encoder(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.isioc_ = from._impl_.isioc_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.UploadReq)
}

inline void UploadReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.encoder_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.isioc_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadReq::~UploadReq() {
  // @@protoc_insertion_point(destructor:sliverpb.UploadReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.encoder_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void UploadReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.UploadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.encoder_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.isioc_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.UploadReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Encoder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encoder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.UploadReq.Encoder"));
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsIOC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isioc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.UploadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.UploadReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string Encoder = 2;
  if (!this->_internal_encoder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoder().data(), static_cast<int>(this->_internal_encoder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.UploadReq.Encoder");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encoder(), target);
  }

  // bytes Data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // bool IsIOC = 4;
  if (this->_internal_isioc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isioc(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.UploadReq)
  return target;
}

size_t UploadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.UploadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Encoder = 2;
  if (!this->_internal_encoder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoder());
  }

  // bytes Data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool IsIOC = 4;
  if (this->_internal_isioc() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadReq::GetClassData() const { return &_class_data_; }


void UploadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadReq*>(&to_msg);
  auto& from = static_cast<const UploadReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.UploadReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_encoder().empty()) {
    _this->_internal_set_encoder(from._internal_encoder());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_isioc() != 0) {
    _this->_internal_set_isioc(from._internal_isioc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadReq::CopyFrom(const UploadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.UploadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadReq::IsInitialized() const {
  return true;
}

void UploadReq::InternalSwap(UploadReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoder_, lhs_arena,
      &other->_impl_.encoder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadReq, _impl_.isioc_)
      + sizeof(UploadReq::_impl_.isioc_)
      - PROTOBUF_FIELD_OFFSET(UploadReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[30]);
}

// ===================================================================

class Upload::_Internal {
 public:
  static const ::sliverpb::Response& response(const Upload* msg);
};

const ::sliverpb::Response&
Upload::_Internal::response(const Upload* msg) {
  return *msg->_impl_.response_;
}
void Upload::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Upload::Upload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Upload)
}
Upload::Upload(const Upload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Upload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Upload)
}

inline void Upload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Upload::~Upload() {
  // @@protoc_insertion_point(destructor:sliverpb.Upload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Upload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Upload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Upload::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Upload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Upload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Upload.Path"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Upload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Upload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Upload.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Upload)
  return target;
}

size_t Upload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Upload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Upload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Upload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Upload::GetClassData() const { return &_class_data_; }


void Upload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Upload*>(&to_msg);
  auto& from = static_cast<const Upload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Upload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Upload::CopyFrom(const Upload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Upload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Upload::IsInitialized() const {
  return true;
}

void Upload::InternalSwap(Upload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Upload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[31]);
}

// ===================================================================

class ProcessDumpReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ProcessDumpReq* msg);
};

const ::sliverpb::Request&
ProcessDumpReq::_Internal::request(const ProcessDumpReq* msg) {
  return *msg->_impl_.request_;
}
void ProcessDumpReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ProcessDumpReq::ProcessDumpReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ProcessDumpReq)
}
ProcessDumpReq::ProcessDumpReq(const ProcessDumpReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessDumpReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.ProcessDumpReq)
}

inline void ProcessDumpReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.timeout_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessDumpReq::~ProcessDumpReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ProcessDumpReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessDumpReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ProcessDumpReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessDumpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ProcessDumpReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessDumpReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessDumpReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ProcessDumpReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // int32 Timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeout(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ProcessDumpReq)
  return target;
}

size_t ProcessDumpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ProcessDumpReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // int32 Timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessDumpReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessDumpReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessDumpReq::GetClassData() const { return &_class_data_; }


void ProcessDumpReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessDumpReq*>(&to_msg);
  auto& from = static_cast<const ProcessDumpReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ProcessDumpReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessDumpReq::CopyFrom(const ProcessDumpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ProcessDumpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessDumpReq::IsInitialized() const {
  return true;
}

void ProcessDumpReq::InternalSwap(ProcessDumpReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessDumpReq, _impl_.timeout_)
      + sizeof(ProcessDumpReq::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(ProcessDumpReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessDumpReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[32]);
}

// ===================================================================

class ProcessDump::_Internal {
 public:
  static const ::sliverpb::Response& response(const ProcessDump* msg);
};

const ::sliverpb::Response&
ProcessDump::_Internal::response(const ProcessDump* msg) {
  return *msg->_impl_.response_;
}
void ProcessDump::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
ProcessDump::ProcessDump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ProcessDump)
}
ProcessDump::ProcessDump(const ProcessDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessDump* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ProcessDump)
}

inline void ProcessDump::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessDump::~ProcessDump() {
  // @@protoc_insertion_point(destructor:sliverpb.ProcessDump)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessDump::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void ProcessDump::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessDump::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ProcessDump)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessDump::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessDump::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ProcessDump)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ProcessDump)
  return target;
}

size_t ProcessDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ProcessDump)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessDump::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessDump::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessDump::GetClassData() const { return &_class_data_; }


void ProcessDump::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessDump*>(&to_msg);
  auto& from = static_cast<const ProcessDump&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ProcessDump)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessDump::CopyFrom(const ProcessDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ProcessDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessDump::IsInitialized() const {
  return true;
}

void ProcessDump::InternalSwap(ProcessDump* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessDump::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[33]);
}

// ===================================================================

class RunAsReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RunAsReq* msg);
};

const ::sliverpb::Request&
RunAsReq::_Internal::request(const RunAsReq* msg) {
  return *msg->_impl_.request_;
}
void RunAsReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RunAsReq::RunAsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RunAsReq)
}
RunAsReq::RunAsReq(const RunAsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunAsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.hidewindow_){}
    , decltype(_impl_.netonly_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processname().empty()) {
    _this->_impl_.processname_.Set(from._internal_processname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.hidewindow_, &from._impl_.hidewindow_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.netonly_) -
    reinterpret_cast<char*>(&_impl_.hidewindow_)) + sizeof(_impl_.netonly_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RunAsReq)
}

inline void RunAsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.hidewindow_){false}
    , decltype(_impl_.netonly_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunAsReq::~RunAsReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RunAsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunAsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.processname_.Destroy();
  _impl_.args_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RunAsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunAsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RunAsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.processname_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _impl_.domain_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.hidewindow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.netonly_) -
      reinterpret_cast<char*>(&_impl_.hidewindow_)) + sizeof(_impl_.netonly_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunAsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RunAsReq.Username"));
        } else
          goto handle_unusual;
        continue;
      // string ProcessName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RunAsReq.ProcessName"));
        } else
          goto handle_unusual;
        continue;
      // string Args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RunAsReq.Args"));
        } else
          goto handle_unusual;
        continue;
      // string Domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RunAsReq.Domain"));
        } else
          goto handle_unusual;
        continue;
      // string Password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RunAsReq.Password"));
        } else
          goto handle_unusual;
        continue;
      // bool HideWindow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hidewindow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool NetOnly = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.netonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunAsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RunAsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RunAsReq.Username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RunAsReq.ProcessName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processname(), target);
  }

  // string Args = 3;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RunAsReq.Args");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_args(), target);
  }

  // string Domain = 4;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RunAsReq.Domain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_domain(), target);
  }

  // string Password = 5;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RunAsReq.Password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_password(), target);
  }

  // bool HideWindow = 6;
  if (this->_internal_hidewindow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_hidewindow(), target);
  }

  // bool NetOnly = 7;
  if (this->_internal_netonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_netonly(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RunAsReq)
  return target;
}

size_t RunAsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RunAsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  // string Args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // string Domain = 4;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // string Password = 5;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool HideWindow = 6;
  if (this->_internal_hidewindow() != 0) {
    total_size += 1 + 1;
  }

  // bool NetOnly = 7;
  if (this->_internal_netonly() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunAsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunAsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunAsReq::GetClassData() const { return &_class_data_; }


void RunAsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunAsReq*>(&to_msg);
  auto& from = static_cast<const RunAsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RunAsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_processname().empty()) {
    _this->_internal_set_processname(from._internal_processname());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_hidewindow() != 0) {
    _this->_internal_set_hidewindow(from._internal_hidewindow());
  }
  if (from._internal_netonly() != 0) {
    _this->_internal_set_netonly(from._internal_netonly());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunAsReq::CopyFrom(const RunAsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RunAsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunAsReq::IsInitialized() const {
  return true;
}

void RunAsReq::InternalSwap(RunAsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processname_, lhs_arena,
      &other->_impl_.processname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunAsReq, _impl_.netonly_)
      + sizeof(RunAsReq::_impl_.netonly_)
      - PROTOBUF_FIELD_OFFSET(RunAsReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunAsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[34]);
}

// ===================================================================

class RunAs::_Internal {
 public:
  static const ::sliverpb::Response& response(const RunAs* msg);
};

const ::sliverpb::Response&
RunAs::_Internal::response(const RunAs* msg) {
  return *msg->_impl_.response_;
}
void RunAs::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RunAs::RunAs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RunAs)
}
RunAs::RunAs(const RunAs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunAs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RunAs)
}

inline void RunAs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunAs::~RunAs() {
  // @@protoc_insertion_point(destructor:sliverpb.RunAs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunAs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RunAs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunAs::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RunAs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunAs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RunAs.Output"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunAs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RunAs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Output = 1;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RunAs.Output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RunAs)
  return target;
}

size_t RunAs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RunAs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunAs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunAs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunAs::GetClassData() const { return &_class_data_; }


void RunAs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunAs*>(&to_msg);
  auto& from = static_cast<const RunAs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RunAs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunAs::CopyFrom(const RunAs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RunAs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunAs::IsInitialized() const {
  return true;
}

void RunAs::InternalSwap(RunAs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunAs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[35]);
}

// ===================================================================

class ImpersonateReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ImpersonateReq* msg);
};

const ::sliverpb::Request&
ImpersonateReq::_Internal::request(const ImpersonateReq* msg) {
  return *msg->_impl_.request_;
}
void ImpersonateReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ImpersonateReq::ImpersonateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ImpersonateReq)
}
ImpersonateReq::ImpersonateReq(const ImpersonateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImpersonateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ImpersonateReq)
}

inline void ImpersonateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImpersonateReq::~ImpersonateReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ImpersonateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImpersonateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ImpersonateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImpersonateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ImpersonateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImpersonateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ImpersonateReq.Username"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImpersonateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ImpersonateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ImpersonateReq.Username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ImpersonateReq)
  return target;
}

size_t ImpersonateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ImpersonateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImpersonateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImpersonateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImpersonateReq::GetClassData() const { return &_class_data_; }


void ImpersonateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImpersonateReq*>(&to_msg);
  auto& from = static_cast<const ImpersonateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ImpersonateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImpersonateReq::CopyFrom(const ImpersonateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ImpersonateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpersonateReq::IsInitialized() const {
  return true;
}

void ImpersonateReq::InternalSwap(ImpersonateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImpersonateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[36]);
}

// ===================================================================

class Impersonate::_Internal {
 public:
  static const ::sliverpb::Response& response(const Impersonate* msg);
};

const ::sliverpb::Response&
Impersonate::_Internal::response(const Impersonate* msg) {
  return *msg->_impl_.response_;
}
void Impersonate::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Impersonate::Impersonate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Impersonate)
}
Impersonate::Impersonate(const Impersonate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Impersonate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Impersonate)
}

inline void Impersonate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Impersonate::~Impersonate() {
  // @@protoc_insertion_point(destructor:sliverpb.Impersonate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Impersonate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Impersonate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Impersonate::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Impersonate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Impersonate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Impersonate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Impersonate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Impersonate)
  return target;
}

size_t Impersonate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Impersonate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Impersonate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Impersonate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Impersonate::GetClassData() const { return &_class_data_; }


void Impersonate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Impersonate*>(&to_msg);
  auto& from = static_cast<const Impersonate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Impersonate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Impersonate::CopyFrom(const Impersonate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Impersonate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impersonate::IsInitialized() const {
  return true;
}

void Impersonate::InternalSwap(Impersonate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Impersonate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[37]);
}

// ===================================================================

class RevToSelfReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RevToSelfReq* msg);
};

const ::sliverpb::Request&
RevToSelfReq::_Internal::request(const RevToSelfReq* msg) {
  return *msg->_impl_.request_;
}
void RevToSelfReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RevToSelfReq::RevToSelfReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RevToSelfReq)
}
RevToSelfReq::RevToSelfReq(const RevToSelfReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RevToSelfReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RevToSelfReq)
}

inline void RevToSelfReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RevToSelfReq::~RevToSelfReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RevToSelfReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevToSelfReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RevToSelfReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevToSelfReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RevToSelfReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevToSelfReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RevToSelfReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RevToSelfReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RevToSelfReq)
  return target;
}

size_t RevToSelfReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RevToSelfReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevToSelfReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RevToSelfReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevToSelfReq::GetClassData() const { return &_class_data_; }


void RevToSelfReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RevToSelfReq*>(&to_msg);
  auto& from = static_cast<const RevToSelfReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RevToSelfReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevToSelfReq::CopyFrom(const RevToSelfReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RevToSelfReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevToSelfReq::IsInitialized() const {
  return true;
}

void RevToSelfReq::InternalSwap(RevToSelfReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevToSelfReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[38]);
}

// ===================================================================

class RevToSelf::_Internal {
 public:
  static const ::sliverpb::Response& response(const RevToSelf* msg);
};

const ::sliverpb::Response&
RevToSelf::_Internal::response(const RevToSelf* msg) {
  return *msg->_impl_.response_;
}
void RevToSelf::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RevToSelf::RevToSelf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RevToSelf)
}
RevToSelf::RevToSelf(const RevToSelf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RevToSelf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RevToSelf)
}

inline void RevToSelf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RevToSelf::~RevToSelf() {
  // @@protoc_insertion_point(destructor:sliverpb.RevToSelf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevToSelf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RevToSelf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevToSelf::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RevToSelf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevToSelf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RevToSelf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RevToSelf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RevToSelf)
  return target;
}

size_t RevToSelf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RevToSelf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevToSelf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RevToSelf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevToSelf::GetClassData() const { return &_class_data_; }


void RevToSelf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RevToSelf*>(&to_msg);
  auto& from = static_cast<const RevToSelf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RevToSelf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevToSelf::CopyFrom(const RevToSelf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RevToSelf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevToSelf::IsInitialized() const {
  return true;
}

void RevToSelf::InternalSwap(RevToSelf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevToSelf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[39]);
}

// ===================================================================

class CurrentTokenOwnerReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const CurrentTokenOwnerReq* msg);
};

const ::sliverpb::Request&
CurrentTokenOwnerReq::_Internal::request(const CurrentTokenOwnerReq* msg) {
  return *msg->_impl_.request_;
}
void CurrentTokenOwnerReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
CurrentTokenOwnerReq::CurrentTokenOwnerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.CurrentTokenOwnerReq)
}
CurrentTokenOwnerReq::CurrentTokenOwnerReq(const CurrentTokenOwnerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrentTokenOwnerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.CurrentTokenOwnerReq)
}

inline void CurrentTokenOwnerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrentTokenOwnerReq::~CurrentTokenOwnerReq() {
  // @@protoc_insertion_point(destructor:sliverpb.CurrentTokenOwnerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentTokenOwnerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void CurrentTokenOwnerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrentTokenOwnerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.CurrentTokenOwnerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentTokenOwnerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentTokenOwnerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.CurrentTokenOwnerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.CurrentTokenOwnerReq)
  return target;
}

size_t CurrentTokenOwnerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.CurrentTokenOwnerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentTokenOwnerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrentTokenOwnerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentTokenOwnerReq::GetClassData() const { return &_class_data_; }


void CurrentTokenOwnerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrentTokenOwnerReq*>(&to_msg);
  auto& from = static_cast<const CurrentTokenOwnerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.CurrentTokenOwnerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentTokenOwnerReq::CopyFrom(const CurrentTokenOwnerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.CurrentTokenOwnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTokenOwnerReq::IsInitialized() const {
  return true;
}

void CurrentTokenOwnerReq::InternalSwap(CurrentTokenOwnerReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentTokenOwnerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[40]);
}

// ===================================================================

class CurrentTokenOwner::_Internal {
 public:
  static const ::sliverpb::Response& response(const CurrentTokenOwner* msg);
};

const ::sliverpb::Response&
CurrentTokenOwner::_Internal::response(const CurrentTokenOwner* msg) {
  return *msg->_impl_.response_;
}
void CurrentTokenOwner::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
CurrentTokenOwner::CurrentTokenOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.CurrentTokenOwner)
}
CurrentTokenOwner::CurrentTokenOwner(const CurrentTokenOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrentTokenOwner* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.CurrentTokenOwner)
}

inline void CurrentTokenOwner::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CurrentTokenOwner::~CurrentTokenOwner() {
  // @@protoc_insertion_point(destructor:sliverpb.CurrentTokenOwner)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentTokenOwner::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void CurrentTokenOwner::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrentTokenOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.CurrentTokenOwner)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentTokenOwner::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.CurrentTokenOwner.Output"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentTokenOwner::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.CurrentTokenOwner)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Output = 1;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.CurrentTokenOwner.Output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.CurrentTokenOwner)
  return target;
}

size_t CurrentTokenOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.CurrentTokenOwner)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentTokenOwner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrentTokenOwner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentTokenOwner::GetClassData() const { return &_class_data_; }


void CurrentTokenOwner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrentTokenOwner*>(&to_msg);
  auto& from = static_cast<const CurrentTokenOwner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.CurrentTokenOwner)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentTokenOwner::CopyFrom(const CurrentTokenOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.CurrentTokenOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTokenOwner::IsInitialized() const {
  return true;
}

void CurrentTokenOwner::InternalSwap(CurrentTokenOwner* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentTokenOwner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[41]);
}

// ===================================================================

class InvokeGetSystemReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const InvokeGetSystemReq* msg);
};

const ::sliverpb::Request&
InvokeGetSystemReq::_Internal::request(const InvokeGetSystemReq* msg) {
  return *msg->_impl_.request_;
}
void InvokeGetSystemReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
InvokeGetSystemReq::InvokeGetSystemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.InvokeGetSystemReq)
}
InvokeGetSystemReq::InvokeGetSystemReq(const InvokeGetSystemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvokeGetSystemReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hostingprocess_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostingprocess_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostingprocess_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostingprocess().empty()) {
    _this->_impl_.hostingprocess_.Set(from._internal_hostingprocess(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.InvokeGetSystemReq)
}

inline void InvokeGetSystemReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hostingprocess_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostingprocess_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostingprocess_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeGetSystemReq::~InvokeGetSystemReq() {
  // @@protoc_insertion_point(destructor:sliverpb.InvokeGetSystemReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvokeGetSystemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.hostingprocess_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void InvokeGetSystemReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvokeGetSystemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.InvokeGetSystemReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.hostingprocess_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeGetSystemReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string HostingProcess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostingprocess();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeGetSystemReq.HostingProcess"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeGetSystemReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.InvokeGetSystemReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string HostingProcess = 2;
  if (!this->_internal_hostingprocess().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostingprocess().data(), static_cast<int>(this->_internal_hostingprocess().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeGetSystemReq.HostingProcess");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostingprocess(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.InvokeGetSystemReq)
  return target;
}

size_t InvokeGetSystemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.InvokeGetSystemReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string HostingProcess = 2;
  if (!this->_internal_hostingprocess().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostingprocess());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeGetSystemReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvokeGetSystemReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeGetSystemReq::GetClassData() const { return &_class_data_; }


void InvokeGetSystemReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvokeGetSystemReq*>(&to_msg);
  auto& from = static_cast<const InvokeGetSystemReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.InvokeGetSystemReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_hostingprocess().empty()) {
    _this->_internal_set_hostingprocess(from._internal_hostingprocess());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeGetSystemReq::CopyFrom(const InvokeGetSystemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.InvokeGetSystemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeGetSystemReq::IsInitialized() const {
  return true;
}

void InvokeGetSystemReq::InternalSwap(InvokeGetSystemReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostingprocess_, lhs_arena,
      &other->_impl_.hostingprocess_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeGetSystemReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[42]);
}

// ===================================================================

class GetSystem::_Internal {
 public:
  static const ::sliverpb::Response& response(const GetSystem* msg);
};

const ::sliverpb::Response&
GetSystem::_Internal::response(const GetSystem* msg) {
  return *msg->_impl_.response_;
}
void GetSystem::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
GetSystem::GetSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.GetSystem)
}
GetSystem::GetSystem(const GetSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSystem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.GetSystem)
}

inline void GetSystem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSystem::~GetSystem() {
  // @@protoc_insertion_point(destructor:sliverpb.GetSystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void GetSystem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.GetSystem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSystem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.GetSystem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.GetSystem)
  return target;
}

size_t GetSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.GetSystem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSystem::GetClassData() const { return &_class_data_; }


void GetSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSystem*>(&to_msg);
  auto& from = static_cast<const GetSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.GetSystem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSystem::CopyFrom(const GetSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.GetSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystem::IsInitialized() const {
  return true;
}

void GetSystem::InternalSwap(GetSystem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[43]);
}

// ===================================================================

class MakeTokenReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const MakeTokenReq* msg);
};

const ::sliverpb::Request&
MakeTokenReq::_Internal::request(const MakeTokenReq* msg) {
  return *msg->_impl_.request_;
}
void MakeTokenReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
MakeTokenReq::MakeTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.MakeTokenReq)
}
MakeTokenReq::MakeTokenReq(const MakeTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakeTokenReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.logontype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.logontype_ = from._impl_.logontype_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.MakeTokenReq)
}

inline void MakeTokenReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.logontype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MakeTokenReq::~MakeTokenReq() {
  // @@protoc_insertion_point(destructor:sliverpb.MakeTokenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeTokenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  _impl_.domain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void MakeTokenReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.MakeTokenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.domain_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.logontype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeTokenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.MakeTokenReq.Username"));
        } else
          goto handle_unusual;
        continue;
      // string Password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.MakeTokenReq.Password"));
        } else
          goto handle_unusual;
        continue;
      // string Domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.MakeTokenReq.Domain"));
        } else
          goto handle_unusual;
        continue;
      // uint32 LogonType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.logontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakeTokenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.MakeTokenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.MakeTokenReq.Username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string Password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.MakeTokenReq.Password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string Domain = 3;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.MakeTokenReq.Domain");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_domain(), target);
  }

  // uint32 LogonType = 4;
  if (this->_internal_logontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_logontype(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.MakeTokenReq)
  return target;
}

size_t MakeTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.MakeTokenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string Domain = 3;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 LogonType = 4;
  if (this->_internal_logontype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logontype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeTokenReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakeTokenReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeTokenReq::GetClassData() const { return &_class_data_; }


void MakeTokenReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakeTokenReq*>(&to_msg);
  auto& from = static_cast<const MakeTokenReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.MakeTokenReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_logontype() != 0) {
    _this->_internal_set_logontype(from._internal_logontype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeTokenReq::CopyFrom(const MakeTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.MakeTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeTokenReq::IsInitialized() const {
  return true;
}

void MakeTokenReq::InternalSwap(MakeTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakeTokenReq, _impl_.logontype_)
      + sizeof(MakeTokenReq::_impl_.logontype_)
      - PROTOBUF_FIELD_OFFSET(MakeTokenReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeTokenReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[44]);
}

// ===================================================================

class MakeToken::_Internal {
 public:
  static const ::sliverpb::Response& response(const MakeToken* msg);
};

const ::sliverpb::Response&
MakeToken::_Internal::response(const MakeToken* msg) {
  return *msg->_impl_.response_;
}
void MakeToken::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
MakeToken::MakeToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.MakeToken)
}
MakeToken::MakeToken(const MakeToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakeToken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.MakeToken)
}

inline void MakeToken::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MakeToken::~MakeToken() {
  // @@protoc_insertion_point(destructor:sliverpb.MakeToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void MakeToken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeToken::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.MakeToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakeToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.MakeToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.MakeToken)
  return target;
}

size_t MakeToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.MakeToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakeToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeToken::GetClassData() const { return &_class_data_; }


void MakeToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakeToken*>(&to_msg);
  auto& from = static_cast<const MakeToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.MakeToken)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeToken::CopyFrom(const MakeToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.MakeToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeToken::IsInitialized() const {
  return true;
}

void MakeToken::InternalSwap(MakeToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[45]);
}

// ===================================================================

class TaskReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const TaskReq* msg);
};

const ::sliverpb::Request&
TaskReq::_Internal::request(const TaskReq* msg) {
  return *msg->_impl_.request_;
}
void TaskReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
TaskReq::TaskReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.TaskReq)
}
TaskReq::TaskReq(const TaskReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoder_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.rwxpages_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoder().empty()) {
    _this->_impl_.encoder_.Set(from._internal_encoder(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.rwxpages_, &from._impl_.rwxpages_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.rwxpages_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.TaskReq)
}

inline void TaskReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encoder_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.rwxpages_){false}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskReq::~TaskReq() {
  // @@protoc_insertion_point(destructor:sliverpb.TaskReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoder_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void TaskReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.TaskReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoder_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.rwxpages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.rwxpages_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Encoder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encoder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.TaskReq.Encoder"));
        } else
          goto handle_unusual;
        continue;
      // bool RWXPages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rwxpages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.TaskReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Encoder = 1;
  if (!this->_internal_encoder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoder().data(), static_cast<int>(this->_internal_encoder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.TaskReq.Encoder");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoder(), target);
  }

  // bool RWXPages = 2;
  if (this->_internal_rwxpages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_rwxpages(), target);
  }

  // uint32 Pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.TaskReq)
  return target;
}

size_t TaskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.TaskReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Encoder = 1;
  if (!this->_internal_encoder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoder());
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool RWXPages = 2;
  if (this->_internal_rwxpages() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskReq::GetClassData() const { return &_class_data_; }


void TaskReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskReq*>(&to_msg);
  auto& from = static_cast<const TaskReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.TaskReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoder().empty()) {
    _this->_internal_set_encoder(from._internal_encoder());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_rwxpages() != 0) {
    _this->_internal_set_rwxpages(from._internal_rwxpages());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskReq::CopyFrom(const TaskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.TaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReq::IsInitialized() const {
  return true;
}

void TaskReq::InternalSwap(TaskReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoder_, lhs_arena,
      &other->_impl_.encoder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskReq, _impl_.pid_)
      + sizeof(TaskReq::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(TaskReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[46]);
}

// ===================================================================

class Task::_Internal {
 public:
  static const ::sliverpb::Response& response(const Task* msg);
};

const ::sliverpb::Response&
Task::_Internal::response(const Task* msg) {
  return *msg->_impl_.response_;
}
void Task::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:sliverpb.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[47]);
}

// ===================================================================

class ExecuteAssemblyReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ExecuteAssemblyReq* msg);
};

const ::sliverpb::Request&
ExecuteAssemblyReq::_Internal::request(const ExecuteAssemblyReq* msg) {
  return *msg->_impl_.request_;
}
void ExecuteAssemblyReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ExecuteAssemblyReq::ExecuteAssemblyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ExecuteAssemblyReq)
}
ExecuteAssemblyReq::ExecuteAssemblyReq(const ExecuteAssemblyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteAssemblyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){from._impl_.processargs_}
    , decltype(_impl_.assembly_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.classname_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.appdomain_){}
    , decltype(_impl_.runtime_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.ppid_){}
    , decltype(_impl_.isdll_){}
    , decltype(_impl_.inprocess_){}
    , decltype(_impl_.amsibypass_){}
    , decltype(_impl_.etwbypass_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.assembly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assembly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_assembly().empty()) {
    _this->_impl_.assembly_.Set(from._internal_assembly(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arguments().empty()) {
    _this->_impl_.arguments_.Set(from._internal_arguments(), 
      _this->GetArenaForAllocation());
  }
  _impl_.process_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_process().empty()) {
    _this->_impl_.process_.Set(from._internal_process(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arch().empty()) {
    _this->_impl_.arch_.Set(from._internal_arch(), 
      _this->GetArenaForAllocation());
  }
  _impl_.classname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.classname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classname().empty()) {
    _this->_impl_.classname_.Set(from._internal_classname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appdomain().empty()) {
    _this->_impl_.appdomain_.Set(from._internal_appdomain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.runtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_runtime().empty()) {
    _this->_impl_.runtime_.Set(from._internal_runtime(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.ppid_, &from._impl_.ppid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.etwbypass_) -
    reinterpret_cast<char*>(&_impl_.ppid_)) + sizeof(_impl_.etwbypass_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.ExecuteAssemblyReq)
}

inline void ExecuteAssemblyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){arena}
    , decltype(_impl_.assembly_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.classname_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.appdomain_){}
    , decltype(_impl_.runtime_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.ppid_){0u}
    , decltype(_impl_.isdll_){false}
    , decltype(_impl_.inprocess_){false}
    , decltype(_impl_.amsibypass_){false}
    , decltype(_impl_.etwbypass_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.assembly_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assembly_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.process_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.classname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.classname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.runtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteAssemblyReq::~ExecuteAssemblyReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ExecuteAssemblyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteAssemblyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processargs_.~RepeatedPtrField();
  _impl_.assembly_.Destroy();
  _impl_.arguments_.Destroy();
  _impl_.process_.Destroy();
  _impl_.arch_.Destroy();
  _impl_.classname_.Destroy();
  _impl_.method_.Destroy();
  _impl_.appdomain_.Destroy();
  _impl_.runtime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ExecuteAssemblyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteAssemblyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ExecuteAssemblyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processargs_.Clear();
  _impl_.assembly_.ClearToEmpty();
  _impl_.arguments_.ClearToEmpty();
  _impl_.process_.ClearToEmpty();
  _impl_.arch_.ClearToEmpty();
  _impl_.classname_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  _impl_.appdomain_.ClearToEmpty();
  _impl_.runtime_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.ppid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.etwbypass_) -
      reinterpret_cast<char*>(&_impl_.ppid_)) + sizeof(_impl_.etwbypass_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteAssemblyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Assembly = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_assembly();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arguments();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.Arguments"));
        } else
          goto handle_unusual;
        continue;
      // string Process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_process();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.Process"));
        } else
          goto handle_unusual;
        continue;
      // bool IsDLL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isdll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Arch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_arch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.Arch"));
        } else
          goto handle_unusual;
        continue;
      // string ClassName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_classname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.ClassName"));
        } else
          goto handle_unusual;
        continue;
      // string Method = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.Method"));
        } else
          goto handle_unusual;
        continue;
      // string AppDomain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_appdomain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.AppDomain"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ProcessArgs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processargs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.ProcessArgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool InProcess = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.inprocess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Runtime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_runtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteAssemblyReq.Runtime"));
        } else
          goto handle_unusual;
        continue;
      // bool AmsiBypass = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.amsibypass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EtwBypass = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.etwbypass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteAssemblyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ExecuteAssemblyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Assembly = 1;
  if (!this->_internal_assembly().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_assembly(), target);
  }

  // string Arguments = 2;
  if (!this->_internal_arguments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.Arguments");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arguments(), target);
  }

  // string Process = 3;
  if (!this->_internal_process().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process().data(), static_cast<int>(this->_internal_process().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.Process");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_process(), target);
  }

  // bool IsDLL = 4;
  if (this->_internal_isdll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isdll(), target);
  }

  // string Arch = 5;
  if (!this->_internal_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.Arch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_arch(), target);
  }

  // string ClassName = 6;
  if (!this->_internal_classname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classname().data(), static_cast<int>(this->_internal_classname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.ClassName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_classname(), target);
  }

  // string Method = 7;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.Method");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_method(), target);
  }

  // string AppDomain = 8;
  if (!this->_internal_appdomain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appdomain().data(), static_cast<int>(this->_internal_appdomain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.AppDomain");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_appdomain(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  // repeated string ProcessArgs = 11;
  for (int i = 0, n = this->_internal_processargs_size(); i < n; i++) {
    const auto& s = this->_internal_processargs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.ProcessArgs");
    target = stream->WriteString(11, s, target);
  }

  // bool InProcess = 12;
  if (this->_internal_inprocess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_inprocess(), target);
  }

  // string Runtime = 13;
  if (!this->_internal_runtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime().data(), static_cast<int>(this->_internal_runtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteAssemblyReq.Runtime");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_runtime(), target);
  }

  // bool AmsiBypass = 14;
  if (this->_internal_amsibypass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_amsibypass(), target);
  }

  // bool EtwBypass = 15;
  if (this->_internal_etwbypass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_etwbypass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ExecuteAssemblyReq)
  return target;
}

size_t ExecuteAssemblyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ExecuteAssemblyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ProcessArgs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processargs_.size());
  for (int i = 0, n = _impl_.processargs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processargs_.Get(i));
  }

  // bytes Assembly = 1;
  if (!this->_internal_assembly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assembly());
  }

  // string Arguments = 2;
  if (!this->_internal_arguments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arguments());
  }

  // string Process = 3;
  if (!this->_internal_process().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process());
  }

  // string Arch = 5;
  if (!this->_internal_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string ClassName = 6;
  if (!this->_internal_classname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classname());
  }

  // string Method = 7;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string AppDomain = 8;
  if (!this->_internal_appdomain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appdomain());
  }

  // string Runtime = 13;
  if (!this->_internal_runtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  // bool IsDLL = 4;
  if (this->_internal_isdll() != 0) {
    total_size += 1 + 1;
  }

  // bool InProcess = 12;
  if (this->_internal_inprocess() != 0) {
    total_size += 1 + 1;
  }

  // bool AmsiBypass = 14;
  if (this->_internal_amsibypass() != 0) {
    total_size += 1 + 1;
  }

  // bool EtwBypass = 15;
  if (this->_internal_etwbypass() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteAssemblyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteAssemblyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteAssemblyReq::GetClassData() const { return &_class_data_; }


void ExecuteAssemblyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteAssemblyReq*>(&to_msg);
  auto& from = static_cast<const ExecuteAssemblyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ExecuteAssemblyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processargs_.MergeFrom(from._impl_.processargs_);
  if (!from._internal_assembly().empty()) {
    _this->_internal_set_assembly(from._internal_assembly());
  }
  if (!from._internal_arguments().empty()) {
    _this->_internal_set_arguments(from._internal_arguments());
  }
  if (!from._internal_process().empty()) {
    _this->_internal_set_process(from._internal_process());
  }
  if (!from._internal_arch().empty()) {
    _this->_internal_set_arch(from._internal_arch());
  }
  if (!from._internal_classname().empty()) {
    _this->_internal_set_classname(from._internal_classname());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_appdomain().empty()) {
    _this->_internal_set_appdomain(from._internal_appdomain());
  }
  if (!from._internal_runtime().empty()) {
    _this->_internal_set_runtime(from._internal_runtime());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  if (from._internal_isdll() != 0) {
    _this->_internal_set_isdll(from._internal_isdll());
  }
  if (from._internal_inprocess() != 0) {
    _this->_internal_set_inprocess(from._internal_inprocess());
  }
  if (from._internal_amsibypass() != 0) {
    _this->_internal_set_amsibypass(from._internal_amsibypass());
  }
  if (from._internal_etwbypass() != 0) {
    _this->_internal_set_etwbypass(from._internal_etwbypass());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteAssemblyReq::CopyFrom(const ExecuteAssemblyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ExecuteAssemblyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteAssemblyReq::IsInitialized() const {
  return true;
}

void ExecuteAssemblyReq::InternalSwap(ExecuteAssemblyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processargs_.InternalSwap(&other->_impl_.processargs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.assembly_, lhs_arena,
      &other->_impl_.assembly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arguments_, lhs_arena,
      &other->_impl_.arguments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_, lhs_arena,
      &other->_impl_.process_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arch_, lhs_arena,
      &other->_impl_.arch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.classname_, lhs_arena,
      &other->_impl_.classname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appdomain_, lhs_arena,
      &other->_impl_.appdomain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.runtime_, lhs_arena,
      &other->_impl_.runtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteAssemblyReq, _impl_.etwbypass_)
      + sizeof(ExecuteAssemblyReq::_impl_.etwbypass_)
      - PROTOBUF_FIELD_OFFSET(ExecuteAssemblyReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteAssemblyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[48]);
}

// ===================================================================

class InvokeExecuteAssemblyReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const InvokeExecuteAssemblyReq* msg);
};

const ::sliverpb::Request&
InvokeExecuteAssemblyReq::_Internal::request(const InvokeExecuteAssemblyReq* msg) {
  return *msg->_impl_.request_;
}
void InvokeExecuteAssemblyReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
InvokeExecuteAssemblyReq::InvokeExecuteAssemblyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.InvokeExecuteAssemblyReq)
}
InvokeExecuteAssemblyReq::InvokeExecuteAssemblyReq(const InvokeExecuteAssemblyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvokeExecuteAssemblyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){from._impl_.processargs_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.ppid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.process_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_process().empty()) {
    _this->_impl_.process_.Set(from._internal_process(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.ppid_ = from._impl_.ppid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.InvokeExecuteAssemblyReq)
}

inline void InvokeExecuteAssemblyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.ppid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.process_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeExecuteAssemblyReq::~InvokeExecuteAssemblyReq() {
  // @@protoc_insertion_point(destructor:sliverpb.InvokeExecuteAssemblyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvokeExecuteAssemblyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processargs_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.process_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void InvokeExecuteAssemblyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvokeExecuteAssemblyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.InvokeExecuteAssemblyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processargs_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.process_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.ppid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeExecuteAssemblyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_process();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeExecuteAssemblyReq.process"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ProcessArgs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processargs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeExecuteAssemblyReq.ProcessArgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeExecuteAssemblyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.InvokeExecuteAssemblyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string process = 2;
  if (!this->_internal_process().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process().data(), static_cast<int>(this->_internal_process().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeExecuteAssemblyReq.process");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  // repeated string ProcessArgs = 11;
  for (int i = 0, n = this->_internal_processargs_size(); i < n; i++) {
    const auto& s = this->_internal_processargs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeExecuteAssemblyReq.ProcessArgs");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.InvokeExecuteAssemblyReq)
  return target;
}

size_t InvokeExecuteAssemblyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.InvokeExecuteAssemblyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ProcessArgs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processargs_.size());
  for (int i = 0, n = _impl_.processargs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processargs_.Get(i));
  }

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string process = 2;
  if (!this->_internal_process().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeExecuteAssemblyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvokeExecuteAssemblyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeExecuteAssemblyReq::GetClassData() const { return &_class_data_; }


void InvokeExecuteAssemblyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvokeExecuteAssemblyReq*>(&to_msg);
  auto& from = static_cast<const InvokeExecuteAssemblyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.InvokeExecuteAssemblyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processargs_.MergeFrom(from._impl_.processargs_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_process().empty()) {
    _this->_internal_set_process(from._internal_process());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeExecuteAssemblyReq::CopyFrom(const InvokeExecuteAssemblyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.InvokeExecuteAssemblyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeExecuteAssemblyReq::IsInitialized() const {
  return true;
}

void InvokeExecuteAssemblyReq::InternalSwap(InvokeExecuteAssemblyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processargs_.InternalSwap(&other->_impl_.processargs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_, lhs_arena,
      &other->_impl_.process_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvokeExecuteAssemblyReq, _impl_.ppid_)
      + sizeof(InvokeExecuteAssemblyReq::_impl_.ppid_)
      - PROTOBUF_FIELD_OFFSET(InvokeExecuteAssemblyReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeExecuteAssemblyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[49]);
}

// ===================================================================

class InvokeInProcExecuteAssemblyReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const InvokeInProcExecuteAssemblyReq* msg);
};

const ::sliverpb::Request&
InvokeInProcExecuteAssemblyReq::_Internal::request(const InvokeInProcExecuteAssemblyReq* msg) {
  return *msg->_impl_.request_;
}
void InvokeInProcExecuteAssemblyReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
InvokeInProcExecuteAssemblyReq::InvokeInProcExecuteAssemblyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.InvokeInProcExecuteAssemblyReq)
}
InvokeInProcExecuteAssemblyReq::InvokeInProcExecuteAssemblyReq(const InvokeInProcExecuteAssemblyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvokeInProcExecuteAssemblyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.runtime_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.amsibypass_){}
    , decltype(_impl_.etwbypass_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.runtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_runtime().empty()) {
    _this->_impl_.runtime_.Set(from._internal_runtime(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.amsibypass_, &from._impl_.amsibypass_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.etwbypass_) -
    reinterpret_cast<char*>(&_impl_.amsibypass_)) + sizeof(_impl_.etwbypass_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.InvokeInProcExecuteAssemblyReq)
}

inline void InvokeInProcExecuteAssemblyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.runtime_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.amsibypass_){false}
    , decltype(_impl_.etwbypass_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.runtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeInProcExecuteAssemblyReq::~InvokeInProcExecuteAssemblyReq() {
  // @@protoc_insertion_point(destructor:sliverpb.InvokeInProcExecuteAssemblyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvokeInProcExecuteAssemblyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.runtime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void InvokeInProcExecuteAssemblyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvokeInProcExecuteAssemblyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.InvokeInProcExecuteAssemblyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.runtime_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.amsibypass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.etwbypass_) -
      reinterpret_cast<char*>(&_impl_.amsibypass_)) + sizeof(_impl_.etwbypass_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeInProcExecuteAssemblyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeInProcExecuteAssemblyReq.Arguments"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string Runtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_runtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeInProcExecuteAssemblyReq.Runtime"));
        } else
          goto handle_unusual;
        continue;
      // bool AmsiBypass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amsibypass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EtwBypass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.etwbypass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeInProcExecuteAssemblyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.InvokeInProcExecuteAssemblyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated string Arguments = 2;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeInProcExecuteAssemblyReq.Arguments");
    target = stream->WriteString(2, s, target);
  }

  // string Runtime = 3;
  if (!this->_internal_runtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime().data(), static_cast<int>(this->_internal_runtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeInProcExecuteAssemblyReq.Runtime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_runtime(), target);
  }

  // bool AmsiBypass = 4;
  if (this->_internal_amsibypass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_amsibypass(), target);
  }

  // bool EtwBypass = 5;
  if (this->_internal_etwbypass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_etwbypass(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.InvokeInProcExecuteAssemblyReq)
  return target;
}

size_t InvokeInProcExecuteAssemblyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.InvokeInProcExecuteAssemblyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Arguments = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.arguments_.size());
  for (int i = 0, n = _impl_.arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.arguments_.Get(i));
  }

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string Runtime = 3;
  if (!this->_internal_runtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool AmsiBypass = 4;
  if (this->_internal_amsibypass() != 0) {
    total_size += 1 + 1;
  }

  // bool EtwBypass = 5;
  if (this->_internal_etwbypass() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeInProcExecuteAssemblyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvokeInProcExecuteAssemblyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeInProcExecuteAssemblyReq::GetClassData() const { return &_class_data_; }


void InvokeInProcExecuteAssemblyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvokeInProcExecuteAssemblyReq*>(&to_msg);
  auto& from = static_cast<const InvokeInProcExecuteAssemblyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.InvokeInProcExecuteAssemblyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_runtime().empty()) {
    _this->_internal_set_runtime(from._internal_runtime());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_amsibypass() != 0) {
    _this->_internal_set_amsibypass(from._internal_amsibypass());
  }
  if (from._internal_etwbypass() != 0) {
    _this->_internal_set_etwbypass(from._internal_etwbypass());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeInProcExecuteAssemblyReq::CopyFrom(const InvokeInProcExecuteAssemblyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.InvokeInProcExecuteAssemblyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeInProcExecuteAssemblyReq::IsInitialized() const {
  return true;
}

void InvokeInProcExecuteAssemblyReq::InternalSwap(InvokeInProcExecuteAssemblyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.runtime_, lhs_arena,
      &other->_impl_.runtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvokeInProcExecuteAssemblyReq, _impl_.etwbypass_)
      + sizeof(InvokeInProcExecuteAssemblyReq::_impl_.etwbypass_)
      - PROTOBUF_FIELD_OFFSET(InvokeInProcExecuteAssemblyReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeInProcExecuteAssemblyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[50]);
}

// ===================================================================

class ExecuteAssembly::_Internal {
 public:
  static const ::sliverpb::Response& response(const ExecuteAssembly* msg);
};

const ::sliverpb::Response&
ExecuteAssembly::_Internal::response(const ExecuteAssembly* msg) {
  return *msg->_impl_.response_;
}
void ExecuteAssembly::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
ExecuteAssembly::ExecuteAssembly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ExecuteAssembly)
}
ExecuteAssembly::ExecuteAssembly(const ExecuteAssembly& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteAssembly* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ExecuteAssembly)
}

inline void ExecuteAssembly::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteAssembly::~ExecuteAssembly() {
  // @@protoc_insertion_point(destructor:sliverpb.ExecuteAssembly)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteAssembly::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void ExecuteAssembly::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteAssembly::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ExecuteAssembly)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteAssembly::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteAssembly::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ExecuteAssembly)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Output = 1;
  if (!this->_internal_output().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_output(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ExecuteAssembly)
  return target;
}

size_t ExecuteAssembly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ExecuteAssembly)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteAssembly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteAssembly::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteAssembly::GetClassData() const { return &_class_data_; }


void ExecuteAssembly::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteAssembly*>(&to_msg);
  auto& from = static_cast<const ExecuteAssembly&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ExecuteAssembly)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteAssembly::CopyFrom(const ExecuteAssembly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ExecuteAssembly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteAssembly::IsInitialized() const {
  return true;
}

void ExecuteAssembly::InternalSwap(ExecuteAssembly* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteAssembly::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[51]);
}

// ===================================================================

class InvokeMigrateReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const InvokeMigrateReq* msg);
};

const ::sliverpb::Request&
InvokeMigrateReq::_Internal::request(const InvokeMigrateReq* msg) {
  return *msg->_impl_.request_;
}
void InvokeMigrateReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
InvokeMigrateReq::InvokeMigrateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.InvokeMigrateReq)
}
InvokeMigrateReq::InvokeMigrateReq(const InvokeMigrateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvokeMigrateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.InvokeMigrateReq)
}

inline void InvokeMigrateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeMigrateReq::~InvokeMigrateReq() {
  // @@protoc_insertion_point(destructor:sliverpb.InvokeMigrateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvokeMigrateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void InvokeMigrateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvokeMigrateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.InvokeMigrateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeMigrateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeMigrateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.InvokeMigrateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes Data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.InvokeMigrateReq)
  return target;
}

size_t InvokeMigrateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.InvokeMigrateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 Pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeMigrateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvokeMigrateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeMigrateReq::GetClassData() const { return &_class_data_; }


void InvokeMigrateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvokeMigrateReq*>(&to_msg);
  auto& from = static_cast<const InvokeMigrateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.InvokeMigrateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeMigrateReq::CopyFrom(const InvokeMigrateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.InvokeMigrateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeMigrateReq::IsInitialized() const {
  return true;
}

void InvokeMigrateReq::InternalSwap(InvokeMigrateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvokeMigrateReq, _impl_.pid_)
      + sizeof(InvokeMigrateReq::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(InvokeMigrateReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeMigrateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[52]);
}

// ===================================================================

class Migrate::_Internal {
 public:
  static const ::sliverpb::Response& response(const Migrate* msg);
};

const ::sliverpb::Response&
Migrate::_Internal::response(const Migrate* msg) {
  return *msg->_impl_.response_;
}
void Migrate::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Migrate::Migrate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Migrate)
}
Migrate::Migrate(const Migrate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Migrate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.Migrate)
}

inline void Migrate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Migrate::~Migrate() {
  // @@protoc_insertion_point(destructor:sliverpb.Migrate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Migrate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Migrate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Migrate::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Migrate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Migrate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Migrate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Migrate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Migrate)
  return target;
}

size_t Migrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Migrate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Migrate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Migrate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Migrate::GetClassData() const { return &_class_data_; }


void Migrate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Migrate*>(&to_msg);
  auto& from = static_cast<const Migrate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Migrate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Migrate::CopyFrom(const Migrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Migrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Migrate::IsInitialized() const {
  return true;
}

void Migrate::InternalSwap(Migrate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Migrate, _impl_.success_)
      + sizeof(Migrate::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(Migrate, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Migrate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[53]);
}

// ===================================================================

class ExecuteReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ExecuteReq* msg);
};

const ::sliverpb::Request&
ExecuteReq::_Internal::request(const ExecuteReq* msg) {
  return *msg->_impl_.request_;
}
void ExecuteReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ExecuteReq::ExecuteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ExecuteReq)
}
ExecuteReq::ExecuteReq(const ExecuteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.output_){}
    , decltype(_impl_.ppid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stdout_pb().empty()) {
    _this->_impl_.stdout_pb_.Set(from._internal_stdout_pb(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stderr_pb().empty()) {
    _this->_impl_.stderr_pb_.Set(from._internal_stderr_pb(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.output_, &from._impl_.output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ppid_) -
    reinterpret_cast<char*>(&_impl_.output_)) + sizeof(_impl_.ppid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.ExecuteReq)
}

inline void ExecuteReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.output_){false}
    , decltype(_impl_.ppid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteReq::~ExecuteReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ExecuteReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.stdout_pb_.Destroy();
  _impl_.stderr_pb_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ExecuteReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ExecuteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.stdout_pb_.ClearToEmpty();
  _impl_.stderr_pb_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ppid_) -
      reinterpret_cast<char*>(&_impl_.output_)) + sizeof(_impl_.ppid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // repeated string Args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteReq.Args"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool Output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stdout_pb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stdout_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteReq.stdout_pb"));
        } else
          goto handle_unusual;
        continue;
      // string stderr_pb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stderr_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteReq.stderr_pb"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ExecuteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // repeated string Args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteReq.Args");
    target = stream->WriteString(2, s, target);
  }

  // bool Output = 3;
  if (this->_internal_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_output(), target);
  }

  // string stdout_pb = 4;
  if (!this->_internal_stdout_pb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout_pb().data(), static_cast<int>(this->_internal_stdout_pb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteReq.stdout_pb");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stdout_pb(), target);
  }

  // string stderr_pb = 5;
  if (!this->_internal_stderr_pb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr_pb().data(), static_cast<int>(this->_internal_stderr_pb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteReq.stderr_pb");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stderr_pb(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ExecuteReq)
  return target;
}

size_t ExecuteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ExecuteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.args_.size());
  for (int i = 0, n = _impl_.args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.args_.Get(i));
  }

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string stdout_pb = 4;
  if (!this->_internal_stdout_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout_pb());
  }

  // string stderr_pb = 5;
  if (!this->_internal_stderr_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr_pb());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool Output = 3;
  if (this->_internal_output() != 0) {
    total_size += 1 + 1;
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteReq::GetClassData() const { return &_class_data_; }


void ExecuteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteReq*>(&to_msg);
  auto& from = static_cast<const ExecuteReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ExecuteReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_stdout_pb().empty()) {
    _this->_internal_set_stdout_pb(from._internal_stdout_pb());
  }
  if (!from._internal_stderr_pb().empty()) {
    _this->_internal_set_stderr_pb(from._internal_stderr_pb());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_output() != 0) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteReq::CopyFrom(const ExecuteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ExecuteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteReq::IsInitialized() const {
  return true;
}

void ExecuteReq::InternalSwap(ExecuteReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stdout_pb_, lhs_arena,
      &other->_impl_.stdout_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stderr_pb_, lhs_arena,
      &other->_impl_.stderr_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteReq, _impl_.ppid_)
      + sizeof(ExecuteReq::_impl_.ppid_)
      - PROTOBUF_FIELD_OFFSET(ExecuteReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[54]);
}

// ===================================================================

class ExecuteWindowsReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ExecuteWindowsReq* msg);
};

const ::sliverpb::Request&
ExecuteWindowsReq::_Internal::request(const ExecuteWindowsReq* msg) {
  return *msg->_impl_.request_;
}
void ExecuteWindowsReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ExecuteWindowsReq::ExecuteWindowsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ExecuteWindowsReq)
}
ExecuteWindowsReq::ExecuteWindowsReq(const ExecuteWindowsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteWindowsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.output_){}
    , decltype(_impl_.usetoken_){}
    , decltype(_impl_.ppid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stdout_pb().empty()) {
    _this->_impl_.stdout_pb_.Set(from._internal_stdout_pb(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stderr_pb().empty()) {
    _this->_impl_.stderr_pb_.Set(from._internal_stderr_pb(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.output_, &from._impl_.output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ppid_) -
    reinterpret_cast<char*>(&_impl_.output_)) + sizeof(_impl_.ppid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.ExecuteWindowsReq)
}

inline void ExecuteWindowsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.output_){false}
    , decltype(_impl_.usetoken_){false}
    , decltype(_impl_.ppid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteWindowsReq::~ExecuteWindowsReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ExecuteWindowsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteWindowsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.stdout_pb_.Destroy();
  _impl_.stderr_pb_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ExecuteWindowsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteWindowsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ExecuteWindowsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.stdout_pb_.ClearToEmpty();
  _impl_.stderr_pb_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ppid_) -
      reinterpret_cast<char*>(&_impl_.output_)) + sizeof(_impl_.ppid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteWindowsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteWindowsReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // repeated string Args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteWindowsReq.Args"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool Output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stdout_pb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stdout_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteWindowsReq.stdout_pb"));
        } else
          goto handle_unusual;
        continue;
      // string stderr_pb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stderr_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ExecuteWindowsReq.stderr_pb"));
        } else
          goto handle_unusual;
        continue;
      // bool UseToken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.usetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteWindowsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ExecuteWindowsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteWindowsReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // repeated string Args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteWindowsReq.Args");
    target = stream->WriteString(2, s, target);
  }

  // bool Output = 3;
  if (this->_internal_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_output(), target);
  }

  // string stdout_pb = 4;
  if (!this->_internal_stdout_pb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout_pb().data(), static_cast<int>(this->_internal_stdout_pb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteWindowsReq.stdout_pb");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stdout_pb(), target);
  }

  // string stderr_pb = 5;
  if (!this->_internal_stderr_pb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr_pb().data(), static_cast<int>(this->_internal_stderr_pb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ExecuteWindowsReq.stderr_pb");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stderr_pb(), target);
  }

  // bool UseToken = 6;
  if (this->_internal_usetoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_usetoken(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ExecuteWindowsReq)
  return target;
}

size_t ExecuteWindowsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ExecuteWindowsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.args_.size());
  for (int i = 0, n = _impl_.args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.args_.Get(i));
  }

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string stdout_pb = 4;
  if (!this->_internal_stdout_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout_pb());
  }

  // string stderr_pb = 5;
  if (!this->_internal_stderr_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr_pb());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool Output = 3;
  if (this->_internal_output() != 0) {
    total_size += 1 + 1;
  }

  // bool UseToken = 6;
  if (this->_internal_usetoken() != 0) {
    total_size += 1 + 1;
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteWindowsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteWindowsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteWindowsReq::GetClassData() const { return &_class_data_; }


void ExecuteWindowsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteWindowsReq*>(&to_msg);
  auto& from = static_cast<const ExecuteWindowsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ExecuteWindowsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_stdout_pb().empty()) {
    _this->_internal_set_stdout_pb(from._internal_stdout_pb());
  }
  if (!from._internal_stderr_pb().empty()) {
    _this->_internal_set_stderr_pb(from._internal_stderr_pb());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_output() != 0) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_usetoken() != 0) {
    _this->_internal_set_usetoken(from._internal_usetoken());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteWindowsReq::CopyFrom(const ExecuteWindowsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ExecuteWindowsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteWindowsReq::IsInitialized() const {
  return true;
}

void ExecuteWindowsReq::InternalSwap(ExecuteWindowsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stdout_pb_, lhs_arena,
      &other->_impl_.stdout_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stderr_pb_, lhs_arena,
      &other->_impl_.stderr_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteWindowsReq, _impl_.ppid_)
      + sizeof(ExecuteWindowsReq::_impl_.ppid_)
      - PROTOBUF_FIELD_OFFSET(ExecuteWindowsReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteWindowsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[55]);
}

// ===================================================================

class Execute::_Internal {
 public:
  static const ::sliverpb::Response& response(const Execute* msg);
};

const ::sliverpb::Response&
Execute::_Internal::response(const Execute* msg) {
  return *msg->_impl_.response_;
}
void Execute::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Execute::Execute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Execute)
}
Execute::Execute(const Execute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Execute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.status_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stdout_pb().empty()) {
    _this->_impl_.stdout_pb_.Set(from._internal_stdout_pb(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stderr_pb().empty()) {
    _this->_impl_.stderr_pb_.Set(from._internal_stderr_pb(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Execute)
}

inline void Execute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.status_){0u}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Execute::~Execute() {
  // @@protoc_insertion_point(destructor:sliverpb.Execute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Execute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stdout_pb_.Destroy();
  _impl_.stderr_pb_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Execute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Execute::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Execute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stdout_pb_.ClearToEmpty();
  _impl_.stderr_pb_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Execute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes stdout_pb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stdout_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes stderr_pb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stderr_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Execute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Execute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // bytes stdout_pb = 2;
  if (!this->_internal_stdout_pb().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stdout_pb(), target);
  }

  // bytes stderr_pb = 3;
  if (!this->_internal_stderr_pb().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_stderr_pb(), target);
  }

  // uint32 Pid = 4;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pid(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Execute)
  return target;
}

size_t Execute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Execute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes stdout_pb = 2;
  if (!this->_internal_stdout_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stdout_pb());
  }

  // bytes stderr_pb = 3;
  if (!this->_internal_stderr_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stderr_pb());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 Status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  // uint32 Pid = 4;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Execute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Execute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Execute::GetClassData() const { return &_class_data_; }


void Execute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Execute*>(&to_msg);
  auto& from = static_cast<const Execute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Execute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stdout_pb().empty()) {
    _this->_internal_set_stdout_pb(from._internal_stdout_pb());
  }
  if (!from._internal_stderr_pb().empty()) {
    _this->_internal_set_stderr_pb(from._internal_stderr_pb());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Execute::CopyFrom(const Execute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Execute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execute::IsInitialized() const {
  return true;
}

void Execute::InternalSwap(Execute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stdout_pb_, lhs_arena,
      &other->_impl_.stdout_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stderr_pb_, lhs_arena,
      &other->_impl_.stderr_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Execute, _impl_.pid_)
      + sizeof(Execute::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(Execute, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Execute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[56]);
}

// ===================================================================

class SideloadReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const SideloadReq* msg);
};

const ::sliverpb::Request&
SideloadReq::_Internal::request(const SideloadReq* msg) {
  return *msg->_impl_.request_;
}
void SideloadReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
SideloadReq::SideloadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SideloadReq)
}
SideloadReq::SideloadReq(const SideloadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SideloadReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){from._impl_.processargs_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.entrypoint_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.kill_){}
    , decltype(_impl_.isdll_){}
    , decltype(_impl_.isunicode_){}
    , decltype(_impl_.ppid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processname().empty()) {
    _this->_impl_.processname_.Set(from._internal_processname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entrypoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entrypoint().empty()) {
    _this->_impl_.entrypoint_.Set(from._internal_entrypoint(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.kill_, &from._impl_.kill_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ppid_) -
    reinterpret_cast<char*>(&_impl_.kill_)) + sizeof(_impl_.ppid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.SideloadReq)
}

inline void SideloadReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.entrypoint_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.kill_){false}
    , decltype(_impl_.isdll_){false}
    , decltype(_impl_.isunicode_){false}
    , decltype(_impl_.ppid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entrypoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SideloadReq::~SideloadReq() {
  // @@protoc_insertion_point(destructor:sliverpb.SideloadReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SideloadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processargs_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.processname_.Destroy();
  _impl_.args_.Destroy();
  _impl_.entrypoint_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void SideloadReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SideloadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SideloadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processargs_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.processname_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _impl_.entrypoint_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.kill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ppid_) -
      reinterpret_cast<char*>(&_impl_.kill_)) + sizeof(_impl_.ppid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideloadReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProcessName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SideloadReq.ProcessName"));
        } else
          goto handle_unusual;
        continue;
      // string Args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SideloadReq.Args"));
        } else
          goto handle_unusual;
        continue;
      // string EntryPoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_entrypoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SideloadReq.EntryPoint"));
        } else
          goto handle_unusual;
        continue;
      // bool Kill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isDLL = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isdll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isUnicode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isunicode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ProcessArgs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processargs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SideloadReq.ProcessArgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideloadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SideloadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SideloadReq.ProcessName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processname(), target);
  }

  // string Args = 3;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SideloadReq.Args");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_args(), target);
  }

  // string EntryPoint = 4;
  if (!this->_internal_entrypoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entrypoint().data(), static_cast<int>(this->_internal_entrypoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SideloadReq.EntryPoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_entrypoint(), target);
  }

  // bool Kill = 5;
  if (this->_internal_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_kill(), target);
  }

  // bool isDLL = 6;
  if (this->_internal_isdll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isdll(), target);
  }

  // bool isUnicode = 7;
  if (this->_internal_isunicode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isunicode(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  // repeated string ProcessArgs = 11;
  for (int i = 0, n = this->_internal_processargs_size(); i < n; i++) {
    const auto& s = this->_internal_processargs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SideloadReq.ProcessArgs");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SideloadReq)
  return target;
}

size_t SideloadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SideloadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ProcessArgs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processargs_.size());
  for (int i = 0, n = _impl_.processargs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processargs_.Get(i));
  }

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  // string Args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // string EntryPoint = 4;
  if (!this->_internal_entrypoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entrypoint());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool Kill = 5;
  if (this->_internal_kill() != 0) {
    total_size += 1 + 1;
  }

  // bool isDLL = 6;
  if (this->_internal_isdll() != 0) {
    total_size += 1 + 1;
  }

  // bool isUnicode = 7;
  if (this->_internal_isunicode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideloadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SideloadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideloadReq::GetClassData() const { return &_class_data_; }


void SideloadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SideloadReq*>(&to_msg);
  auto& from = static_cast<const SideloadReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SideloadReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processargs_.MergeFrom(from._impl_.processargs_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_processname().empty()) {
    _this->_internal_set_processname(from._internal_processname());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (!from._internal_entrypoint().empty()) {
    _this->_internal_set_entrypoint(from._internal_entrypoint());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_kill() != 0) {
    _this->_internal_set_kill(from._internal_kill());
  }
  if (from._internal_isdll() != 0) {
    _this->_internal_set_isdll(from._internal_isdll());
  }
  if (from._internal_isunicode() != 0) {
    _this->_internal_set_isunicode(from._internal_isunicode());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideloadReq::CopyFrom(const SideloadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SideloadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideloadReq::IsInitialized() const {
  return true;
}

void SideloadReq::InternalSwap(SideloadReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processargs_.InternalSwap(&other->_impl_.processargs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processname_, lhs_arena,
      &other->_impl_.processname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entrypoint_, lhs_arena,
      &other->_impl_.entrypoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SideloadReq, _impl_.ppid_)
      + sizeof(SideloadReq::_impl_.ppid_)
      - PROTOBUF_FIELD_OFFSET(SideloadReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SideloadReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[57]);
}

// ===================================================================

class Sideload::_Internal {
 public:
  static const ::sliverpb::Response& response(const Sideload* msg);
};

const ::sliverpb::Response&
Sideload::_Internal::response(const Sideload* msg) {
  return *msg->_impl_.response_;
}
void Sideload::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Sideload::Sideload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Sideload)
}
Sideload::Sideload(const Sideload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sideload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Sideload)
}

inline void Sideload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sideload::~Sideload() {
  // @@protoc_insertion_point(destructor:sliverpb.Sideload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sideload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Sideload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sideload::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Sideload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sideload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Sideload.Result"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sideload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Sideload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Sideload.Result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Sideload)
  return target;
}

size_t Sideload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Sideload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sideload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sideload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sideload::GetClassData() const { return &_class_data_; }


void Sideload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sideload*>(&to_msg);
  auto& from = static_cast<const Sideload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Sideload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sideload::CopyFrom(const Sideload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Sideload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sideload::IsInitialized() const {
  return true;
}

void Sideload::InternalSwap(Sideload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sideload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[58]);
}

// ===================================================================

class InvokeSpawnDllReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const InvokeSpawnDllReq* msg);
};

const ::sliverpb::Request&
InvokeSpawnDllReq::_Internal::request(const InvokeSpawnDllReq* msg) {
  return *msg->_impl_.request_;
}
void InvokeSpawnDllReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
InvokeSpawnDllReq::InvokeSpawnDllReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.InvokeSpawnDllReq)
}
InvokeSpawnDllReq::InvokeSpawnDllReq(const InvokeSpawnDllReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvokeSpawnDllReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){from._impl_.processargs_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.entrypoint_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.kill_){}
    , decltype(_impl_.ppid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processname().empty()) {
    _this->_impl_.processname_.Set(from._internal_processname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entrypoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entrypoint().empty()) {
    _this->_impl_.entrypoint_.Set(from._internal_entrypoint(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.kill_, &from._impl_.kill_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ppid_) -
    reinterpret_cast<char*>(&_impl_.kill_)) + sizeof(_impl_.ppid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.InvokeSpawnDllReq)
}

inline void InvokeSpawnDllReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.entrypoint_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.kill_){false}
    , decltype(_impl_.ppid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entrypoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeSpawnDllReq::~InvokeSpawnDllReq() {
  // @@protoc_insertion_point(destructor:sliverpb.InvokeSpawnDllReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvokeSpawnDllReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processargs_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.processname_.Destroy();
  _impl_.args_.Destroy();
  _impl_.entrypoint_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void InvokeSpawnDllReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvokeSpawnDllReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.InvokeSpawnDllReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processargs_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.processname_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _impl_.entrypoint_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.kill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ppid_) -
      reinterpret_cast<char*>(&_impl_.kill_)) + sizeof(_impl_.ppid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeSpawnDllReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProcessName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeSpawnDllReq.ProcessName"));
        } else
          goto handle_unusual;
        continue;
      // string Args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeSpawnDllReq.Args"));
        } else
          goto handle_unusual;
        continue;
      // string EntryPoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_entrypoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeSpawnDllReq.EntryPoint"));
        } else
          goto handle_unusual;
        continue;
      // bool Kill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ProcessArgs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processargs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.InvokeSpawnDllReq.ProcessArgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeSpawnDllReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.InvokeSpawnDllReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeSpawnDllReq.ProcessName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processname(), target);
  }

  // string Args = 3;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeSpawnDllReq.Args");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_args(), target);
  }

  // string EntryPoint = 4;
  if (!this->_internal_entrypoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entrypoint().data(), static_cast<int>(this->_internal_entrypoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeSpawnDllReq.EntryPoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_entrypoint(), target);
  }

  // bool Kill = 5;
  if (this->_internal_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_kill(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  // repeated string ProcessArgs = 11;
  for (int i = 0, n = this->_internal_processargs_size(); i < n; i++) {
    const auto& s = this->_internal_processargs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.InvokeSpawnDllReq.ProcessArgs");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.InvokeSpawnDllReq)
  return target;
}

size_t InvokeSpawnDllReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.InvokeSpawnDllReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ProcessArgs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processargs_.size());
  for (int i = 0, n = _impl_.processargs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processargs_.Get(i));
  }

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  // string Args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // string EntryPoint = 4;
  if (!this->_internal_entrypoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entrypoint());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool Kill = 5;
  if (this->_internal_kill() != 0) {
    total_size += 1 + 1;
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeSpawnDllReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvokeSpawnDllReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeSpawnDllReq::GetClassData() const { return &_class_data_; }


void InvokeSpawnDllReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvokeSpawnDllReq*>(&to_msg);
  auto& from = static_cast<const InvokeSpawnDllReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.InvokeSpawnDllReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processargs_.MergeFrom(from._impl_.processargs_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_processname().empty()) {
    _this->_internal_set_processname(from._internal_processname());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (!from._internal_entrypoint().empty()) {
    _this->_internal_set_entrypoint(from._internal_entrypoint());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_kill() != 0) {
    _this->_internal_set_kill(from._internal_kill());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeSpawnDllReq::CopyFrom(const InvokeSpawnDllReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.InvokeSpawnDllReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeSpawnDllReq::IsInitialized() const {
  return true;
}

void InvokeSpawnDllReq::InternalSwap(InvokeSpawnDllReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processargs_.InternalSwap(&other->_impl_.processargs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processname_, lhs_arena,
      &other->_impl_.processname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entrypoint_, lhs_arena,
      &other->_impl_.entrypoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvokeSpawnDllReq, _impl_.ppid_)
      + sizeof(InvokeSpawnDllReq::_impl_.ppid_)
      - PROTOBUF_FIELD_OFFSET(InvokeSpawnDllReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeSpawnDllReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[59]);
}

// ===================================================================

class SpawnDllReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const SpawnDllReq* msg);
};

const ::sliverpb::Request&
SpawnDllReq::_Internal::request(const SpawnDllReq* msg) {
  return *msg->_impl_.request_;
}
void SpawnDllReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
SpawnDllReq::SpawnDllReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SpawnDllReq)
}
SpawnDllReq::SpawnDllReq(const SpawnDllReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnDllReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){from._impl_.processargs_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.kill_){}
    , decltype(_impl_.ppid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processname().empty()) {
    _this->_impl_.processname_.Set(from._internal_processname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ppid_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.ppid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.SpawnDllReq)
}

inline void SpawnDllReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processargs_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.offset_){0u}
    , decltype(_impl_.kill_){false}
    , decltype(_impl_.ppid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpawnDllReq::~SpawnDllReq() {
  // @@protoc_insertion_point(destructor:sliverpb.SpawnDllReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnDllReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processargs_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.processname_.Destroy();
  _impl_.args_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void SpawnDllReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnDllReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SpawnDllReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processargs_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.processname_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ppid_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.ppid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnDllReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProcessName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SpawnDllReq.ProcessName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SpawnDllReq.Args"));
        } else
          goto handle_unusual;
        continue;
      // bool Kill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PPid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ProcessArgs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processargs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SpawnDllReq.ProcessArgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnDllReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SpawnDllReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SpawnDllReq.ProcessName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processname(), target);
  }

  // uint32 Offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offset(), target);
  }

  // string Args = 4;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SpawnDllReq.Args");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_args(), target);
  }

  // bool Kill = 5;
  if (this->_internal_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_kill(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ppid(), target);
  }

  // repeated string ProcessArgs = 11;
  for (int i = 0, n = this->_internal_processargs_size(); i < n; i++) {
    const auto& s = this->_internal_processargs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SpawnDllReq.ProcessArgs");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SpawnDllReq)
  return target;
}

size_t SpawnDllReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SpawnDllReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ProcessArgs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.processargs_.size());
  for (int i = 0, n = _impl_.processargs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.processargs_.Get(i));
  }

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string ProcessName = 2;
  if (!this->_internal_processname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  // string Args = 4;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 Offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // bool Kill = 5;
  if (this->_internal_kill() != 0) {
    total_size += 1 + 1;
  }

  // uint32 PPid = 10;
  if (this->_internal_ppid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ppid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnDllReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnDllReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnDllReq::GetClassData() const { return &_class_data_; }


void SpawnDllReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnDllReq*>(&to_msg);
  auto& from = static_cast<const SpawnDllReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SpawnDllReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processargs_.MergeFrom(from._impl_.processargs_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_processname().empty()) {
    _this->_internal_set_processname(from._internal_processname());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_kill() != 0) {
    _this->_internal_set_kill(from._internal_kill());
  }
  if (from._internal_ppid() != 0) {
    _this->_internal_set_ppid(from._internal_ppid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnDllReq::CopyFrom(const SpawnDllReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SpawnDllReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnDllReq::IsInitialized() const {
  return true;
}

void SpawnDllReq::InternalSwap(SpawnDllReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.processargs_.InternalSwap(&other->_impl_.processargs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processname_, lhs_arena,
      &other->_impl_.processname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnDllReq, _impl_.ppid_)
      + sizeof(SpawnDllReq::_impl_.ppid_)
      - PROTOBUF_FIELD_OFFSET(SpawnDllReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnDllReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[60]);
}

// ===================================================================

class SpawnDll::_Internal {
 public:
  static const ::sliverpb::Response& response(const SpawnDll* msg);
};

const ::sliverpb::Response&
SpawnDll::_Internal::response(const SpawnDll* msg) {
  return *msg->_impl_.response_;
}
void SpawnDll::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
SpawnDll::SpawnDll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SpawnDll)
}
SpawnDll::SpawnDll(const SpawnDll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnDll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.SpawnDll)
}

inline void SpawnDll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpawnDll::~SpawnDll() {
  // @@protoc_insertion_point(destructor:sliverpb.SpawnDll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnDll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SpawnDll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnDll::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SpawnDll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnDll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SpawnDll.Result"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnDll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SpawnDll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SpawnDll.Result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SpawnDll)
  return target;
}

size_t SpawnDll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SpawnDll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnDll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnDll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnDll::GetClassData() const { return &_class_data_; }


void SpawnDll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnDll*>(&to_msg);
  auto& from = static_cast<const SpawnDll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SpawnDll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnDll::CopyFrom(const SpawnDll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SpawnDll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnDll::IsInitialized() const {
  return true;
}

void SpawnDll::InternalSwap(SpawnDll* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnDll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[61]);
}

// ===================================================================

class NetstatReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const NetstatReq* msg);
};

const ::sliverpb::Request&
NetstatReq::_Internal::request(const NetstatReq* msg) {
  return *msg->_impl_.request_;
}
void NetstatReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
NetstatReq::NetstatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.NetstatReq)
}
NetstatReq::NetstatReq(const NetstatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetstatReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.tcp_){}
    , decltype(_impl_.udp_){}
    , decltype(_impl_.ip4_){}
    , decltype(_impl_.ip6_){}
    , decltype(_impl_.listening_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.tcp_, &from._impl_.tcp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.listening_) -
    reinterpret_cast<char*>(&_impl_.tcp_)) + sizeof(_impl_.listening_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.NetstatReq)
}

inline void NetstatReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.tcp_){false}
    , decltype(_impl_.udp_){false}
    , decltype(_impl_.ip4_){false}
    , decltype(_impl_.ip6_){false}
    , decltype(_impl_.listening_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetstatReq::~NetstatReq() {
  // @@protoc_insertion_point(destructor:sliverpb.NetstatReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetstatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void NetstatReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetstatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.NetstatReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.tcp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.listening_) -
      reinterpret_cast<char*>(&_impl_.tcp_)) + sizeof(_impl_.listening_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetstatReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool TCP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tcp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool UDP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.udp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IP4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ip4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IP6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ip6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Listening = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.listening_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetstatReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.NetstatReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool TCP = 1;
  if (this->_internal_tcp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_tcp(), target);
  }

  // bool UDP = 2;
  if (this->_internal_udp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_udp(), target);
  }

  // bool IP4 = 3;
  if (this->_internal_ip4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ip4(), target);
  }

  // bool IP6 = 5;
  if (this->_internal_ip6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_ip6(), target);
  }

  // bool Listening = 6;
  if (this->_internal_listening() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_listening(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.NetstatReq)
  return target;
}

size_t NetstatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.NetstatReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool TCP = 1;
  if (this->_internal_tcp() != 0) {
    total_size += 1 + 1;
  }

  // bool UDP = 2;
  if (this->_internal_udp() != 0) {
    total_size += 1 + 1;
  }

  // bool IP4 = 3;
  if (this->_internal_ip4() != 0) {
    total_size += 1 + 1;
  }

  // bool IP6 = 5;
  if (this->_internal_ip6() != 0) {
    total_size += 1 + 1;
  }

  // bool Listening = 6;
  if (this->_internal_listening() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetstatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetstatReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetstatReq::GetClassData() const { return &_class_data_; }


void NetstatReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetstatReq*>(&to_msg);
  auto& from = static_cast<const NetstatReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.NetstatReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_tcp() != 0) {
    _this->_internal_set_tcp(from._internal_tcp());
  }
  if (from._internal_udp() != 0) {
    _this->_internal_set_udp(from._internal_udp());
  }
  if (from._internal_ip4() != 0) {
    _this->_internal_set_ip4(from._internal_ip4());
  }
  if (from._internal_ip6() != 0) {
    _this->_internal_set_ip6(from._internal_ip6());
  }
  if (from._internal_listening() != 0) {
    _this->_internal_set_listening(from._internal_listening());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetstatReq::CopyFrom(const NetstatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.NetstatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetstatReq::IsInitialized() const {
  return true;
}

void NetstatReq::InternalSwap(NetstatReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetstatReq, _impl_.listening_)
      + sizeof(NetstatReq::_impl_.listening_)
      - PROTOBUF_FIELD_OFFSET(NetstatReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetstatReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[62]);
}

// ===================================================================

class SockTabEntry_SockAddr::_Internal {
 public:
};

SockTabEntry_SockAddr::SockTabEntry_SockAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SockTabEntry.SockAddr)
}
SockTabEntry_SockAddr::SockTabEntry_SockAddr(const SockTabEntry_SockAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SockTabEntry_SockAddr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.SockTabEntry.SockAddr)
}

inline void SockTabEntry_SockAddr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SockTabEntry_SockAddr::~SockTabEntry_SockAddr() {
  // @@protoc_insertion_point(destructor:sliverpb.SockTabEntry.SockAddr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SockTabEntry_SockAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void SockTabEntry_SockAddr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SockTabEntry_SockAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SockTabEntry.SockAddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SockTabEntry_SockAddr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SockTabEntry.SockAddr.Ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SockTabEntry_SockAddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SockTabEntry.SockAddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SockTabEntry.SockAddr.Ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 Port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SockTabEntry.SockAddr)
  return target;
}

size_t SockTabEntry_SockAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SockTabEntry.SockAddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 Port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SockTabEntry_SockAddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SockTabEntry_SockAddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SockTabEntry_SockAddr::GetClassData() const { return &_class_data_; }


void SockTabEntry_SockAddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SockTabEntry_SockAddr*>(&to_msg);
  auto& from = static_cast<const SockTabEntry_SockAddr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SockTabEntry.SockAddr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SockTabEntry_SockAddr::CopyFrom(const SockTabEntry_SockAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SockTabEntry.SockAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SockTabEntry_SockAddr::IsInitialized() const {
  return true;
}

void SockTabEntry_SockAddr::InternalSwap(SockTabEntry_SockAddr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SockTabEntry_SockAddr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[63]);
}

// ===================================================================

class SockTabEntry::_Internal {
 public:
  static const ::sliverpb::SockTabEntry_SockAddr& localaddr(const SockTabEntry* msg);
  static const ::sliverpb::SockTabEntry_SockAddr& remoteaddr(const SockTabEntry* msg);
  static const ::sliverpb::Process& process(const SockTabEntry* msg);
};

const ::sliverpb::SockTabEntry_SockAddr&
SockTabEntry::_Internal::localaddr(const SockTabEntry* msg) {
  return *msg->_impl_.localaddr_;
}
const ::sliverpb::SockTabEntry_SockAddr&
SockTabEntry::_Internal::remoteaddr(const SockTabEntry* msg) {
  return *msg->_impl_.remoteaddr_;
}
const ::sliverpb::Process&
SockTabEntry::_Internal::process(const SockTabEntry* msg) {
  return *msg->_impl_.process_;
}
void SockTabEntry::clear_process() {
  if (GetArenaForAllocation() == nullptr && _impl_.process_ != nullptr) {
    delete _impl_.process_;
  }
  _impl_.process_ = nullptr;
}
SockTabEntry::SockTabEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SockTabEntry)
}
SockTabEntry::SockTabEntry(const SockTabEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SockTabEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skstate_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.localaddr_){nullptr}
    , decltype(_impl_.remoteaddr_){nullptr}
    , decltype(_impl_.process_){nullptr}
    , decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.skstate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skstate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skstate().empty()) {
    _this->_impl_.skstate_.Set(from._internal_skstate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_localaddr()) {
    _this->_impl_.localaddr_ = new ::sliverpb::SockTabEntry_SockAddr(*from._impl_.localaddr_);
  }
  if (from._internal_has_remoteaddr()) {
    _this->_impl_.remoteaddr_ = new ::sliverpb::SockTabEntry_SockAddr(*from._impl_.remoteaddr_);
  }
  if (from._internal_has_process()) {
    _this->_impl_.process_ = new ::sliverpb::Process(*from._impl_.process_);
  }
  _this->_impl_.uid_ = from._impl_.uid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.SockTabEntry)
}

inline void SockTabEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skstate_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.localaddr_){nullptr}
    , decltype(_impl_.remoteaddr_){nullptr}
    , decltype(_impl_.process_){nullptr}
    , decltype(_impl_.uid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.skstate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skstate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SockTabEntry::~SockTabEntry() {
  // @@protoc_insertion_point(destructor:sliverpb.SockTabEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SockTabEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skstate_.Destroy();
  _impl_.protocol_.Destroy();
  if (this != internal_default_instance()) delete _impl_.localaddr_;
  if (this != internal_default_instance()) delete _impl_.remoteaddr_;
  if (this != internal_default_instance()) delete _impl_.process_;
}

void SockTabEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SockTabEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SockTabEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skstate_.ClearToEmpty();
  _impl_.protocol_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.localaddr_ != nullptr) {
    delete _impl_.localaddr_;
  }
  _impl_.localaddr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remoteaddr_ != nullptr) {
    delete _impl_.remoteaddr_;
  }
  _impl_.remoteaddr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.process_ != nullptr) {
    delete _impl_.process_;
  }
  _impl_.process_ = nullptr;
  _impl_.uid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SockTabEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.SockTabEntry.SockAddr LocalAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.SockTabEntry.SockAddr RemoteAddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SkState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_skstate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SockTabEntry.SkState"));
        } else
          goto handle_unusual;
        continue;
      // uint32 UID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Process Process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SockTabEntry.Protocol"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SockTabEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SockTabEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.SockTabEntry.SockAddr LocalAddr = 1;
  if (this->_internal_has_localaddr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::localaddr(this),
        _Internal::localaddr(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.SockTabEntry.SockAddr RemoteAddr = 2;
  if (this->_internal_has_remoteaddr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::remoteaddr(this),
        _Internal::remoteaddr(this).GetCachedSize(), target, stream);
  }

  // string SkState = 3;
  if (!this->_internal_skstate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skstate().data(), static_cast<int>(this->_internal_skstate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SockTabEntry.SkState");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_skstate(), target);
  }

  // uint32 UID = 4;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uid(), target);
  }

  // .sliverpb.Process Process = 5;
  if (this->_internal_has_process()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::process(this),
        _Internal::process(this).GetCachedSize(), target, stream);
  }

  // string Protocol = 6;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SockTabEntry.Protocol");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SockTabEntry)
  return target;
}

size_t SockTabEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SockTabEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SkState = 3;
  if (!this->_internal_skstate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skstate());
  }

  // string Protocol = 6;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // .sliverpb.SockTabEntry.SockAddr LocalAddr = 1;
  if (this->_internal_has_localaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localaddr_);
  }

  // .sliverpb.SockTabEntry.SockAddr RemoteAddr = 2;
  if (this->_internal_has_remoteaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remoteaddr_);
  }

  // .sliverpb.Process Process = 5;
  if (this->_internal_has_process()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.process_);
  }

  // uint32 UID = 4;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SockTabEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SockTabEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SockTabEntry::GetClassData() const { return &_class_data_; }


void SockTabEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SockTabEntry*>(&to_msg);
  auto& from = static_cast<const SockTabEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SockTabEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_skstate().empty()) {
    _this->_internal_set_skstate(from._internal_skstate());
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_has_localaddr()) {
    _this->_internal_mutable_localaddr()->::sliverpb::SockTabEntry_SockAddr::MergeFrom(
        from._internal_localaddr());
  }
  if (from._internal_has_remoteaddr()) {
    _this->_internal_mutable_remoteaddr()->::sliverpb::SockTabEntry_SockAddr::MergeFrom(
        from._internal_remoteaddr());
  }
  if (from._internal_has_process()) {
    _this->_internal_mutable_process()->::sliverpb::Process::MergeFrom(
        from._internal_process());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SockTabEntry::CopyFrom(const SockTabEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SockTabEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SockTabEntry::IsInitialized() const {
  return true;
}

void SockTabEntry::InternalSwap(SockTabEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skstate_, lhs_arena,
      &other->_impl_.skstate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SockTabEntry, _impl_.uid_)
      + sizeof(SockTabEntry::_impl_.uid_)
      - PROTOBUF_FIELD_OFFSET(SockTabEntry, _impl_.localaddr_)>(
          reinterpret_cast<char*>(&_impl_.localaddr_),
          reinterpret_cast<char*>(&other->_impl_.localaddr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SockTabEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[64]);
}

// ===================================================================

class Netstat::_Internal {
 public:
  static const ::sliverpb::Response& response(const Netstat* msg);
};

const ::sliverpb::Response&
Netstat::_Internal::response(const Netstat* msg) {
  return *msg->_impl_.response_;
}
void Netstat::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Netstat::Netstat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Netstat)
}
Netstat::Netstat(const Netstat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Netstat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Netstat)
}

inline void Netstat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Netstat::~Netstat() {
  // @@protoc_insertion_point(destructor:sliverpb.Netstat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Netstat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Netstat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Netstat::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Netstat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Netstat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.SockTabEntry Entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Netstat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Netstat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.SockTabEntry Entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Netstat)
  return target;
}

size_t Netstat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Netstat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.SockTabEntry Entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Netstat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Netstat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Netstat::GetClassData() const { return &_class_data_; }


void Netstat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Netstat*>(&to_msg);
  auto& from = static_cast<const Netstat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Netstat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Netstat::CopyFrom(const Netstat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Netstat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Netstat::IsInitialized() const {
  return true;
}

void Netstat::InternalSwap(Netstat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Netstat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[65]);
}

// ===================================================================

class EnvReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const EnvReq* msg);
};

const ::sliverpb::Request&
EnvReq::_Internal::request(const EnvReq* msg) {
  return *msg->_impl_.request_;
}
void EnvReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
EnvReq::EnvReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.EnvReq)
}
EnvReq::EnvReq(const EnvReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.EnvReq)
}

inline void EnvReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnvReq::~EnvReq() {
  // @@protoc_insertion_point(destructor:sliverpb.EnvReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void EnvReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.EnvReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.EnvReq.Name"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.EnvReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.EnvReq.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.EnvReq)
  return target;
}

size_t EnvReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.EnvReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvReq::GetClassData() const { return &_class_data_; }


void EnvReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvReq*>(&to_msg);
  auto& from = static_cast<const EnvReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.EnvReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvReq::CopyFrom(const EnvReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.EnvReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvReq::IsInitialized() const {
  return true;
}

void EnvReq::InternalSwap(EnvReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[66]);
}

// ===================================================================

class EnvInfo::_Internal {
 public:
  static const ::sliverpb::Response& response(const EnvInfo* msg);
};

const ::sliverpb::Response&
EnvInfo::_Internal::response(const EnvInfo* msg) {
  return *msg->_impl_.response_;
}
void EnvInfo::clear_variables() {
  _impl_.variables_.Clear();
}
void EnvInfo::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
EnvInfo::EnvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.EnvInfo)
}
EnvInfo::EnvInfo(const EnvInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.EnvInfo)
}

inline void EnvInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnvInfo::~EnvInfo() {
  // @@protoc_insertion_point(destructor:sliverpb.EnvInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void EnvInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.EnvInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.EnvVar Variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.EnvInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.EnvVar Variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.EnvInfo)
  return target;
}

size_t EnvInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.EnvInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.EnvVar Variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvInfo::GetClassData() const { return &_class_data_; }


void EnvInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvInfo*>(&to_msg);
  auto& from = static_cast<const EnvInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.EnvInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvInfo::CopyFrom(const EnvInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.EnvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvInfo::IsInitialized() const {
  return true;
}

void EnvInfo::InternalSwap(EnvInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[67]);
}

// ===================================================================

class SetEnvReq::_Internal {
 public:
  static const ::sliverpb::EnvVar& variable(const SetEnvReq* msg);
  static const ::sliverpb::Request& request(const SetEnvReq* msg);
};

const ::sliverpb::EnvVar&
SetEnvReq::_Internal::variable(const SetEnvReq* msg) {
  return *msg->_impl_.variable_;
}
const ::sliverpb::Request&
SetEnvReq::_Internal::request(const SetEnvReq* msg) {
  return *msg->_impl_.request_;
}
void SetEnvReq::clear_variable() {
  if (GetArenaForAllocation() == nullptr && _impl_.variable_ != nullptr) {
    delete _impl_.variable_;
  }
  _impl_.variable_ = nullptr;
}
void SetEnvReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
SetEnvReq::SetEnvReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SetEnvReq)
}
SetEnvReq::SetEnvReq(const SetEnvReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetEnvReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_variable()) {
    _this->_impl_.variable_ = new ::sliverpb::EnvVar(*from._impl_.variable_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.SetEnvReq)
}

inline void SetEnvReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetEnvReq::~SetEnvReq() {
  // @@protoc_insertion_point(destructor:sliverpb.SetEnvReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEnvReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.variable_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void SetEnvReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEnvReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SetEnvReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.variable_ != nullptr) {
    delete _impl_.variable_;
  }
  _impl_.variable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEnvReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.EnvVar Variable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEnvReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SetEnvReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.EnvVar Variable = 1;
  if (this->_internal_has_variable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::variable(this),
        _Internal::variable(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SetEnvReq)
  return target;
}

size_t SetEnvReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SetEnvReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.EnvVar Variable = 1;
  if (this->_internal_has_variable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.variable_);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEnvReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetEnvReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEnvReq::GetClassData() const { return &_class_data_; }


void SetEnvReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetEnvReq*>(&to_msg);
  auto& from = static_cast<const SetEnvReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SetEnvReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_variable()) {
    _this->_internal_mutable_variable()->::sliverpb::EnvVar::MergeFrom(
        from._internal_variable());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEnvReq::CopyFrom(const SetEnvReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SetEnvReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEnvReq::IsInitialized() const {
  return true;
}

void SetEnvReq::InternalSwap(SetEnvReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetEnvReq, _impl_.request_)
      + sizeof(SetEnvReq::_impl_.request_)
      - PROTOBUF_FIELD_OFFSET(SetEnvReq, _impl_.variable_)>(
          reinterpret_cast<char*>(&_impl_.variable_),
          reinterpret_cast<char*>(&other->_impl_.variable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEnvReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[68]);
}

// ===================================================================

class SetEnv::_Internal {
 public:
  static const ::sliverpb::Response& response(const SetEnv* msg);
};

const ::sliverpb::Response&
SetEnv::_Internal::response(const SetEnv* msg) {
  return *msg->_impl_.response_;
}
void SetEnv::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
SetEnv::SetEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SetEnv)
}
SetEnv::SetEnv(const SetEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetEnv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.SetEnv)
}

inline void SetEnv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetEnv::~SetEnv() {
  // @@protoc_insertion_point(destructor:sliverpb.SetEnv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEnv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SetEnv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SetEnv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEnv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEnv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SetEnv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SetEnv)
  return target;
}

size_t SetEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SetEnv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEnv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetEnv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEnv::GetClassData() const { return &_class_data_; }


void SetEnv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetEnv*>(&to_msg);
  auto& from = static_cast<const SetEnv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SetEnv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEnv::CopyFrom(const SetEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SetEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEnv::IsInitialized() const {
  return true;
}

void SetEnv::InternalSwap(SetEnv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEnv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[69]);
}

// ===================================================================

class UnsetEnvReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const UnsetEnvReq* msg);
};

const ::sliverpb::Request&
UnsetEnvReq::_Internal::request(const UnsetEnvReq* msg) {
  return *msg->_impl_.request_;
}
void UnsetEnvReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
UnsetEnvReq::UnsetEnvReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.UnsetEnvReq)
}
UnsetEnvReq::UnsetEnvReq(const UnsetEnvReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetEnvReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.UnsetEnvReq)
}

inline void UnsetEnvReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnsetEnvReq::~UnsetEnvReq() {
  // @@protoc_insertion_point(destructor:sliverpb.UnsetEnvReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetEnvReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void UnsetEnvReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetEnvReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.UnsetEnvReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetEnvReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.UnsetEnvReq.Name"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetEnvReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.UnsetEnvReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.UnsetEnvReq.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.UnsetEnvReq)
  return target;
}

size_t UnsetEnvReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.UnsetEnvReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetEnvReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetEnvReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetEnvReq::GetClassData() const { return &_class_data_; }


void UnsetEnvReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetEnvReq*>(&to_msg);
  auto& from = static_cast<const UnsetEnvReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.UnsetEnvReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetEnvReq::CopyFrom(const UnsetEnvReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.UnsetEnvReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetEnvReq::IsInitialized() const {
  return true;
}

void UnsetEnvReq::InternalSwap(UnsetEnvReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetEnvReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[70]);
}

// ===================================================================

class UnsetEnv::_Internal {
 public:
  static const ::sliverpb::Response& response(const UnsetEnv* msg);
};

const ::sliverpb::Response&
UnsetEnv::_Internal::response(const UnsetEnv* msg) {
  return *msg->_impl_.response_;
}
void UnsetEnv::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
UnsetEnv::UnsetEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.UnsetEnv)
}
UnsetEnv::UnsetEnv(const UnsetEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetEnv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.UnsetEnv)
}

inline void UnsetEnv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetEnv::~UnsetEnv() {
  // @@protoc_insertion_point(destructor:sliverpb.UnsetEnv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetEnv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void UnsetEnv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.UnsetEnv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetEnv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetEnv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.UnsetEnv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.UnsetEnv)
  return target;
}

size_t UnsetEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.UnsetEnv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetEnv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetEnv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetEnv::GetClassData() const { return &_class_data_; }


void UnsetEnv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetEnv*>(&to_msg);
  auto& from = static_cast<const UnsetEnv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.UnsetEnv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetEnv::CopyFrom(const UnsetEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.UnsetEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetEnv::IsInitialized() const {
  return true;
}

void UnsetEnv::InternalSwap(UnsetEnv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetEnv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[71]);
}

// ===================================================================

class DNSSessionInit::_Internal {
 public:
};

DNSSessionInit::DNSSessionInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.DNSSessionInit)
}
DNSSessionInit::DNSSessionInit(const DNSSessionInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DNSSessionInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.DNSSessionInit)
}

inline void DNSSessionInit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DNSSessionInit::~DNSSessionInit() {
  // @@protoc_insertion_point(destructor:sliverpb.DNSSessionInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DNSSessionInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void DNSSessionInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DNSSessionInit::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.DNSSessionInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSSessionInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DNSSessionInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.DNSSessionInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.DNSSessionInit)
  return target;
}

size_t DNSSessionInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.DNSSessionInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DNSSessionInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DNSSessionInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DNSSessionInit::GetClassData() const { return &_class_data_; }


void DNSSessionInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DNSSessionInit*>(&to_msg);
  auto& from = static_cast<const DNSSessionInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.DNSSessionInit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DNSSessionInit::CopyFrom(const DNSSessionInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.DNSSessionInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSSessionInit::IsInitialized() const {
  return true;
}

void DNSSessionInit::InternalSwap(DNSSessionInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSSessionInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[72]);
}

// ===================================================================

class DNSPoll::_Internal {
 public:
};

DNSPoll::DNSPoll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.DNSPoll)
}
DNSPoll::DNSPoll(const DNSPoll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DNSPoll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sliverpb.DNSPoll)
}

inline void DNSPoll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DNSPoll::~DNSPoll() {
  // @@protoc_insertion_point(destructor:sliverpb.DNSPoll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DNSPoll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
}

void DNSPoll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DNSPoll::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.DNSPoll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSPoll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.DNSBlockHeader blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DNSPoll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.DNSPoll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.DNSBlockHeader blocks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.DNSPoll)
  return target;
}

size_t DNSPoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.DNSPoll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.DNSBlockHeader blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DNSPoll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DNSPoll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DNSPoll::GetClassData() const { return &_class_data_; }


void DNSPoll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DNSPoll*>(&to_msg);
  auto& from = static_cast<const DNSPoll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.DNSPoll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DNSPoll::CopyFrom(const DNSPoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.DNSPoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSPoll::IsInitialized() const {
  return true;
}

void DNSPoll::InternalSwap(DNSPoll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSPoll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[73]);
}

// ===================================================================

class DNSBlockHeader::_Internal {
 public:
};

DNSBlockHeader::DNSBlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.DNSBlockHeader)
}
DNSBlockHeader::DNSBlockHeader(const DNSBlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DNSBlockHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.DNSBlockHeader)
}

inline void DNSBlockHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DNSBlockHeader::~DNSBlockHeader() {
  // @@protoc_insertion_point(destructor:sliverpb.DNSBlockHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DNSBlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void DNSBlockHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DNSBlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.DNSBlockHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSBlockHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.DNSBlockHeader.ID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DNSBlockHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.DNSBlockHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.DNSBlockHeader.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 Size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.DNSBlockHeader)
  return target;
}

size_t DNSBlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.DNSBlockHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 Size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DNSBlockHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DNSBlockHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DNSBlockHeader::GetClassData() const { return &_class_data_; }


void DNSBlockHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DNSBlockHeader*>(&to_msg);
  auto& from = static_cast<const DNSBlockHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.DNSBlockHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DNSBlockHeader::CopyFrom(const DNSBlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.DNSBlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSBlockHeader::IsInitialized() const {
  return true;
}

void DNSBlockHeader::InternalSwap(DNSBlockHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSBlockHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[74]);
}

// ===================================================================

class HTTPSessionInit::_Internal {
 public:
};

HTTPSessionInit::HTTPSessionInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.HTTPSessionInit)
}
HTTPSessionInit::HTTPSessionInit(const HTTPSessionInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HTTPSessionInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.HTTPSessionInit)
}

inline void HTTPSessionInit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HTTPSessionInit::~HTTPSessionInit() {
  // @@protoc_insertion_point(destructor:sliverpb.HTTPSessionInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HTTPSessionInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void HTTPSessionInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HTTPSessionInit::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.HTTPSessionInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPSessionInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HTTPSessionInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.HTTPSessionInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.HTTPSessionInit)
  return target;
}

size_t HTTPSessionInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.HTTPSessionInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HTTPSessionInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HTTPSessionInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HTTPSessionInit::GetClassData() const { return &_class_data_; }


void HTTPSessionInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HTTPSessionInit*>(&to_msg);
  auto& from = static_cast<const HTTPSessionInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.HTTPSessionInit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HTTPSessionInit::CopyFrom(const HTTPSessionInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.HTTPSessionInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPSessionInit::IsInitialized() const {
  return true;
}

void HTTPSessionInit::InternalSwap(HTTPSessionInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPSessionInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[75]);
}

// ===================================================================

class ScreenshotReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ScreenshotReq* msg);
};

const ::sliverpb::Request&
ScreenshotReq::_Internal::request(const ScreenshotReq* msg) {
  return *msg->_impl_.request_;
}
void ScreenshotReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ScreenshotReq::ScreenshotReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ScreenshotReq)
}
ScreenshotReq::ScreenshotReq(const ScreenshotReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScreenshotReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ScreenshotReq)
}

inline void ScreenshotReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScreenshotReq::~ScreenshotReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ScreenshotReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScreenshotReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ScreenshotReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScreenshotReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ScreenshotReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScreenshotReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScreenshotReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ScreenshotReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ScreenshotReq)
  return target;
}

size_t ScreenshotReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ScreenshotReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScreenshotReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScreenshotReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScreenshotReq::GetClassData() const { return &_class_data_; }


void ScreenshotReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScreenshotReq*>(&to_msg);
  auto& from = static_cast<const ScreenshotReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ScreenshotReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScreenshotReq::CopyFrom(const ScreenshotReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ScreenshotReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenshotReq::IsInitialized() const {
  return true;
}

void ScreenshotReq::InternalSwap(ScreenshotReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScreenshotReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[76]);
}

// ===================================================================

class Screenshot::_Internal {
 public:
  static const ::sliverpb::Response& response(const Screenshot* msg);
};

const ::sliverpb::Response&
Screenshot::_Internal::response(const Screenshot* msg) {
  return *msg->_impl_.response_;
}
void Screenshot::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Screenshot::Screenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Screenshot)
}
Screenshot::Screenshot(const Screenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Screenshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Screenshot)
}

inline void Screenshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Screenshot::~Screenshot() {
  // @@protoc_insertion_point(destructor:sliverpb.Screenshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Screenshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Screenshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Screenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Screenshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Screenshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Screenshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Screenshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Screenshot)
  return target;
}

size_t Screenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Screenshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Screenshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Screenshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Screenshot::GetClassData() const { return &_class_data_; }


void Screenshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Screenshot*>(&to_msg);
  auto& from = static_cast<const Screenshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Screenshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Screenshot::CopyFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Screenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screenshot::IsInitialized() const {
  return true;
}

void Screenshot::InternalSwap(Screenshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Screenshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[77]);
}

// ===================================================================

class StartServiceReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const StartServiceReq* msg);
};

const ::sliverpb::Request&
StartServiceReq::_Internal::request(const StartServiceReq* msg) {
  return *msg->_impl_.request_;
}
void StartServiceReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
StartServiceReq::StartServiceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.StartServiceReq)
}
StartServiceReq::StartServiceReq(const StartServiceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartServiceReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , decltype(_impl_.servicedescription_){}
    , decltype(_impl_.binpath_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servicename().empty()) {
    _this->_impl_.servicename_.Set(from._internal_servicename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.servicedescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicedescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servicedescription().empty()) {
    _this->_impl_.servicedescription_.Set(from._internal_servicedescription(), 
      _this->GetArenaForAllocation());
  }
  _impl_.binpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binpath().empty()) {
    _this->_impl_.binpath_.Set(from._internal_binpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arguments().empty()) {
    _this->_impl_.arguments_.Set(from._internal_arguments(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.StartServiceReq)
}

inline void StartServiceReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , decltype(_impl_.servicedescription_){}
    , decltype(_impl_.binpath_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.servicedescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicedescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.binpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartServiceReq::~StartServiceReq() {
  // @@protoc_insertion_point(destructor:sliverpb.StartServiceReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartServiceReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servicename_.Destroy();
  _impl_.servicedescription_.Destroy();
  _impl_.binpath_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.arguments_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void StartServiceReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartServiceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.StartServiceReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servicename_.ClearToEmpty();
  _impl_.servicedescription_.ClearToEmpty();
  _impl_.binpath_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.arguments_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartServiceReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.StartServiceReq.ServiceName"));
        } else
          goto handle_unusual;
        continue;
      // string ServiceDescription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_servicedescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.StartServiceReq.ServiceDescription"));
        } else
          goto handle_unusual;
        continue;
      // string BinPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_binpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.StartServiceReq.BinPath"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.StartServiceReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // string Arguments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_arguments();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.StartServiceReq.Arguments"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartServiceReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.StartServiceReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.StartServiceReq.ServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  // string ServiceDescription = 2;
  if (!this->_internal_servicedescription().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicedescription().data(), static_cast<int>(this->_internal_servicedescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.StartServiceReq.ServiceDescription");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servicedescription(), target);
  }

  // string BinPath = 3;
  if (!this->_internal_binpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_binpath().data(), static_cast<int>(this->_internal_binpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.StartServiceReq.BinPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_binpath(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.StartServiceReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // string Arguments = 5;
  if (!this->_internal_arguments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.StartServiceReq.Arguments");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_arguments(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.StartServiceReq)
  return target;
}

size_t StartServiceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.StartServiceReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string ServiceDescription = 2;
  if (!this->_internal_servicedescription().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicedescription());
  }

  // string BinPath = 3;
  if (!this->_internal_binpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_binpath());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string Arguments = 5;
  if (!this->_internal_arguments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arguments());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartServiceReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartServiceReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartServiceReq::GetClassData() const { return &_class_data_; }


void StartServiceReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartServiceReq*>(&to_msg);
  auto& from = static_cast<const StartServiceReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.StartServiceReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servicename().empty()) {
    _this->_internal_set_servicename(from._internal_servicename());
  }
  if (!from._internal_servicedescription().empty()) {
    _this->_internal_set_servicedescription(from._internal_servicedescription());
  }
  if (!from._internal_binpath().empty()) {
    _this->_internal_set_binpath(from._internal_binpath());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_arguments().empty()) {
    _this->_internal_set_arguments(from._internal_arguments());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartServiceReq::CopyFrom(const StartServiceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.StartServiceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartServiceReq::IsInitialized() const {
  return true;
}

void StartServiceReq::InternalSwap(StartServiceReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servicename_, lhs_arena,
      &other->_impl_.servicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servicedescription_, lhs_arena,
      &other->_impl_.servicedescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.binpath_, lhs_arena,
      &other->_impl_.binpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arguments_, lhs_arena,
      &other->_impl_.arguments_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartServiceReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[78]);
}

// ===================================================================

class ServiceInfo::_Internal {
 public:
  static const ::sliverpb::Response& response(const ServiceInfo* msg);
};

const ::sliverpb::Response&
ServiceInfo::_Internal::response(const ServiceInfo* msg) {
  return *msg->_impl_.response_;
}
void ServiceInfo::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
ServiceInfo::ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ServiceInfo)
}

inline void ServiceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:sliverpb.ServiceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void ServiceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ServiceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ServiceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ServiceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceInfo::GetClassData() const { return &_class_data_; }


void ServiceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceInfo*>(&to_msg);
  auto& from = static_cast<const ServiceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[79]);
}

// ===================================================================

class ServiceInfoReq::_Internal {
 public:
};

ServiceInfoReq::ServiceInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ServiceInfoReq)
}
ServiceInfoReq::ServiceInfoReq(const ServiceInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , decltype(_impl_.hostname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servicename().empty()) {
    _this->_impl_.servicename_.Set(from._internal_servicename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ServiceInfoReq)
}

inline void ServiceInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , decltype(_impl_.hostname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceInfoReq::~ServiceInfoReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ServiceInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servicename_.Destroy();
  _impl_.hostname_.Destroy();
}

void ServiceInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ServiceInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servicename_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ServiceInfoReq.ServiceName"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ServiceInfoReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ServiceInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ServiceInfoReq.ServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  // string Hostname = 2;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ServiceInfoReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ServiceInfoReq)
  return target;
}

size_t ServiceInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ServiceInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string Hostname = 2;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceInfoReq::GetClassData() const { return &_class_data_; }


void ServiceInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceInfoReq*>(&to_msg);
  auto& from = static_cast<const ServiceInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ServiceInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servicename().empty()) {
    _this->_internal_set_servicename(from._internal_servicename());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceInfoReq::CopyFrom(const ServiceInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ServiceInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfoReq::IsInitialized() const {
  return true;
}

void ServiceInfoReq::InternalSwap(ServiceInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servicename_, lhs_arena,
      &other->_impl_.servicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[80]);
}

// ===================================================================

class StopServiceReq::_Internal {
 public:
  static const ::sliverpb::ServiceInfoReq& serviceinfo(const StopServiceReq* msg);
  static const ::sliverpb::Request& request(const StopServiceReq* msg);
};

const ::sliverpb::ServiceInfoReq&
StopServiceReq::_Internal::serviceinfo(const StopServiceReq* msg) {
  return *msg->_impl_.serviceinfo_;
}
const ::sliverpb::Request&
StopServiceReq::_Internal::request(const StopServiceReq* msg) {
  return *msg->_impl_.request_;
}
void StopServiceReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
StopServiceReq::StopServiceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.StopServiceReq)
}
StopServiceReq::StopServiceReq(const StopServiceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopServiceReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceinfo_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serviceinfo()) {
    _this->_impl_.serviceinfo_ = new ::sliverpb::ServiceInfoReq(*from._impl_.serviceinfo_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.StopServiceReq)
}

inline void StopServiceReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceinfo_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StopServiceReq::~StopServiceReq() {
  // @@protoc_insertion_point(destructor:sliverpb.StopServiceReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopServiceReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.serviceinfo_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void StopServiceReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopServiceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.StopServiceReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.serviceinfo_ != nullptr) {
    delete _impl_.serviceinfo_;
  }
  _impl_.serviceinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopServiceReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.ServiceInfoReq ServiceInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopServiceReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.StopServiceReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.ServiceInfoReq ServiceInfo = 1;
  if (this->_internal_has_serviceinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::serviceinfo(this),
        _Internal::serviceinfo(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.StopServiceReq)
  return target;
}

size_t StopServiceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.StopServiceReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.ServiceInfoReq ServiceInfo = 1;
  if (this->_internal_has_serviceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.serviceinfo_);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopServiceReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopServiceReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopServiceReq::GetClassData() const { return &_class_data_; }


void StopServiceReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopServiceReq*>(&to_msg);
  auto& from = static_cast<const StopServiceReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.StopServiceReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serviceinfo()) {
    _this->_internal_mutable_serviceinfo()->::sliverpb::ServiceInfoReq::MergeFrom(
        from._internal_serviceinfo());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopServiceReq::CopyFrom(const StopServiceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.StopServiceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServiceReq::IsInitialized() const {
  return true;
}

void StopServiceReq::InternalSwap(StopServiceReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopServiceReq, _impl_.request_)
      + sizeof(StopServiceReq::_impl_.request_)
      - PROTOBUF_FIELD_OFFSET(StopServiceReq, _impl_.serviceinfo_)>(
          reinterpret_cast<char*>(&_impl_.serviceinfo_),
          reinterpret_cast<char*>(&other->_impl_.serviceinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopServiceReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[81]);
}

// ===================================================================

class RemoveServiceReq::_Internal {
 public:
  static const ::sliverpb::ServiceInfoReq& serviceinfo(const RemoveServiceReq* msg);
  static const ::sliverpb::Request& request(const RemoveServiceReq* msg);
};

const ::sliverpb::ServiceInfoReq&
RemoveServiceReq::_Internal::serviceinfo(const RemoveServiceReq* msg) {
  return *msg->_impl_.serviceinfo_;
}
const ::sliverpb::Request&
RemoveServiceReq::_Internal::request(const RemoveServiceReq* msg) {
  return *msg->_impl_.request_;
}
void RemoveServiceReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RemoveServiceReq::RemoveServiceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RemoveServiceReq)
}
RemoveServiceReq::RemoveServiceReq(const RemoveServiceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveServiceReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceinfo_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serviceinfo()) {
    _this->_impl_.serviceinfo_ = new ::sliverpb::ServiceInfoReq(*from._impl_.serviceinfo_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RemoveServiceReq)
}

inline void RemoveServiceReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceinfo_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveServiceReq::~RemoveServiceReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RemoveServiceReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveServiceReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.serviceinfo_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RemoveServiceReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveServiceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RemoveServiceReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.serviceinfo_ != nullptr) {
    delete _impl_.serviceinfo_;
  }
  _impl_.serviceinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveServiceReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.ServiceInfoReq ServiceInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveServiceReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RemoveServiceReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.ServiceInfoReq ServiceInfo = 1;
  if (this->_internal_has_serviceinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::serviceinfo(this),
        _Internal::serviceinfo(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RemoveServiceReq)
  return target;
}

size_t RemoveServiceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RemoveServiceReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.ServiceInfoReq ServiceInfo = 1;
  if (this->_internal_has_serviceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.serviceinfo_);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveServiceReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveServiceReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveServiceReq::GetClassData() const { return &_class_data_; }


void RemoveServiceReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveServiceReq*>(&to_msg);
  auto& from = static_cast<const RemoveServiceReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RemoveServiceReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serviceinfo()) {
    _this->_internal_mutable_serviceinfo()->::sliverpb::ServiceInfoReq::MergeFrom(
        from._internal_serviceinfo());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveServiceReq::CopyFrom(const RemoveServiceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RemoveServiceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveServiceReq::IsInitialized() const {
  return true;
}

void RemoveServiceReq::InternalSwap(RemoveServiceReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveServiceReq, _impl_.request_)
      + sizeof(RemoveServiceReq::_impl_.request_)
      - PROTOBUF_FIELD_OFFSET(RemoveServiceReq, _impl_.serviceinfo_)>(
          reinterpret_cast<char*>(&_impl_.serviceinfo_),
          reinterpret_cast<char*>(&other->_impl_.serviceinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveServiceReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[82]);
}

// ===================================================================

class BackdoorReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const BackdoorReq* msg);
};

const ::sliverpb::Request&
BackdoorReq::_Internal::request(const BackdoorReq* msg) {
  return *msg->_impl_.request_;
}
void BackdoorReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
BackdoorReq::BackdoorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.BackdoorReq)
}
BackdoorReq::BackdoorReq(const BackdoorReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BackdoorReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.profilename_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilename().empty()) {
    _this->_impl_.profilename_.Set(from._internal_profilename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.BackdoorReq)
}

inline void BackdoorReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.profilename_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BackdoorReq::~BackdoorReq() {
  // @@protoc_insertion_point(destructor:sliverpb.BackdoorReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackdoorReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  _impl_.profilename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void BackdoorReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackdoorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.BackdoorReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _impl_.profilename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackdoorReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.BackdoorReq.FilePath"));
        } else
          goto handle_unusual;
        continue;
      // string ProfileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_profilename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.BackdoorReq.ProfileName"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackdoorReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.BackdoorReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FilePath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.BackdoorReq.FilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // string ProfileName = 2;
  if (!this->_internal_profilename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilename().data(), static_cast<int>(this->_internal_profilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.BackdoorReq.ProfileName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_profilename(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.BackdoorReq)
  return target;
}

size_t BackdoorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.BackdoorReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FilePath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // string ProfileName = 2;
  if (!this->_internal_profilename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilename());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackdoorReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackdoorReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackdoorReq::GetClassData() const { return &_class_data_; }


void BackdoorReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackdoorReq*>(&to_msg);
  auto& from = static_cast<const BackdoorReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.BackdoorReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (!from._internal_profilename().empty()) {
    _this->_internal_set_profilename(from._internal_profilename());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackdoorReq::CopyFrom(const BackdoorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.BackdoorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackdoorReq::IsInitialized() const {
  return true;
}

void BackdoorReq::InternalSwap(BackdoorReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilename_, lhs_arena,
      &other->_impl_.profilename_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackdoorReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[83]);
}

// ===================================================================

class Backdoor::_Internal {
 public:
  static const ::sliverpb::Response& response(const Backdoor* msg);
};

const ::sliverpb::Response&
Backdoor::_Internal::response(const Backdoor* msg) {
  return *msg->_impl_.response_;
}
void Backdoor::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Backdoor::Backdoor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Backdoor)
}
Backdoor::Backdoor(const Backdoor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Backdoor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Backdoor)
}

inline void Backdoor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Backdoor::~Backdoor() {
  // @@protoc_insertion_point(destructor:sliverpb.Backdoor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Backdoor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Backdoor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Backdoor::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Backdoor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backdoor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Backdoor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Backdoor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Backdoor)
  return target;
}

size_t Backdoor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Backdoor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Backdoor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Backdoor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Backdoor::GetClassData() const { return &_class_data_; }


void Backdoor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Backdoor*>(&to_msg);
  auto& from = static_cast<const Backdoor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Backdoor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Backdoor::CopyFrom(const Backdoor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Backdoor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backdoor::IsInitialized() const {
  return true;
}

void Backdoor::InternalSwap(Backdoor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backdoor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[84]);
}

// ===================================================================

class RegistryReadReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegistryReadReq* msg);
};

const ::sliverpb::Request&
RegistryReadReq::_Internal::request(const RegistryReadReq* msg) {
  return *msg->_impl_.request_;
}
void RegistryReadReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegistryReadReq::RegistryReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryReadReq)
}
RegistryReadReq::RegistryReadReq(const RegistryReadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryReadReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hive().empty()) {
    _this->_impl_.hive_.Set(from._internal_hive(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryReadReq)
}

inline void RegistryReadReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistryReadReq::~RegistryReadReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryReadReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryReadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hive_.Destroy();
  _impl_.path_.Destroy();
  _impl_.key_.Destroy();
  _impl_.hostname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegistryReadReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryReadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryReadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hive_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryReadReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Hive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryReadReq.Hive"));
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryReadReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryReadReq.Key"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryReadReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryReadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryReadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hive().data(), static_cast<int>(this->_internal_hive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryReadReq.Hive");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hive(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryReadReq.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryReadReq.Key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryReadReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryReadReq)
  return target;
}

size_t RegistryReadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryReadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hive());
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryReadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryReadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryReadReq::GetClassData() const { return &_class_data_; }


void RegistryReadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryReadReq*>(&to_msg);
  auto& from = static_cast<const RegistryReadReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryReadReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hive().empty()) {
    _this->_internal_set_hive(from._internal_hive());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryReadReq::CopyFrom(const RegistryReadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryReadReq::IsInitialized() const {
  return true;
}

void RegistryReadReq::InternalSwap(RegistryReadReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hive_, lhs_arena,
      &other->_impl_.hive_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryReadReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[85]);
}

// ===================================================================

class RegistryRead::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegistryRead* msg);
};

const ::sliverpb::Response&
RegistryRead::_Internal::response(const RegistryRead* msg) {
  return *msg->_impl_.response_;
}
void RegistryRead::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegistryRead::RegistryRead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryRead)
}
RegistryRead::RegistryRead(const RegistryRead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryRead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryRead)
}

inline void RegistryRead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistryRead::~RegistryRead() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryRead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryRead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegistryRead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryRead::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryRead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryRead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryRead.Value"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryRead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryRead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryRead.Value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryRead)
  return target;
}

size_t RegistryRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryRead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryRead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryRead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryRead::GetClassData() const { return &_class_data_; }


void RegistryRead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryRead*>(&to_msg);
  auto& from = static_cast<const RegistryRead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryRead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryRead::CopyFrom(const RegistryRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryRead::IsInitialized() const {
  return true;
}

void RegistryRead::InternalSwap(RegistryRead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryRead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[86]);
}

// ===================================================================

class RegistryWriteReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegistryWriteReq* msg);
};

const ::sliverpb::Request&
RegistryWriteReq::_Internal::request(const RegistryWriteReq* msg) {
  return *msg->_impl_.request_;
}
void RegistryWriteReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegistryWriteReq::RegistryWriteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryWriteReq)
}
RegistryWriteReq::RegistryWriteReq(const RegistryWriteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryWriteReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.bytevalue_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.qwordvalue_){}
    , decltype(_impl_.dwordvalue_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hive().empty()) {
    _this->_impl_.hive_.Set(from._internal_hive(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stringvalue().empty()) {
    _this->_impl_.stringvalue_.Set(from._internal_stringvalue(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bytevalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytevalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytevalue().empty()) {
    _this->_impl_.bytevalue_.Set(from._internal_bytevalue(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.qwordvalue_, &from._impl_.qwordvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.qwordvalue_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryWriteReq)
}

inline void RegistryWriteReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.bytevalue_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.qwordvalue_){uint64_t{0u}}
    , decltype(_impl_.dwordvalue_){0u}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytevalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytevalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistryWriteReq::~RegistryWriteReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryWriteReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryWriteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hive_.Destroy();
  _impl_.path_.Destroy();
  _impl_.key_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.stringvalue_.Destroy();
  _impl_.bytevalue_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegistryWriteReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryWriteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryWriteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hive_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.stringvalue_.ClearToEmpty();
  _impl_.bytevalue_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.qwordvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.qwordvalue_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryWriteReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Hive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryWriteReq.Hive"));
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryWriteReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryWriteReq.Key"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryWriteReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // string StringValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryWriteReq.StringValue"));
        } else
          goto handle_unusual;
        continue;
      // bytes ByteValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bytevalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DWordValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dwordvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 QWordValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.qwordvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryWriteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryWriteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hive().data(), static_cast<int>(this->_internal_hive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryWriteReq.Hive");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hive(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryWriteReq.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryWriteReq.Key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryWriteReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // string StringValue = 5;
  if (!this->_internal_stringvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryWriteReq.StringValue");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stringvalue(), target);
  }

  // bytes ByteValue = 6;
  if (!this->_internal_bytevalue().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_bytevalue(), target);
  }

  // uint32 DWordValue = 7;
  if (this->_internal_dwordvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dwordvalue(), target);
  }

  // uint64 QWordValue = 8;
  if (this->_internal_qwordvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_qwordvalue(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // uint32 Type = 10;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryWriteReq)
  return target;
}

size_t RegistryWriteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryWriteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hive());
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string StringValue = 5;
  if (!this->_internal_stringvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stringvalue());
  }

  // bytes ByteValue = 6;
  if (!this->_internal_bytevalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytevalue());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint64 QWordValue = 8;
  if (this->_internal_qwordvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_qwordvalue());
  }

  // uint32 DWordValue = 7;
  if (this->_internal_dwordvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dwordvalue());
  }

  // uint32 Type = 10;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryWriteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryWriteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryWriteReq::GetClassData() const { return &_class_data_; }


void RegistryWriteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryWriteReq*>(&to_msg);
  auto& from = static_cast<const RegistryWriteReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryWriteReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hive().empty()) {
    _this->_internal_set_hive(from._internal_hive());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_stringvalue().empty()) {
    _this->_internal_set_stringvalue(from._internal_stringvalue());
  }
  if (!from._internal_bytevalue().empty()) {
    _this->_internal_set_bytevalue(from._internal_bytevalue());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_qwordvalue() != 0) {
    _this->_internal_set_qwordvalue(from._internal_qwordvalue());
  }
  if (from._internal_dwordvalue() != 0) {
    _this->_internal_set_dwordvalue(from._internal_dwordvalue());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryWriteReq::CopyFrom(const RegistryWriteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryWriteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryWriteReq::IsInitialized() const {
  return true;
}

void RegistryWriteReq::InternalSwap(RegistryWriteReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hive_, lhs_arena,
      &other->_impl_.hive_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stringvalue_, lhs_arena,
      &other->_impl_.stringvalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bytevalue_, lhs_arena,
      &other->_impl_.bytevalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegistryWriteReq, _impl_.type_)
      + sizeof(RegistryWriteReq::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RegistryWriteReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryWriteReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[87]);
}

// ===================================================================

class RegistryWrite::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegistryWrite* msg);
};

const ::sliverpb::Response&
RegistryWrite::_Internal::response(const RegistryWrite* msg) {
  return *msg->_impl_.response_;
}
void RegistryWrite::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegistryWrite::RegistryWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryWrite)
}
RegistryWrite::RegistryWrite(const RegistryWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryWrite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryWrite)
}

inline void RegistryWrite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistryWrite::~RegistryWrite() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryWrite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegistryWrite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryWrite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryWrite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryWrite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryWrite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryWrite)
  return target;
}

size_t RegistryWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryWrite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryWrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryWrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryWrite::GetClassData() const { return &_class_data_; }


void RegistryWrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryWrite*>(&to_msg);
  auto& from = static_cast<const RegistryWrite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryWrite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryWrite::CopyFrom(const RegistryWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryWrite::IsInitialized() const {
  return true;
}

void RegistryWrite::InternalSwap(RegistryWrite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryWrite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[88]);
}

// ===================================================================

class RegistryCreateKeyReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegistryCreateKeyReq* msg);
};

const ::sliverpb::Request&
RegistryCreateKeyReq::_Internal::request(const RegistryCreateKeyReq* msg) {
  return *msg->_impl_.request_;
}
void RegistryCreateKeyReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegistryCreateKeyReq::RegistryCreateKeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryCreateKeyReq)
}
RegistryCreateKeyReq::RegistryCreateKeyReq(const RegistryCreateKeyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryCreateKeyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hive().empty()) {
    _this->_impl_.hive_.Set(from._internal_hive(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryCreateKeyReq)
}

inline void RegistryCreateKeyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistryCreateKeyReq::~RegistryCreateKeyReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryCreateKeyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryCreateKeyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hive_.Destroy();
  _impl_.path_.Destroy();
  _impl_.key_.Destroy();
  _impl_.hostname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegistryCreateKeyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryCreateKeyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryCreateKeyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hive_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryCreateKeyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Hive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryCreateKeyReq.Hive"));
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryCreateKeyReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryCreateKeyReq.Key"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryCreateKeyReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryCreateKeyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryCreateKeyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hive().data(), static_cast<int>(this->_internal_hive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryCreateKeyReq.Hive");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hive(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryCreateKeyReq.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryCreateKeyReq.Key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryCreateKeyReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryCreateKeyReq)
  return target;
}

size_t RegistryCreateKeyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryCreateKeyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hive());
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryCreateKeyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryCreateKeyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryCreateKeyReq::GetClassData() const { return &_class_data_; }


void RegistryCreateKeyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryCreateKeyReq*>(&to_msg);
  auto& from = static_cast<const RegistryCreateKeyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryCreateKeyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hive().empty()) {
    _this->_internal_set_hive(from._internal_hive());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryCreateKeyReq::CopyFrom(const RegistryCreateKeyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryCreateKeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryCreateKeyReq::IsInitialized() const {
  return true;
}

void RegistryCreateKeyReq::InternalSwap(RegistryCreateKeyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hive_, lhs_arena,
      &other->_impl_.hive_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryCreateKeyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[89]);
}

// ===================================================================

class RegistryCreateKey::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegistryCreateKey* msg);
};

const ::sliverpb::Response&
RegistryCreateKey::_Internal::response(const RegistryCreateKey* msg) {
  return *msg->_impl_.response_;
}
void RegistryCreateKey::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegistryCreateKey::RegistryCreateKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryCreateKey)
}
RegistryCreateKey::RegistryCreateKey(const RegistryCreateKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryCreateKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryCreateKey)
}

inline void RegistryCreateKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistryCreateKey::~RegistryCreateKey() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryCreateKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryCreateKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegistryCreateKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryCreateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryCreateKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryCreateKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryCreateKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryCreateKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryCreateKey)
  return target;
}

size_t RegistryCreateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryCreateKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryCreateKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryCreateKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryCreateKey::GetClassData() const { return &_class_data_; }


void RegistryCreateKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryCreateKey*>(&to_msg);
  auto& from = static_cast<const RegistryCreateKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryCreateKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryCreateKey::CopyFrom(const RegistryCreateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryCreateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryCreateKey::IsInitialized() const {
  return true;
}

void RegistryCreateKey::InternalSwap(RegistryCreateKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryCreateKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[90]);
}

// ===================================================================

class RegistryDeleteKeyReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegistryDeleteKeyReq* msg);
};

const ::sliverpb::Request&
RegistryDeleteKeyReq::_Internal::request(const RegistryDeleteKeyReq* msg) {
  return *msg->_impl_.request_;
}
void RegistryDeleteKeyReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegistryDeleteKeyReq::RegistryDeleteKeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryDeleteKeyReq)
}
RegistryDeleteKeyReq::RegistryDeleteKeyReq(const RegistryDeleteKeyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryDeleteKeyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hive().empty()) {
    _this->_impl_.hive_.Set(from._internal_hive(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryDeleteKeyReq)
}

inline void RegistryDeleteKeyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistryDeleteKeyReq::~RegistryDeleteKeyReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryDeleteKeyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryDeleteKeyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hive_.Destroy();
  _impl_.path_.Destroy();
  _impl_.key_.Destroy();
  _impl_.hostname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegistryDeleteKeyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryDeleteKeyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryDeleteKeyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hive_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryDeleteKeyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Hive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryDeleteKeyReq.Hive"));
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryDeleteKeyReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryDeleteKeyReq.Key"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryDeleteKeyReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryDeleteKeyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryDeleteKeyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hive().data(), static_cast<int>(this->_internal_hive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryDeleteKeyReq.Hive");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hive(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryDeleteKeyReq.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryDeleteKeyReq.Key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryDeleteKeyReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryDeleteKeyReq)
  return target;
}

size_t RegistryDeleteKeyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryDeleteKeyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hive());
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryDeleteKeyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryDeleteKeyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryDeleteKeyReq::GetClassData() const { return &_class_data_; }


void RegistryDeleteKeyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryDeleteKeyReq*>(&to_msg);
  auto& from = static_cast<const RegistryDeleteKeyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryDeleteKeyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hive().empty()) {
    _this->_internal_set_hive(from._internal_hive());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryDeleteKeyReq::CopyFrom(const RegistryDeleteKeyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryDeleteKeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryDeleteKeyReq::IsInitialized() const {
  return true;
}

void RegistryDeleteKeyReq::InternalSwap(RegistryDeleteKeyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hive_, lhs_arena,
      &other->_impl_.hive_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryDeleteKeyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[91]);
}

// ===================================================================

class RegistryDeleteKey::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegistryDeleteKey* msg);
};

const ::sliverpb::Response&
RegistryDeleteKey::_Internal::response(const RegistryDeleteKey* msg) {
  return *msg->_impl_.response_;
}
void RegistryDeleteKey::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegistryDeleteKey::RegistryDeleteKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryDeleteKey)
}
RegistryDeleteKey::RegistryDeleteKey(const RegistryDeleteKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryDeleteKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryDeleteKey)
}

inline void RegistryDeleteKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistryDeleteKey::~RegistryDeleteKey() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryDeleteKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryDeleteKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegistryDeleteKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryDeleteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryDeleteKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryDeleteKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryDeleteKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryDeleteKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryDeleteKey)
  return target;
}

size_t RegistryDeleteKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryDeleteKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryDeleteKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryDeleteKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryDeleteKey::GetClassData() const { return &_class_data_; }


void RegistryDeleteKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryDeleteKey*>(&to_msg);
  auto& from = static_cast<const RegistryDeleteKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryDeleteKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryDeleteKey::CopyFrom(const RegistryDeleteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryDeleteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryDeleteKey::IsInitialized() const {
  return true;
}

void RegistryDeleteKey::InternalSwap(RegistryDeleteKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryDeleteKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[92]);
}

// ===================================================================

class RegistrySubKeyListReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegistrySubKeyListReq* msg);
};

const ::sliverpb::Request&
RegistrySubKeyListReq::_Internal::request(const RegistrySubKeyListReq* msg) {
  return *msg->_impl_.request_;
}
void RegistrySubKeyListReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegistrySubKeyListReq::RegistrySubKeyListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistrySubKeyListReq)
}
RegistrySubKeyListReq::RegistrySubKeyListReq(const RegistrySubKeyListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistrySubKeyListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hive().empty()) {
    _this->_impl_.hive_.Set(from._internal_hive(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistrySubKeyListReq)
}

inline void RegistrySubKeyListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistrySubKeyListReq::~RegistrySubKeyListReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistrySubKeyListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistrySubKeyListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hive_.Destroy();
  _impl_.path_.Destroy();
  _impl_.hostname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegistrySubKeyListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistrySubKeyListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistrySubKeyListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hive_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrySubKeyListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Hive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistrySubKeyListReq.Hive"));
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistrySubKeyListReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistrySubKeyListReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistrySubKeyListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistrySubKeyListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hive().data(), static_cast<int>(this->_internal_hive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistrySubKeyListReq.Hive");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hive(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistrySubKeyListReq.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistrySubKeyListReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistrySubKeyListReq)
  return target;
}

size_t RegistrySubKeyListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistrySubKeyListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hive());
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistrySubKeyListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistrySubKeyListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistrySubKeyListReq::GetClassData() const { return &_class_data_; }


void RegistrySubKeyListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistrySubKeyListReq*>(&to_msg);
  auto& from = static_cast<const RegistrySubKeyListReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistrySubKeyListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hive().empty()) {
    _this->_internal_set_hive(from._internal_hive());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistrySubKeyListReq::CopyFrom(const RegistrySubKeyListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistrySubKeyListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrySubKeyListReq::IsInitialized() const {
  return true;
}

void RegistrySubKeyListReq::InternalSwap(RegistrySubKeyListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hive_, lhs_arena,
      &other->_impl_.hive_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrySubKeyListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[93]);
}

// ===================================================================

class RegistrySubKeyList::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegistrySubKeyList* msg);
};

const ::sliverpb::Response&
RegistrySubKeyList::_Internal::response(const RegistrySubKeyList* msg) {
  return *msg->_impl_.response_;
}
void RegistrySubKeyList::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegistrySubKeyList::RegistrySubKeyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistrySubKeyList)
}
RegistrySubKeyList::RegistrySubKeyList(const RegistrySubKeyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistrySubKeyList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subkeys_){from._impl_.subkeys_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistrySubKeyList)
}

inline void RegistrySubKeyList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subkeys_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistrySubKeyList::~RegistrySubKeyList() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistrySubKeyList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistrySubKeyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subkeys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegistrySubKeyList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistrySubKeyList::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistrySubKeyList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subkeys_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrySubKeyList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string Subkeys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistrySubKeyList.Subkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistrySubKeyList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistrySubKeyList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Subkeys = 1;
  for (int i = 0, n = this->_internal_subkeys_size(); i < n; i++) {
    const auto& s = this->_internal_subkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistrySubKeyList.Subkeys");
    target = stream->WriteString(1, s, target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistrySubKeyList)
  return target;
}

size_t RegistrySubKeyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistrySubKeyList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Subkeys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.subkeys_.size());
  for (int i = 0, n = _impl_.subkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.subkeys_.Get(i));
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistrySubKeyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistrySubKeyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistrySubKeyList::GetClassData() const { return &_class_data_; }


void RegistrySubKeyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistrySubKeyList*>(&to_msg);
  auto& from = static_cast<const RegistrySubKeyList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistrySubKeyList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subkeys_.MergeFrom(from._impl_.subkeys_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistrySubKeyList::CopyFrom(const RegistrySubKeyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistrySubKeyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrySubKeyList::IsInitialized() const {
  return true;
}

void RegistrySubKeyList::InternalSwap(RegistrySubKeyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subkeys_.InternalSwap(&other->_impl_.subkeys_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrySubKeyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[94]);
}

// ===================================================================

class RegistryListValuesReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegistryListValuesReq* msg);
};

const ::sliverpb::Request&
RegistryListValuesReq::_Internal::request(const RegistryListValuesReq* msg) {
  return *msg->_impl_.request_;
}
void RegistryListValuesReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegistryListValuesReq::RegistryListValuesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryListValuesReq)
}
RegistryListValuesReq::RegistryListValuesReq(const RegistryListValuesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryListValuesReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hive().empty()) {
    _this->_impl_.hive_.Set(from._internal_hive(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryListValuesReq)
}

inline void RegistryListValuesReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hive_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegistryListValuesReq::~RegistryListValuesReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryListValuesReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryListValuesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hive_.Destroy();
  _impl_.path_.Destroy();
  _impl_.hostname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegistryListValuesReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryListValuesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryListValuesReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hive_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryListValuesReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Hive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryListValuesReq.Hive"));
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryListValuesReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryListValuesReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryListValuesReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryListValuesReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hive().data(), static_cast<int>(this->_internal_hive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryListValuesReq.Hive");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hive(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryListValuesReq.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryListValuesReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryListValuesReq)
  return target;
}

size_t RegistryListValuesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryListValuesReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hive = 1;
  if (!this->_internal_hive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hive());
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Hostname = 4;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryListValuesReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryListValuesReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryListValuesReq::GetClassData() const { return &_class_data_; }


void RegistryListValuesReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryListValuesReq*>(&to_msg);
  auto& from = static_cast<const RegistryListValuesReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryListValuesReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hive().empty()) {
    _this->_internal_set_hive(from._internal_hive());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryListValuesReq::CopyFrom(const RegistryListValuesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryListValuesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryListValuesReq::IsInitialized() const {
  return true;
}

void RegistryListValuesReq::InternalSwap(RegistryListValuesReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hive_, lhs_arena,
      &other->_impl_.hive_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryListValuesReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[95]);
}

// ===================================================================

class RegistryValuesList::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegistryValuesList* msg);
};

const ::sliverpb::Response&
RegistryValuesList::_Internal::response(const RegistryValuesList* msg) {
  return *msg->_impl_.response_;
}
void RegistryValuesList::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegistryValuesList::RegistryValuesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegistryValuesList)
}
RegistryValuesList::RegistryValuesList(const RegistryValuesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistryValuesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuenames_){from._impl_.valuenames_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegistryValuesList)
}

inline void RegistryValuesList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuenames_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistryValuesList::~RegistryValuesList() {
  // @@protoc_insertion_point(destructor:sliverpb.RegistryValuesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistryValuesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuenames_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegistryValuesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistryValuesList::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegistryValuesList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valuenames_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistryValuesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ValueNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_valuenames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegistryValuesList.ValueNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistryValuesList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegistryValuesList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ValueNames = 1;
  for (int i = 0, n = this->_internal_valuenames_size(); i < n; i++) {
    const auto& s = this->_internal_valuenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegistryValuesList.ValueNames");
    target = stream->WriteString(1, s, target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegistryValuesList)
  return target;
}

size_t RegistryValuesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegistryValuesList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ValueNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.valuenames_.size());
  for (int i = 0, n = _impl_.valuenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.valuenames_.Get(i));
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistryValuesList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistryValuesList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistryValuesList::GetClassData() const { return &_class_data_; }


void RegistryValuesList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistryValuesList*>(&to_msg);
  auto& from = static_cast<const RegistryValuesList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegistryValuesList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.valuenames_.MergeFrom(from._impl_.valuenames_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistryValuesList::CopyFrom(const RegistryValuesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegistryValuesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistryValuesList::IsInitialized() const {
  return true;
}

void RegistryValuesList::InternalSwap(RegistryValuesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.valuenames_.InternalSwap(&other->_impl_.valuenames_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistryValuesList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[96]);
}

// ===================================================================

class Tunnel::_Internal {
 public:
};

Tunnel::Tunnel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Tunnel)
}
Tunnel::Tunnel(const Tunnel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tunnel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tunnelid_ = from._impl_.tunnelid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.Tunnel)
}

inline void Tunnel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tunnel::~Tunnel() {
  // @@protoc_insertion_point(destructor:sliverpb.Tunnel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tunnel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void Tunnel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tunnel::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Tunnel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  _impl_.tunnelid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tunnel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SessionID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Tunnel.SessionID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tunnel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Tunnel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // string SessionID = 9;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Tunnel.SessionID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Tunnel)
  return target;
}

size_t Tunnel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Tunnel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionID = 9;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tunnel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tunnel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tunnel::GetClassData() const { return &_class_data_; }


void Tunnel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tunnel*>(&to_msg);
  auto& from = static_cast<const Tunnel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Tunnel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tunnel::CopyFrom(const Tunnel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Tunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tunnel::IsInitialized() const {
  return true;
}

void Tunnel::InternalSwap(Tunnel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  swap(_impl_.tunnelid_, other->_impl_.tunnelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tunnel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[97]);
}

// ===================================================================

class TunnelData::_Internal {
 public:
  static const ::sliverpb::RPortfwd& rportfwd(const TunnelData* msg);
};

const ::sliverpb::RPortfwd&
TunnelData::_Internal::rportfwd(const TunnelData* msg) {
  return *msg->_impl_.rportfwd_;
}
TunnelData::TunnelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.TunnelData)
}
TunnelData::TunnelData(const TunnelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.rportfwd_){nullptr}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.ack_){}
    , decltype(_impl_.tunnelid_){}
    , decltype(_impl_.closed_){}
    , decltype(_impl_.resend_){}
    , decltype(_impl_.createreverse_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rportfwd()) {
    _this->_impl_.rportfwd_ = new ::sliverpb::RPortfwd(*from._impl_.rportfwd_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.createreverse_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.createreverse_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.TunnelData)
}

inline void TunnelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.rportfwd_){nullptr}
    , decltype(_impl_.sequence_){uint64_t{0u}}
    , decltype(_impl_.ack_){uint64_t{0u}}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , decltype(_impl_.closed_){false}
    , decltype(_impl_.resend_){false}
    , decltype(_impl_.createreverse_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TunnelData::~TunnelData() {
  // @@protoc_insertion_point(destructor:sliverpb.TunnelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.sessionid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rportfwd_;
}

void TunnelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelData::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.TunnelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.sessionid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rportfwd_ != nullptr) {
    delete _impl_.rportfwd_;
  }
  _impl_.rportfwd_ = nullptr;
  ::memset(&_impl_.sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.createreverse_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.createreverse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Closed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 Sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 Ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Resend = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.resend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CreateReverse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.createreverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.RPortfwd rportfwd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rportfwd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SessionID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.TunnelData.SessionID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TunnelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.TunnelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // bool Closed = 2;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_closed(), target);
  }

  // uint64 Sequence = 3;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence(), target);
  }

  // uint64 Ack = 4;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ack(), target);
  }

  // bool Resend = 5;
  if (this->_internal_resend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_resend(), target);
  }

  // bool CreateReverse = 6;
  if (this->_internal_createreverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_createreverse(), target);
  }

  // .sliverpb.RPortfwd rportfwd = 7;
  if (this->_internal_has_rportfwd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::rportfwd(this),
        _Internal::rportfwd(this).GetCachedSize(), target, stream);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // string SessionID = 9;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.TunnelData.SessionID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.TunnelData)
  return target;
}

size_t TunnelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.TunnelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string SessionID = 9;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .sliverpb.RPortfwd rportfwd = 7;
  if (this->_internal_has_rportfwd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rportfwd_);
  }

  // uint64 Sequence = 3;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());
  }

  // uint64 Ack = 4;
  if (this->_internal_ack() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ack());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  // bool Closed = 2;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  // bool Resend = 5;
  if (this->_internal_resend() != 0) {
    total_size += 1 + 1;
  }

  // bool CreateReverse = 6;
  if (this->_internal_createreverse() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelData::GetClassData() const { return &_class_data_; }


void TunnelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelData*>(&to_msg);
  auto& from = static_cast<const TunnelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.TunnelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_has_rportfwd()) {
    _this->_internal_mutable_rportfwd()->::sliverpb::RPortfwd::MergeFrom(
        from._internal_rportfwd());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  if (from._internal_closed() != 0) {
    _this->_internal_set_closed(from._internal_closed());
  }
  if (from._internal_resend() != 0) {
    _this->_internal_set_resend(from._internal_resend());
  }
  if (from._internal_createreverse() != 0) {
    _this->_internal_set_createreverse(from._internal_createreverse());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelData::CopyFrom(const TunnelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.TunnelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelData::IsInitialized() const {
  return true;
}

void TunnelData::InternalSwap(TunnelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelData, _impl_.createreverse_)
      + sizeof(TunnelData::_impl_.createreverse_)
      - PROTOBUF_FIELD_OFFSET(TunnelData, _impl_.rportfwd_)>(
          reinterpret_cast<char*>(&_impl_.rportfwd_),
          reinterpret_cast<char*>(&other->_impl_.rportfwd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[98]);
}

// ===================================================================

class ShellReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ShellReq* msg);
};

const ::sliverpb::Request&
ShellReq::_Internal::request(const ShellReq* msg) {
  return *msg->_impl_.request_;
}
void ShellReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ShellReq::ShellReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ShellReq)
}
ShellReq::ShellReq(const ShellReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShellReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.enablepty_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.enablepty_, &from._impl_.enablepty_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tunnelid_) -
    reinterpret_cast<char*>(&_impl_.enablepty_)) + sizeof(_impl_.tunnelid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.ShellReq)
}

inline void ShellReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.enablepty_){false}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShellReq::~ShellReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ShellReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ShellReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShellReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ShellReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.enablepty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tunnelid_) -
      reinterpret_cast<char*>(&_impl_.enablepty_)) + sizeof(_impl_.tunnelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ShellReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // bool EnablePTY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enablepty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ShellReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ShellReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool EnablePTY = 2;
  if (this->_internal_enablepty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enablepty(), target);
  }

  // uint32 Pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ShellReq)
  return target;
}

size_t ShellReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ShellReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool EnablePTY = 2;
  if (this->_internal_enablepty() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShellReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShellReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShellReq::GetClassData() const { return &_class_data_; }


void ShellReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShellReq*>(&to_msg);
  auto& from = static_cast<const ShellReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ShellReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_enablepty() != 0) {
    _this->_internal_set_enablepty(from._internal_enablepty());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShellReq::CopyFrom(const ShellReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ShellReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellReq::IsInitialized() const {
  return true;
}

void ShellReq::InternalSwap(ShellReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellReq, _impl_.tunnelid_)
      + sizeof(ShellReq::_impl_.tunnelid_)
      - PROTOBUF_FIELD_OFFSET(ShellReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[99]);
}

// ===================================================================

class Shell::_Internal {
 public:
  static const ::sliverpb::Response& response(const Shell* msg);
};

const ::sliverpb::Response&
Shell::_Internal::response(const Shell* msg) {
  return *msg->_impl_.response_;
}
void Shell::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Shell::Shell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Shell)
}
Shell::Shell(const Shell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Shell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.enablepty_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.enablepty_, &from._impl_.enablepty_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tunnelid_) -
    reinterpret_cast<char*>(&_impl_.enablepty_)) + sizeof(_impl_.tunnelid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Shell)
}

inline void Shell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.enablepty_){false}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Shell::~Shell() {
  // @@protoc_insertion_point(destructor:sliverpb.Shell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Shell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shell::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Shell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.enablepty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tunnelid_) -
      reinterpret_cast<char*>(&_impl_.enablepty_)) + sizeof(_impl_.tunnelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Shell.Path"));
        } else
          goto handle_unusual;
        continue;
      // bool EnablePTY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enablepty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Shell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Shell.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool EnablePTY = 2;
  if (this->_internal_enablepty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enablepty(), target);
  }

  // uint32 Pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Shell)
  return target;
}

size_t Shell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Shell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // bool EnablePTY = 2;
  if (this->_internal_enablepty() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Shell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shell::GetClassData() const { return &_class_data_; }


void Shell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Shell*>(&to_msg);
  auto& from = static_cast<const Shell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Shell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_enablepty() != 0) {
    _this->_internal_set_enablepty(from._internal_enablepty());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shell::CopyFrom(const Shell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Shell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shell::IsInitialized() const {
  return true;
}

void Shell::InternalSwap(Shell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shell, _impl_.tunnelid_)
      + sizeof(Shell::_impl_.tunnelid_)
      - PROTOBUF_FIELD_OFFSET(Shell, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[100]);
}

// ===================================================================

class PortfwdReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PortfwdReq* msg);
};

const ::sliverpb::Request&
PortfwdReq::_Internal::request(const PortfwdReq* msg) {
  return *msg->_impl_.request_;
}
void PortfwdReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PortfwdReq::PortfwdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PortfwdReq)
}
PortfwdReq::PortfwdReq(const PortfwdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortfwdReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tunnelid_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.PortfwdReq)
}

inline void PortfwdReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortfwdReq::~PortfwdReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PortfwdReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortfwdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PortfwdReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortfwdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PortfwdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tunnelid_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfwdReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.PortfwdReq.Host"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortfwdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PortfwdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocol(), target);
  }

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.PortfwdReq.Host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PortfwdReq)
  return target;
}

size_t PortfwdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PortfwdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortfwdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortfwdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortfwdReq::GetClassData() const { return &_class_data_; }


void PortfwdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortfwdReq*>(&to_msg);
  auto& from = static_cast<const PortfwdReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PortfwdReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortfwdReq::CopyFrom(const PortfwdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PortfwdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfwdReq::IsInitialized() const {
  return true;
}

void PortfwdReq::InternalSwap(PortfwdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortfwdReq, _impl_.tunnelid_)
      + sizeof(PortfwdReq::_impl_.tunnelid_)
      - PROTOBUF_FIELD_OFFSET(PortfwdReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfwdReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[101]);
}

// ===================================================================

class Portfwd::_Internal {
 public:
  static const ::sliverpb::Response& response(const Portfwd* msg);
};

const ::sliverpb::Response&
Portfwd::_Internal::response(const Portfwd* msg) {
  return *msg->_impl_.response_;
}
void Portfwd::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Portfwd::Portfwd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Portfwd)
}
Portfwd::Portfwd(const Portfwd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Portfwd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tunnelid_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.Portfwd)
}

inline void Portfwd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Portfwd::~Portfwd() {
  // @@protoc_insertion_point(destructor:sliverpb.Portfwd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Portfwd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Portfwd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Portfwd::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Portfwd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tunnelid_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Portfwd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Portfwd.Host"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Portfwd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Portfwd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocol(), target);
  }

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Portfwd.Host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Portfwd)
  return target;
}

size_t Portfwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Portfwd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Portfwd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Portfwd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Portfwd::GetClassData() const { return &_class_data_; }


void Portfwd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Portfwd*>(&to_msg);
  auto& from = static_cast<const Portfwd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Portfwd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Portfwd::CopyFrom(const Portfwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Portfwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Portfwd::IsInitialized() const {
  return true;
}

void Portfwd::InternalSwap(Portfwd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Portfwd, _impl_.tunnelid_)
      + sizeof(Portfwd::_impl_.tunnelid_)
      - PROTOBUF_FIELD_OFFSET(Portfwd, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Portfwd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[102]);
}

// ===================================================================

class Socks::_Internal {
 public:
};

Socks::Socks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Socks)
}
Socks::Socks(const Socks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Socks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tunnelid_ = from._impl_.tunnelid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.Socks)
}

inline void Socks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Socks::~Socks() {
  // @@protoc_insertion_point(destructor:sliverpb.Socks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Socks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void Socks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Socks::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Socks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  _impl_.tunnelid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Socks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SessionID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.Socks.SessionID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Socks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Socks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // string SessionID = 9;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.Socks.SessionID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Socks)
  return target;
}

size_t Socks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Socks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionID = 9;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Socks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Socks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Socks::GetClassData() const { return &_class_data_; }


void Socks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Socks*>(&to_msg);
  auto& from = static_cast<const Socks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Socks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Socks::CopyFrom(const Socks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Socks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Socks::IsInitialized() const {
  return true;
}

void Socks::InternalSwap(Socks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  swap(_impl_.tunnelid_, other->_impl_.tunnelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Socks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[103]);
}

// ===================================================================

class SocksData::_Internal {
 public:
  static const ::sliverpb::Request& request(const SocksData* msg);
};

const ::sliverpb::Request&
SocksData::_Internal::request(const SocksData* msg) {
  return *msg->_impl_.request_;
}
void SocksData::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
SocksData::SocksData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SocksData)
}
SocksData::SocksData(const SocksData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocksData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.tunnelid_){}
    , decltype(_impl_.closeconn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.closeconn_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.closeconn_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.SocksData)
}

inline void SocksData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.sequence_){uint64_t{0u}}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , decltype(_impl_.closeconn_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SocksData::~SocksData() {
  // @@protoc_insertion_point(destructor:sliverpb.SocksData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocksData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void SocksData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocksData::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SocksData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.closeconn_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.closeconn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocksData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CloseConn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.closeconn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SocksData.Username"));
        } else
          goto handle_unusual;
        continue;
      // string Password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SocksData.Password"));
        } else
          goto handle_unusual;
        continue;
      // uint64 Sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocksData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SocksData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // bool CloseConn = 2;
  if (this->_internal_closeconn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_closeconn(), target);
  }

  // string Username = 3;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SocksData.Username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string Password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SocksData.Password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // uint64 Sequence = 5;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sequence(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SocksData)
  return target;
}

size_t SocksData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SocksData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string Username = 3;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint64 Sequence = 5;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  // bool CloseConn = 2;
  if (this->_internal_closeconn() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocksData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocksData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocksData::GetClassData() const { return &_class_data_; }


void SocksData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocksData*>(&to_msg);
  auto& from = static_cast<const SocksData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SocksData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  if (from._internal_closeconn() != 0) {
    _this->_internal_set_closeconn(from._internal_closeconn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocksData::CopyFrom(const SocksData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SocksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocksData::IsInitialized() const {
  return true;
}

void SocksData::InternalSwap(SocksData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocksData, _impl_.closeconn_)
      + sizeof(SocksData::_impl_.closeconn_)
      - PROTOBUF_FIELD_OFFSET(SocksData, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocksData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[104]);
}

// ===================================================================

class PivotStartListenerReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PivotStartListenerReq* msg);
};

const ::sliverpb::Request&
PivotStartListenerReq::_Internal::request(const PivotStartListenerReq* msg) {
  return *msg->_impl_.request_;
}
void PivotStartListenerReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PivotStartListenerReq::PivotStartListenerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotStartListenerReq)
}
PivotStartListenerReq::PivotStartListenerReq(const PivotStartListenerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotStartListenerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.bindaddress_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bindaddress().empty()) {
    _this->_impl_.bindaddress_.Set(from._internal_bindaddress(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotStartListenerReq)
}

inline void PivotStartListenerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){arena}
    , decltype(_impl_.bindaddress_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotStartListenerReq::~PivotStartListenerReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotStartListenerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotStartListenerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_.~RepeatedField();
  _impl_.bindaddress_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PivotStartListenerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotStartListenerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotStartListenerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  _impl_.bindaddress_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotStartListenerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.PivotType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sliverpb::PivotType>(val));
        } else
          goto handle_unusual;
        continue;
      // string BindAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bindaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.PivotStartListenerReq.BindAddress"));
        } else
          goto handle_unusual;
        continue;
      // repeated bool Options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_options(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_options(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotStartListenerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotStartListenerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.PivotType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string BindAddress = 2;
  if (!this->_internal_bindaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bindaddress().data(), static_cast<int>(this->_internal_bindaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.PivotStartListenerReq.BindAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bindaddress(), target);
  }

  // repeated bool Options = 3;
  if (this->_internal_options_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_options(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotStartListenerReq)
  return target;
}

size_t PivotStartListenerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotStartListenerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool Options = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_options_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string BindAddress = 2;
  if (!this->_internal_bindaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bindaddress());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // .sliverpb.PivotType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotStartListenerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotStartListenerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotStartListenerReq::GetClassData() const { return &_class_data_; }


void PivotStartListenerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotStartListenerReq*>(&to_msg);
  auto& from = static_cast<const PivotStartListenerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotStartListenerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if (!from._internal_bindaddress().empty()) {
    _this->_internal_set_bindaddress(from._internal_bindaddress());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotStartListenerReq::CopyFrom(const PivotStartListenerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotStartListenerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotStartListenerReq::IsInitialized() const {
  return true;
}

void PivotStartListenerReq::InternalSwap(PivotStartListenerReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bindaddress_, lhs_arena,
      &other->_impl_.bindaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PivotStartListenerReq, _impl_.type_)
      + sizeof(PivotStartListenerReq::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PivotStartListenerReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotStartListenerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[105]);
}

// ===================================================================

class PivotStopListenerReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PivotStopListenerReq* msg);
};

const ::sliverpb::Request&
PivotStopListenerReq::_Internal::request(const PivotStopListenerReq* msg) {
  return *msg->_impl_.request_;
}
void PivotStopListenerReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PivotStopListenerReq::PivotStopListenerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotStopListenerReq)
}
PivotStopListenerReq::PivotStopListenerReq(const PivotStopListenerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotStopListenerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotStopListenerReq)
}

inline void PivotStopListenerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PivotStopListenerReq::~PivotStopListenerReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotStopListenerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotStopListenerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PivotStopListenerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotStopListenerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotStopListenerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotStopListenerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotStopListenerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotStopListenerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotStopListenerReq)
  return target;
}

size_t PivotStopListenerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotStopListenerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotStopListenerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotStopListenerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotStopListenerReq::GetClassData() const { return &_class_data_; }


void PivotStopListenerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotStopListenerReq*>(&to_msg);
  auto& from = static_cast<const PivotStopListenerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotStopListenerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotStopListenerReq::CopyFrom(const PivotStopListenerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotStopListenerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotStopListenerReq::IsInitialized() const {
  return true;
}

void PivotStopListenerReq::InternalSwap(PivotStopListenerReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PivotStopListenerReq, _impl_.id_)
      + sizeof(PivotStopListenerReq::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PivotStopListenerReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotStopListenerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[106]);
}

// ===================================================================

class PivotListener::_Internal {
 public:
  static const ::sliverpb::Response& response(const PivotListener* msg);
};

const ::sliverpb::Response&
PivotListener::_Internal::response(const PivotListener* msg) {
  return *msg->_impl_.response_;
}
void PivotListener::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
PivotListener::PivotListener(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotListener)
}
PivotListener::PivotListener(const PivotListener& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotListener* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pivots_){from._impl_.pivots_}
    , decltype(_impl_.bindaddress_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bindaddress().empty()) {
    _this->_impl_.bindaddress_.Set(from._internal_bindaddress(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotListener)
}

inline void PivotListener::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pivots_){arena}
    , decltype(_impl_.bindaddress_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotListener::~PivotListener() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotListener)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotListener::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pivots_.~RepeatedPtrField();
  _impl_.bindaddress_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void PivotListener::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotListener::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotListener)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pivots_.Clear();
  _impl_.bindaddress_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotListener::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.PivotType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sliverpb::PivotType>(val));
        } else
          goto handle_unusual;
        continue;
      // string BindAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bindaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.PivotListener.BindAddress"));
        } else
          goto handle_unusual;
        continue;
      // repeated .sliverpb.NetConnPivot Pivots = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pivots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotListener::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotListener)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .sliverpb.PivotType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string BindAddress = 3;
  if (!this->_internal_bindaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bindaddress().data(), static_cast<int>(this->_internal_bindaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.PivotListener.BindAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bindaddress(), target);
  }

  // repeated .sliverpb.NetConnPivot Pivots = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pivots_size()); i < n; i++) {
    const auto& repfield = this->_internal_pivots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotListener)
  return target;
}

size_t PivotListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotListener)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.NetConnPivot Pivots = 4;
  total_size += 1UL * this->_internal_pivots_size();
  for (const auto& msg : this->_impl_.pivots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string BindAddress = 3;
  if (!this->_internal_bindaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bindaddress());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .sliverpb.PivotType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotListener::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotListener::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotListener::GetClassData() const { return &_class_data_; }


void PivotListener::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotListener*>(&to_msg);
  auto& from = static_cast<const PivotListener&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotListener)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pivots_.MergeFrom(from._impl_.pivots_);
  if (!from._internal_bindaddress().empty()) {
    _this->_internal_set_bindaddress(from._internal_bindaddress());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotListener::CopyFrom(const PivotListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotListener::IsInitialized() const {
  return true;
}

void PivotListener::InternalSwap(PivotListener* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pivots_.InternalSwap(&other->_impl_.pivots_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bindaddress_, lhs_arena,
      &other->_impl_.bindaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PivotListener, _impl_.type_)
      + sizeof(PivotListener::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PivotListener, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotListener::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[107]);
}

// ===================================================================

class PivotHello::_Internal {
 public:
};

PivotHello::PivotHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotHello)
}
PivotHello::PivotHello(const PivotHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publickey_){}
    , decltype(_impl_.publickeysignature_){}
    , decltype(_impl_.sessionkey_){}
    , decltype(_impl_.peerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publickey().empty()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.publickeysignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickeysignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publickeysignature().empty()) {
    _this->_impl_.publickeysignature_.Set(from._internal_publickeysignature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sessionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionkey().empty()) {
    _this->_impl_.sessionkey_.Set(from._internal_sessionkey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.peerid_ = from._impl_.peerid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotHello)
}

inline void PivotHello::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publickey_){}
    , decltype(_impl_.publickeysignature_){}
    , decltype(_impl_.sessionkey_){}
    , decltype(_impl_.peerid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.publickeysignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickeysignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotHello::~PivotHello() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publickey_.Destroy();
  _impl_.publickeysignature_.Destroy();
  _impl_.sessionkey_.Destroy();
}

void PivotHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotHello::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publickey_.ClearToEmpty();
  _impl_.publickeysignature_.ClearToEmpty();
  _impl_.sessionkey_.ClearToEmpty();
  _impl_.peerid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes PublicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PeerID = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PublicKeySignature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_publickeysignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.PivotHello.PublicKeySignature"));
        } else
          goto handle_unusual;
        continue;
      // bytes SessionKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sessionkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes PublicKey = 1;
  if (!this->_internal_publickey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  // int64 PeerID = 2 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_peerid(), target);
  }

  // string PublicKeySignature = 3;
  if (!this->_internal_publickeysignature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickeysignature().data(), static_cast<int>(this->_internal_publickeysignature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.PivotHello.PublicKeySignature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_publickeysignature(), target);
  }

  // bytes SessionKey = 4;
  if (!this->_internal_sessionkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sessionkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotHello)
  return target;
}

size_t PivotHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PublicKey = 1;
  if (!this->_internal_publickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  // string PublicKeySignature = 3;
  if (!this->_internal_publickeysignature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickeysignature());
  }

  // bytes SessionKey = 4;
  if (!this->_internal_sessionkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sessionkey());
  }

  // int64 PeerID = 2 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotHello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotHello::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotHello::GetClassData() const { return &_class_data_; }


void PivotHello::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotHello*>(&to_msg);
  auto& from = static_cast<const PivotHello&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotHello)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_publickey().empty()) {
    _this->_internal_set_publickey(from._internal_publickey());
  }
  if (!from._internal_publickeysignature().empty()) {
    _this->_internal_set_publickeysignature(from._internal_publickeysignature());
  }
  if (!from._internal_sessionkey().empty()) {
    _this->_internal_set_sessionkey(from._internal_sessionkey());
  }
  if (from._internal_peerid() != 0) {
    _this->_internal_set_peerid(from._internal_peerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotHello::CopyFrom(const PivotHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotHello::IsInitialized() const {
  return true;
}

void PivotHello::InternalSwap(PivotHello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickeysignature_, lhs_arena,
      &other->_impl_.publickeysignature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionkey_, lhs_arena,
      &other->_impl_.sessionkey_, rhs_arena
  );
  swap(_impl_.peerid_, other->_impl_.peerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotHello::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[108]);
}

// ===================================================================

class PivotServerKeyExchange::_Internal {
 public:
};

PivotServerKeyExchange::PivotServerKeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotServerKeyExchange)
}
PivotServerKeyExchange::PivotServerKeyExchange(const PivotServerKeyExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotServerKeyExchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionkey_){}
    , decltype(_impl_.originid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionkey().empty()) {
    _this->_impl_.sessionkey_.Set(from._internal_sessionkey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.originid_ = from._impl_.originid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotServerKeyExchange)
}

inline void PivotServerKeyExchange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionkey_){}
    , decltype(_impl_.originid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotServerKeyExchange::~PivotServerKeyExchange() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotServerKeyExchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotServerKeyExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionkey_.Destroy();
}

void PivotServerKeyExchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotServerKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotServerKeyExchange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionkey_.ClearToEmpty();
  _impl_.originid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotServerKeyExchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 OriginID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.originid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SessionKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sessionkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotServerKeyExchange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotServerKeyExchange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 OriginID = 1;
  if (this->_internal_originid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_originid(), target);
  }

  // bytes SessionKey = 2;
  if (!this->_internal_sessionkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sessionkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotServerKeyExchange)
  return target;
}

size_t PivotServerKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotServerKeyExchange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SessionKey = 2;
  if (!this->_internal_sessionkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sessionkey());
  }

  // int64 OriginID = 1;
  if (this->_internal_originid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotServerKeyExchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotServerKeyExchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotServerKeyExchange::GetClassData() const { return &_class_data_; }


void PivotServerKeyExchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotServerKeyExchange*>(&to_msg);
  auto& from = static_cast<const PivotServerKeyExchange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotServerKeyExchange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionkey().empty()) {
    _this->_internal_set_sessionkey(from._internal_sessionkey());
  }
  if (from._internal_originid() != 0) {
    _this->_internal_set_originid(from._internal_originid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotServerKeyExchange::CopyFrom(const PivotServerKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotServerKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotServerKeyExchange::IsInitialized() const {
  return true;
}

void PivotServerKeyExchange::InternalSwap(PivotServerKeyExchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionkey_, lhs_arena,
      &other->_impl_.sessionkey_, rhs_arena
  );
  swap(_impl_.originid_, other->_impl_.originid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotServerKeyExchange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[109]);
}

// ===================================================================

class PivotPeer::_Internal {
 public:
};

PivotPeer::PivotPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotPeer)
}
PivotPeer::PivotPeer(const PivotPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotPeer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.peerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.peerid_ = from._impl_.peerid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotPeer)
}

inline void PivotPeer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.peerid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotPeer::~PivotPeer() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotPeer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotPeer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PivotPeer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotPeer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.peerid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotPeer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 PeerID = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.PivotPeer.Name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotPeer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotPeer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PeerID = 1 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_peerid(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.PivotPeer.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotPeer)
  return target;
}

size_t PivotPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotPeer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 PeerID = 1 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotPeer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotPeer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotPeer::GetClassData() const { return &_class_data_; }


void PivotPeer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotPeer*>(&to_msg);
  auto& from = static_cast<const PivotPeer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotPeer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_peerid() != 0) {
    _this->_internal_set_peerid(from._internal_peerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotPeer::CopyFrom(const PivotPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotPeer::IsInitialized() const {
  return true;
}

void PivotPeer::InternalSwap(PivotPeer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.peerid_, other->_impl_.peerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotPeer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[110]);
}

// ===================================================================

class PivotPeerEnvelope::_Internal {
 public:
};

PivotPeerEnvelope::PivotPeerEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotPeerEnvelope)
}
PivotPeerEnvelope::PivotPeerEnvelope(const PivotPeerEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotPeerEnvelope* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , decltype(_impl_.pivotsessionid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.peerfailureat_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pivotsessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivotsessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pivotsessionid().empty()) {
    _this->_impl_.pivotsessionid_.Set(from._internal_pivotsessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.peerfailureat_, &from._impl_.peerfailureat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.peerfailureat_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotPeerEnvelope)
}

inline void PivotPeerEnvelope::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , decltype(_impl_.pivotsessionid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.peerfailureat_){int64_t{0}}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pivotsessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivotsessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotPeerEnvelope::~PivotPeerEnvelope() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotPeerEnvelope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotPeerEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
  _impl_.pivotsessionid_.Destroy();
  _impl_.data_.Destroy();
}

void PivotPeerEnvelope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotPeerEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotPeerEnvelope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _impl_.pivotsessionid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.peerfailureat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.peerfailureat_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotPeerEnvelope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.PivotPeer Peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes PivotSessionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pivotsessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PeerFailureAt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.peerfailureat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotPeerEnvelope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotPeerEnvelope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.PivotPeer Peers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // bytes PivotSessionID = 3;
  if (!this->_internal_pivotsessionid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pivotsessionid(), target);
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // int64 PeerFailureAt = 5;
  if (this->_internal_peerfailureat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_peerfailureat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotPeerEnvelope)
  return target;
}

size_t PivotPeerEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotPeerEnvelope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.PivotPeer Peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes PivotSessionID = 3;
  if (!this->_internal_pivotsessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pivotsessionid());
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 PeerFailureAt = 5;
  if (this->_internal_peerfailureat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peerfailureat());
  }

  // uint32 Type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotPeerEnvelope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotPeerEnvelope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotPeerEnvelope::GetClassData() const { return &_class_data_; }


void PivotPeerEnvelope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotPeerEnvelope*>(&to_msg);
  auto& from = static_cast<const PivotPeerEnvelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotPeerEnvelope)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  if (!from._internal_pivotsessionid().empty()) {
    _this->_internal_set_pivotsessionid(from._internal_pivotsessionid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_peerfailureat() != 0) {
    _this->_internal_set_peerfailureat(from._internal_peerfailureat());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotPeerEnvelope::CopyFrom(const PivotPeerEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotPeerEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotPeerEnvelope::IsInitialized() const {
  return true;
}

void PivotPeerEnvelope::InternalSwap(PivotPeerEnvelope* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pivotsessionid_, lhs_arena,
      &other->_impl_.pivotsessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PivotPeerEnvelope, _impl_.type_)
      + sizeof(PivotPeerEnvelope::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PivotPeerEnvelope, _impl_.peerfailureat_)>(
          reinterpret_cast<char*>(&_impl_.peerfailureat_),
          reinterpret_cast<char*>(&other->_impl_.peerfailureat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotPeerEnvelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[111]);
}

// ===================================================================

class PivotPing::_Internal {
 public:
};

PivotPing::PivotPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotPing)
}
PivotPing::PivotPing(const PivotPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.nonce_ = from._impl_.nonce_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotPing)
}

inline void PivotPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PivotPing::~PivotPing() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PivotPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotPing::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nonce_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotPing)
  return target;
}

size_t PivotPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotPing::GetClassData() const { return &_class_data_; }


void PivotPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotPing*>(&to_msg);
  auto& from = static_cast<const PivotPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotPing::CopyFrom(const PivotPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotPing::IsInitialized() const {
  return true;
}

void PivotPing::InternalSwap(PivotPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.nonce_, other->_impl_.nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[112]);
}

// ===================================================================

class NetConnPivot::_Internal {
 public:
};

NetConnPivot::NetConnPivot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.NetConnPivot)
}
NetConnPivot::NetConnPivot(const NetConnPivot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetConnPivot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteaddress_){}
    , decltype(_impl_.peerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remoteaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remoteaddress().empty()) {
    _this->_impl_.remoteaddress_.Set(from._internal_remoteaddress(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.peerid_ = from._impl_.peerid_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.NetConnPivot)
}

inline void NetConnPivot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteaddress_){}
    , decltype(_impl_.peerid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.remoteaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetConnPivot::~NetConnPivot() {
  // @@protoc_insertion_point(destructor:sliverpb.NetConnPivot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetConnPivot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remoteaddress_.Destroy();
}

void NetConnPivot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetConnPivot::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.NetConnPivot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remoteaddress_.ClearToEmpty();
  _impl_.peerid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetConnPivot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 PeerID = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string RemoteAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_remoteaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.NetConnPivot.RemoteAddress"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetConnPivot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.NetConnPivot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PeerID = 1 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_peerid(), target);
  }

  // string RemoteAddress = 2;
  if (!this->_internal_remoteaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remoteaddress().data(), static_cast<int>(this->_internal_remoteaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.NetConnPivot.RemoteAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remoteaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.NetConnPivot)
  return target;
}

size_t NetConnPivot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.NetConnPivot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RemoteAddress = 2;
  if (!this->_internal_remoteaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remoteaddress());
  }

  // int64 PeerID = 1 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetConnPivot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetConnPivot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetConnPivot::GetClassData() const { return &_class_data_; }


void NetConnPivot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetConnPivot*>(&to_msg);
  auto& from = static_cast<const NetConnPivot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.NetConnPivot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remoteaddress().empty()) {
    _this->_internal_set_remoteaddress(from._internal_remoteaddress());
  }
  if (from._internal_peerid() != 0) {
    _this->_internal_set_peerid(from._internal_peerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetConnPivot::CopyFrom(const NetConnPivot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.NetConnPivot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConnPivot::IsInitialized() const {
  return true;
}

void NetConnPivot::InternalSwap(NetConnPivot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remoteaddress_, lhs_arena,
      &other->_impl_.remoteaddress_, rhs_arena
  );
  swap(_impl_.peerid_, other->_impl_.peerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetConnPivot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[113]);
}

// ===================================================================

class PivotPeerFailure::_Internal {
 public:
};

PivotPeerFailure::PivotPeerFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotPeerFailure)
}
PivotPeerFailure::PivotPeerFailure(const PivotPeerFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotPeerFailure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , decltype(_impl_.peerid_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err().empty()) {
    _this->_impl_.err_.Set(from._internal_err(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.peerid_, &from._impl_.peerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.peerid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotPeerFailure)
}

inline void PivotPeerFailure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , decltype(_impl_.peerid_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotPeerFailure::~PivotPeerFailure() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotPeerFailure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotPeerFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_.Destroy();
}

void PivotPeerFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotPeerFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotPeerFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_.ClearToEmpty();
  ::memset(&_impl_.peerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.peerid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotPeerFailure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 PeerID = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.PeerFailureType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sliverpb::PeerFailureType>(val));
        } else
          goto handle_unusual;
        continue;
      // string Err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.PivotPeerFailure.Err"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotPeerFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotPeerFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PeerID = 1 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_peerid(), target);
  }

  // .sliverpb.PeerFailureType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string Err = 3;
  if (!this->_internal_err().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.PivotPeerFailure.Err");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotPeerFailure)
  return target;
}

size_t PivotPeerFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotPeerFailure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Err = 3;
  if (!this->_internal_err().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  // int64 PeerID = 1 [jstype = JS_STRING];
  if (this->_internal_peerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peerid());
  }

  // .sliverpb.PeerFailureType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotPeerFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotPeerFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotPeerFailure::GetClassData() const { return &_class_data_; }


void PivotPeerFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotPeerFailure*>(&to_msg);
  auto& from = static_cast<const PivotPeerFailure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotPeerFailure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err().empty()) {
    _this->_internal_set_err(from._internal_err());
  }
  if (from._internal_peerid() != 0) {
    _this->_internal_set_peerid(from._internal_peerid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotPeerFailure::CopyFrom(const PivotPeerFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotPeerFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotPeerFailure::IsInitialized() const {
  return true;
}

void PivotPeerFailure::InternalSwap(PivotPeerFailure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.err_, lhs_arena,
      &other->_impl_.err_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PivotPeerFailure, _impl_.type_)
      + sizeof(PivotPeerFailure::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PivotPeerFailure, _impl_.peerid_)>(
          reinterpret_cast<char*>(&_impl_.peerid_),
          reinterpret_cast<char*>(&other->_impl_.peerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotPeerFailure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[114]);
}

// ===================================================================

class PivotListenersReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PivotListenersReq* msg);
};

const ::sliverpb::Request&
PivotListenersReq::_Internal::request(const PivotListenersReq* msg) {
  return *msg->_impl_.request_;
}
void PivotListenersReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PivotListenersReq::PivotListenersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotListenersReq)
}
PivotListenersReq::PivotListenersReq(const PivotListenersReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotListenersReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotListenersReq)
}

inline void PivotListenersReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PivotListenersReq::~PivotListenersReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotListenersReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotListenersReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PivotListenersReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotListenersReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotListenersReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotListenersReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotListenersReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotListenersReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotListenersReq)
  return target;
}

size_t PivotListenersReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotListenersReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotListenersReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotListenersReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotListenersReq::GetClassData() const { return &_class_data_; }


void PivotListenersReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotListenersReq*>(&to_msg);
  auto& from = static_cast<const PivotListenersReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotListenersReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotListenersReq::CopyFrom(const PivotListenersReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotListenersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotListenersReq::IsInitialized() const {
  return true;
}

void PivotListenersReq::InternalSwap(PivotListenersReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotListenersReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[115]);
}

// ===================================================================

class PivotListeners::_Internal {
 public:
  static const ::sliverpb::Response& response(const PivotListeners* msg);
};

const ::sliverpb::Response&
PivotListeners::_Internal::response(const PivotListeners* msg) {
  return *msg->_impl_.response_;
}
void PivotListeners::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
PivotListeners::PivotListeners(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PivotListeners)
}
PivotListeners::PivotListeners(const PivotListeners& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotListeners* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listeners_){from._impl_.listeners_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.PivotListeners)
}

inline void PivotListeners::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listeners_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PivotListeners::~PivotListeners() {
  // @@protoc_insertion_point(destructor:sliverpb.PivotListeners)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotListeners::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listeners_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void PivotListeners::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotListeners::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PivotListeners)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listeners_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotListeners::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.PivotListener Listeners = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listeners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotListeners::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PivotListeners)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.PivotListener Listeners = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_listeners_size()); i < n; i++) {
    const auto& repfield = this->_internal_listeners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PivotListeners)
  return target;
}

size_t PivotListeners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PivotListeners)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.PivotListener Listeners = 1;
  total_size += 1UL * this->_internal_listeners_size();
  for (const auto& msg : this->_impl_.listeners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotListeners::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotListeners::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotListeners::GetClassData() const { return &_class_data_; }


void PivotListeners::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotListeners*>(&to_msg);
  auto& from = static_cast<const PivotListeners&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PivotListeners)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listeners_.MergeFrom(from._impl_.listeners_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotListeners::CopyFrom(const PivotListeners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PivotListeners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotListeners::IsInitialized() const {
  return true;
}

void PivotListeners::InternalSwap(PivotListeners* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.listeners_.InternalSwap(&other->_impl_.listeners_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotListeners::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[116]);
}

// ===================================================================

class WGPortForwardStartReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const WGPortForwardStartReq* msg);
};

const ::sliverpb::Request&
WGPortForwardStartReq::_Internal::request(const WGPortForwardStartReq* msg) {
  return *msg->_impl_.request_;
}
void WGPortForwardStartReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
WGPortForwardStartReq::WGPortForwardStartReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGPortForwardStartReq)
}
WGPortForwardStartReq::WGPortForwardStartReq(const WGPortForwardStartReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGPortForwardStartReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteaddress_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.localport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remoteaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remoteaddress().empty()) {
    _this->_impl_.remoteaddress_.Set(from._internal_remoteaddress(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.localport_ = from._impl_.localport_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGPortForwardStartReq)
}

inline void WGPortForwardStartReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteaddress_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.localport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.remoteaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WGPortForwardStartReq::~WGPortForwardStartReq() {
  // @@protoc_insertion_point(destructor:sliverpb.WGPortForwardStartReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGPortForwardStartReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remoteaddress_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void WGPortForwardStartReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGPortForwardStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGPortForwardStartReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remoteaddress_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.localport_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGPortForwardStartReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 LocalPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.localport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string RemoteAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_remoteaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.WGPortForwardStartReq.RemoteAddress"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGPortForwardStartReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGPortForwardStartReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 LocalPort = 1;
  if (this->_internal_localport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_localport(), target);
  }

  // string RemoteAddress = 2;
  if (!this->_internal_remoteaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remoteaddress().data(), static_cast<int>(this->_internal_remoteaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.WGPortForwardStartReq.RemoteAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remoteaddress(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGPortForwardStartReq)
  return target;
}

size_t WGPortForwardStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGPortForwardStartReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RemoteAddress = 2;
  if (!this->_internal_remoteaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remoteaddress());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 LocalPort = 1;
  if (this->_internal_localport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_localport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGPortForwardStartReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGPortForwardStartReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGPortForwardStartReq::GetClassData() const { return &_class_data_; }


void WGPortForwardStartReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGPortForwardStartReq*>(&to_msg);
  auto& from = static_cast<const WGPortForwardStartReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGPortForwardStartReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remoteaddress().empty()) {
    _this->_internal_set_remoteaddress(from._internal_remoteaddress());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_localport() != 0) {
    _this->_internal_set_localport(from._internal_localport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGPortForwardStartReq::CopyFrom(const WGPortForwardStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGPortForwardStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGPortForwardStartReq::IsInitialized() const {
  return true;
}

void WGPortForwardStartReq::InternalSwap(WGPortForwardStartReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remoteaddress_, lhs_arena,
      &other->_impl_.remoteaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WGPortForwardStartReq, _impl_.localport_)
      + sizeof(WGPortForwardStartReq::_impl_.localport_)
      - PROTOBUF_FIELD_OFFSET(WGPortForwardStartReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WGPortForwardStartReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[117]);
}

// ===================================================================

class WGPortForward::_Internal {
 public:
  static const ::sliverpb::WGTCPForwarder& forwarder(const WGPortForward* msg);
  static const ::sliverpb::Response& response(const WGPortForward* msg);
};

const ::sliverpb::WGTCPForwarder&
WGPortForward::_Internal::forwarder(const WGPortForward* msg) {
  return *msg->_impl_.forwarder_;
}
const ::sliverpb::Response&
WGPortForward::_Internal::response(const WGPortForward* msg) {
  return *msg->_impl_.response_;
}
void WGPortForward::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
WGPortForward::WGPortForward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGPortForward)
}
WGPortForward::WGPortForward(const WGPortForward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGPortForward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.forwarder_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forwarder()) {
    _this->_impl_.forwarder_ = new ::sliverpb::WGTCPForwarder(*from._impl_.forwarder_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGPortForward)
}

inline void WGPortForward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.forwarder_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGPortForward::~WGPortForward() {
  // @@protoc_insertion_point(destructor:sliverpb.WGPortForward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGPortForward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.forwarder_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void WGPortForward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGPortForward::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGPortForward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.forwarder_ != nullptr) {
    delete _impl_.forwarder_;
  }
  _impl_.forwarder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGPortForward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.WGTCPForwarder Forwarder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_forwarder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGPortForward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGPortForward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.WGTCPForwarder Forwarder = 1;
  if (this->_internal_has_forwarder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::forwarder(this),
        _Internal::forwarder(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGPortForward)
  return target;
}

size_t WGPortForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGPortForward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.WGTCPForwarder Forwarder = 1;
  if (this->_internal_has_forwarder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forwarder_);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGPortForward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGPortForward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGPortForward::GetClassData() const { return &_class_data_; }


void WGPortForward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGPortForward*>(&to_msg);
  auto& from = static_cast<const WGPortForward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGPortForward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_forwarder()) {
    _this->_internal_mutable_forwarder()->::sliverpb::WGTCPForwarder::MergeFrom(
        from._internal_forwarder());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGPortForward::CopyFrom(const WGPortForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGPortForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGPortForward::IsInitialized() const {
  return true;
}

void WGPortForward::InternalSwap(WGPortForward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WGPortForward, _impl_.response_)
      + sizeof(WGPortForward::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(WGPortForward, _impl_.forwarder_)>(
          reinterpret_cast<char*>(&_impl_.forwarder_),
          reinterpret_cast<char*>(&other->_impl_.forwarder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WGPortForward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[118]);
}

// ===================================================================

class WGPortForwardStopReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const WGPortForwardStopReq* msg);
};

const ::sliverpb::Request&
WGPortForwardStopReq::_Internal::request(const WGPortForwardStopReq* msg) {
  return *msg->_impl_.request_;
}
void WGPortForwardStopReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
WGPortForwardStopReq::WGPortForwardStopReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGPortForwardStopReq)
}
WGPortForwardStopReq::WGPortForwardStopReq(const WGPortForwardStopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGPortForwardStopReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGPortForwardStopReq)
}

inline void WGPortForwardStopReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGPortForwardStopReq::~WGPortForwardStopReq() {
  // @@protoc_insertion_point(destructor:sliverpb.WGPortForwardStopReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGPortForwardStopReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void WGPortForwardStopReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGPortForwardStopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGPortForwardStopReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGPortForwardStopReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGPortForwardStopReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGPortForwardStopReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGPortForwardStopReq)
  return target;
}

size_t WGPortForwardStopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGPortForwardStopReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGPortForwardStopReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGPortForwardStopReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGPortForwardStopReq::GetClassData() const { return &_class_data_; }


void WGPortForwardStopReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGPortForwardStopReq*>(&to_msg);
  auto& from = static_cast<const WGPortForwardStopReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGPortForwardStopReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGPortForwardStopReq::CopyFrom(const WGPortForwardStopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGPortForwardStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGPortForwardStopReq::IsInitialized() const {
  return true;
}

void WGPortForwardStopReq::InternalSwap(WGPortForwardStopReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WGPortForwardStopReq, _impl_.id_)
      + sizeof(WGPortForwardStopReq::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(WGPortForwardStopReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WGPortForwardStopReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[119]);
}

// ===================================================================

class WGSocksStartReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const WGSocksStartReq* msg);
};

const ::sliverpb::Request&
WGSocksStartReq::_Internal::request(const WGSocksStartReq* msg) {
  return *msg->_impl_.request_;
}
void WGSocksStartReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
WGSocksStartReq::WGSocksStartReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGSocksStartReq)
}
WGSocksStartReq::WGSocksStartReq(const WGSocksStartReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGSocksStartReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGSocksStartReq)
}

inline void WGSocksStartReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGSocksStartReq::~WGSocksStartReq() {
  // @@protoc_insertion_point(destructor:sliverpb.WGSocksStartReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGSocksStartReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void WGSocksStartReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGSocksStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGSocksStartReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGSocksStartReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGSocksStartReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGSocksStartReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGSocksStartReq)
  return target;
}

size_t WGSocksStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGSocksStartReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 Port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGSocksStartReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGSocksStartReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGSocksStartReq::GetClassData() const { return &_class_data_; }


void WGSocksStartReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGSocksStartReq*>(&to_msg);
  auto& from = static_cast<const WGSocksStartReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGSocksStartReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGSocksStartReq::CopyFrom(const WGSocksStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGSocksStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSocksStartReq::IsInitialized() const {
  return true;
}

void WGSocksStartReq::InternalSwap(WGSocksStartReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WGSocksStartReq, _impl_.port_)
      + sizeof(WGSocksStartReq::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(WGSocksStartReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WGSocksStartReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[120]);
}

// ===================================================================

class WGSocks::_Internal {
 public:
  static const ::sliverpb::WGSocksServer& server(const WGSocks* msg);
  static const ::sliverpb::Response& response(const WGSocks* msg);
};

const ::sliverpb::WGSocksServer&
WGSocks::_Internal::server(const WGSocks* msg) {
  return *msg->_impl_.server_;
}
const ::sliverpb::Response&
WGSocks::_Internal::response(const WGSocks* msg) {
  return *msg->_impl_.response_;
}
void WGSocks::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
WGSocks::WGSocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGSocks)
}
WGSocks::WGSocks(const WGSocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGSocks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server()) {
    _this->_impl_.server_ = new ::sliverpb::WGSocksServer(*from._impl_.server_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGSocks)
}

inline void WGSocks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGSocks::~WGSocks() {
  // @@protoc_insertion_point(destructor:sliverpb.WGSocks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGSocks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.server_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void WGSocks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGSocks::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGSocks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.server_ != nullptr) {
    delete _impl_.server_;
  }
  _impl_.server_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGSocks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.WGSocksServer Server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGSocks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGSocks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.WGSocksServer Server = 1;
  if (this->_internal_has_server()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::server(this),
        _Internal::server(this).GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGSocks)
  return target;
}

size_t WGSocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGSocks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.WGSocksServer Server = 1;
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGSocks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGSocks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGSocks::GetClassData() const { return &_class_data_; }


void WGSocks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGSocks*>(&to_msg);
  auto& from = static_cast<const WGSocks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGSocks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server()) {
    _this->_internal_mutable_server()->::sliverpb::WGSocksServer::MergeFrom(
        from._internal_server());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGSocks::CopyFrom(const WGSocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGSocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSocks::IsInitialized() const {
  return true;
}

void WGSocks::InternalSwap(WGSocks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WGSocks, _impl_.response_)
      + sizeof(WGSocks::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(WGSocks, _impl_.server_)>(
          reinterpret_cast<char*>(&_impl_.server_),
          reinterpret_cast<char*>(&other->_impl_.server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WGSocks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[121]);
}

// ===================================================================

class WGSocksStopReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const WGSocksStopReq* msg);
};

const ::sliverpb::Request&
WGSocksStopReq::_Internal::request(const WGSocksStopReq* msg) {
  return *msg->_impl_.request_;
}
void WGSocksStopReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
WGSocksStopReq::WGSocksStopReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGSocksStopReq)
}
WGSocksStopReq::WGSocksStopReq(const WGSocksStopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGSocksStopReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGSocksStopReq)
}

inline void WGSocksStopReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGSocksStopReq::~WGSocksStopReq() {
  // @@protoc_insertion_point(destructor:sliverpb.WGSocksStopReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGSocksStopReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void WGSocksStopReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGSocksStopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGSocksStopReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGSocksStopReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGSocksStopReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGSocksStopReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGSocksStopReq)
  return target;
}

size_t WGSocksStopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGSocksStopReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGSocksStopReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGSocksStopReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGSocksStopReq::GetClassData() const { return &_class_data_; }


void WGSocksStopReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGSocksStopReq*>(&to_msg);
  auto& from = static_cast<const WGSocksStopReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGSocksStopReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGSocksStopReq::CopyFrom(const WGSocksStopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGSocksStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSocksStopReq::IsInitialized() const {
  return true;
}

void WGSocksStopReq::InternalSwap(WGSocksStopReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WGSocksStopReq, _impl_.id_)
      + sizeof(WGSocksStopReq::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(WGSocksStopReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WGSocksStopReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[122]);
}

// ===================================================================

class WGTCPForwardersReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const WGTCPForwardersReq* msg);
};

const ::sliverpb::Request&
WGTCPForwardersReq::_Internal::request(const WGTCPForwardersReq* msg) {
  return *msg->_impl_.request_;
}
void WGTCPForwardersReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
WGTCPForwardersReq::WGTCPForwardersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGTCPForwardersReq)
}
WGTCPForwardersReq::WGTCPForwardersReq(const WGTCPForwardersReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGTCPForwardersReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGTCPForwardersReq)
}

inline void WGTCPForwardersReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGTCPForwardersReq::~WGTCPForwardersReq() {
  // @@protoc_insertion_point(destructor:sliverpb.WGTCPForwardersReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGTCPForwardersReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void WGTCPForwardersReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGTCPForwardersReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGTCPForwardersReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGTCPForwardersReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGTCPForwardersReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGTCPForwardersReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGTCPForwardersReq)
  return target;
}

size_t WGTCPForwardersReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGTCPForwardersReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGTCPForwardersReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGTCPForwardersReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGTCPForwardersReq::GetClassData() const { return &_class_data_; }


void WGTCPForwardersReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGTCPForwardersReq*>(&to_msg);
  auto& from = static_cast<const WGTCPForwardersReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGTCPForwardersReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGTCPForwardersReq::CopyFrom(const WGTCPForwardersReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGTCPForwardersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGTCPForwardersReq::IsInitialized() const {
  return true;
}

void WGTCPForwardersReq::InternalSwap(WGTCPForwardersReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WGTCPForwardersReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[123]);
}

// ===================================================================

class WGSocksServersReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const WGSocksServersReq* msg);
};

const ::sliverpb::Request&
WGSocksServersReq::_Internal::request(const WGSocksServersReq* msg) {
  return *msg->_impl_.request_;
}
void WGSocksServersReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
WGSocksServersReq::WGSocksServersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGSocksServersReq)
}
WGSocksServersReq::WGSocksServersReq(const WGSocksServersReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGSocksServersReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGSocksServersReq)
}

inline void WGSocksServersReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGSocksServersReq::~WGSocksServersReq() {
  // @@protoc_insertion_point(destructor:sliverpb.WGSocksServersReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGSocksServersReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void WGSocksServersReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGSocksServersReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGSocksServersReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGSocksServersReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGSocksServersReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGSocksServersReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGSocksServersReq)
  return target;
}

size_t WGSocksServersReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGSocksServersReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGSocksServersReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGSocksServersReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGSocksServersReq::GetClassData() const { return &_class_data_; }


void WGSocksServersReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGSocksServersReq*>(&to_msg);
  auto& from = static_cast<const WGSocksServersReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGSocksServersReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGSocksServersReq::CopyFrom(const WGSocksServersReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGSocksServersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSocksServersReq::IsInitialized() const {
  return true;
}

void WGSocksServersReq::InternalSwap(WGSocksServersReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WGSocksServersReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[124]);
}

// ===================================================================

class WGTCPForwarder::_Internal {
 public:
};

WGTCPForwarder::WGTCPForwarder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGTCPForwarder)
}
WGTCPForwarder::WGTCPForwarder(const WGTCPForwarder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGTCPForwarder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.localaddr_){}
    , decltype(_impl_.remoteaddr_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localaddr().empty()) {
    _this->_impl_.localaddr_.Set(from._internal_localaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remoteaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remoteaddr().empty()) {
    _this->_impl_.remoteaddr_.Set(from._internal_remoteaddr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGTCPForwarder)
}

inline void WGTCPForwarder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.localaddr_){}
    , decltype(_impl_.remoteaddr_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.localaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remoteaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WGTCPForwarder::~WGTCPForwarder() {
  // @@protoc_insertion_point(destructor:sliverpb.WGTCPForwarder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGTCPForwarder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localaddr_.Destroy();
  _impl_.remoteaddr_.Destroy();
}

void WGTCPForwarder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGTCPForwarder::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGTCPForwarder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.localaddr_.ClearToEmpty();
  _impl_.remoteaddr_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGTCPForwarder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LocalAddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.WGTCPForwarder.LocalAddr"));
        } else
          goto handle_unusual;
        continue;
      // string RemoteAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remoteaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.WGTCPForwarder.RemoteAddr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGTCPForwarder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGTCPForwarder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string LocalAddr = 2;
  if (!this->_internal_localaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localaddr().data(), static_cast<int>(this->_internal_localaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.WGTCPForwarder.LocalAddr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localaddr(), target);
  }

  // string RemoteAddr = 3;
  if (!this->_internal_remoteaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remoteaddr().data(), static_cast<int>(this->_internal_remoteaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.WGTCPForwarder.RemoteAddr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remoteaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGTCPForwarder)
  return target;
}

size_t WGTCPForwarder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGTCPForwarder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LocalAddr = 2;
  if (!this->_internal_localaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localaddr());
  }

  // string RemoteAddr = 3;
  if (!this->_internal_remoteaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remoteaddr());
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGTCPForwarder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGTCPForwarder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGTCPForwarder::GetClassData() const { return &_class_data_; }


void WGTCPForwarder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGTCPForwarder*>(&to_msg);
  auto& from = static_cast<const WGTCPForwarder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGTCPForwarder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_localaddr().empty()) {
    _this->_internal_set_localaddr(from._internal_localaddr());
  }
  if (!from._internal_remoteaddr().empty()) {
    _this->_internal_set_remoteaddr(from._internal_remoteaddr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGTCPForwarder::CopyFrom(const WGTCPForwarder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGTCPForwarder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGTCPForwarder::IsInitialized() const {
  return true;
}

void WGTCPForwarder::InternalSwap(WGTCPForwarder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localaddr_, lhs_arena,
      &other->_impl_.localaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remoteaddr_, lhs_arena,
      &other->_impl_.remoteaddr_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WGTCPForwarder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[125]);
}

// ===================================================================

class WGSocksServer::_Internal {
 public:
};

WGSocksServer::WGSocksServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGSocksServer)
}
WGSocksServer::WGSocksServer(const WGSocksServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGSocksServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.localaddr_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localaddr().empty()) {
    _this->_impl_.localaddr_.Set(from._internal_localaddr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGSocksServer)
}

inline void WGSocksServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.localaddr_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.localaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WGSocksServer::~WGSocksServer() {
  // @@protoc_insertion_point(destructor:sliverpb.WGSocksServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGSocksServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localaddr_.Destroy();
}

void WGSocksServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGSocksServer::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGSocksServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.localaddr_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGSocksServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LocalAddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.WGSocksServer.LocalAddr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGSocksServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGSocksServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string LocalAddr = 2;
  if (!this->_internal_localaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localaddr().data(), static_cast<int>(this->_internal_localaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.WGSocksServer.LocalAddr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGSocksServer)
  return target;
}

size_t WGSocksServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGSocksServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LocalAddr = 2;
  if (!this->_internal_localaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localaddr());
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGSocksServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGSocksServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGSocksServer::GetClassData() const { return &_class_data_; }


void WGSocksServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGSocksServer*>(&to_msg);
  auto& from = static_cast<const WGSocksServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGSocksServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_localaddr().empty()) {
    _this->_internal_set_localaddr(from._internal_localaddr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGSocksServer::CopyFrom(const WGSocksServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGSocksServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSocksServer::IsInitialized() const {
  return true;
}

void WGSocksServer::InternalSwap(WGSocksServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localaddr_, lhs_arena,
      &other->_impl_.localaddr_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WGSocksServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[126]);
}

// ===================================================================

class WGSocksServers::_Internal {
 public:
  static const ::sliverpb::Response& response(const WGSocksServers* msg);
};

const ::sliverpb::Response&
WGSocksServers::_Internal::response(const WGSocksServers* msg) {
  return *msg->_impl_.response_;
}
void WGSocksServers::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
WGSocksServers::WGSocksServers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGSocksServers)
}
WGSocksServers::WGSocksServers(const WGSocksServers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGSocksServers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servers_){from._impl_.servers_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGSocksServers)
}

inline void WGSocksServers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servers_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGSocksServers::~WGSocksServers() {
  // @@protoc_insertion_point(destructor:sliverpb.WGSocksServers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGSocksServers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void WGSocksServers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGSocksServers::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGSocksServers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGSocksServers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.WGSocksServer Servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGSocksServers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGSocksServers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.WGSocksServer Servers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGSocksServers)
  return target;
}

size_t WGSocksServers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGSocksServers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.WGSocksServer Servers = 1;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->_impl_.servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGSocksServers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGSocksServers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGSocksServers::GetClassData() const { return &_class_data_; }


void WGSocksServers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGSocksServers*>(&to_msg);
  auto& from = static_cast<const WGSocksServers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGSocksServers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.servers_.MergeFrom(from._impl_.servers_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGSocksServers::CopyFrom(const WGSocksServers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGSocksServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSocksServers::IsInitialized() const {
  return true;
}

void WGSocksServers::InternalSwap(WGSocksServers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.servers_.InternalSwap(&other->_impl_.servers_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WGSocksServers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[127]);
}

// ===================================================================

class WGTCPForwarders::_Internal {
 public:
  static const ::sliverpb::Response& response(const WGTCPForwarders* msg);
};

const ::sliverpb::Response&
WGTCPForwarders::_Internal::response(const WGTCPForwarders* msg) {
  return *msg->_impl_.response_;
}
void WGTCPForwarders::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
WGTCPForwarders::WGTCPForwarders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WGTCPForwarders)
}
WGTCPForwarders::WGTCPForwarders(const WGTCPForwarders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WGTCPForwarders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.forwarders_){from._impl_.forwarders_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.WGTCPForwarders)
}

inline void WGTCPForwarders::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.forwarders_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WGTCPForwarders::~WGTCPForwarders() {
  // @@protoc_insertion_point(destructor:sliverpb.WGTCPForwarders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WGTCPForwarders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.forwarders_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void WGTCPForwarders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WGTCPForwarders::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WGTCPForwarders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.forwarders_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WGTCPForwarders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.WGTCPForwarder Forwarders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forwarders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WGTCPForwarders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WGTCPForwarders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.WGTCPForwarder Forwarders = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forwarders_size()); i < n; i++) {
    const auto& repfield = this->_internal_forwarders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WGTCPForwarders)
  return target;
}

size_t WGTCPForwarders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WGTCPForwarders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.WGTCPForwarder Forwarders = 1;
  total_size += 1UL * this->_internal_forwarders_size();
  for (const auto& msg : this->_impl_.forwarders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WGTCPForwarders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WGTCPForwarders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WGTCPForwarders::GetClassData() const { return &_class_data_; }


void WGTCPForwarders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WGTCPForwarders*>(&to_msg);
  auto& from = static_cast<const WGTCPForwarders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WGTCPForwarders)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.forwarders_.MergeFrom(from._impl_.forwarders_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WGTCPForwarders::CopyFrom(const WGTCPForwarders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WGTCPForwarders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGTCPForwarders::IsInitialized() const {
  return true;
}

void WGTCPForwarders::InternalSwap(WGTCPForwarders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.forwarders_.InternalSwap(&other->_impl_.forwarders_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WGTCPForwarders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[128]);
}

// ===================================================================

class ReconfigureReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ReconfigureReq* msg);
};

const ::sliverpb::Request&
ReconfigureReq::_Internal::request(const ReconfigureReq* msg) {
  return *msg->_impl_.request_;
}
void ReconfigureReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ReconfigureReq::ReconfigureReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ReconfigureReq)
}
ReconfigureReq::ReconfigureReq(const ReconfigureReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconfigureReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.reconnectinterval_){}
    , decltype(_impl_.beaconinterval_){}
    , decltype(_impl_.beaconjitter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.reconnectinterval_, &from._impl_.reconnectinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.beaconjitter_) -
    reinterpret_cast<char*>(&_impl_.reconnectinterval_)) + sizeof(_impl_.beaconjitter_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.ReconfigureReq)
}

inline void ReconfigureReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.reconnectinterval_){int64_t{0}}
    , decltype(_impl_.beaconinterval_){int64_t{0}}
    , decltype(_impl_.beaconjitter_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReconfigureReq::~ReconfigureReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ReconfigureReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconfigureReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ReconfigureReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconfigureReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ReconfigureReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.reconnectinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.beaconjitter_) -
      reinterpret_cast<char*>(&_impl_.reconnectinterval_)) + sizeof(_impl_.beaconjitter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconfigureReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ReconnectInterval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.reconnectinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BeaconInterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.beaconinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 BeaconJitter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.beaconjitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconfigureReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ReconfigureReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ReconnectInterval = 1;
  if (this->_internal_reconnectinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_reconnectinterval(), target);
  }

  // int64 BeaconInterval = 2;
  if (this->_internal_beaconinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_beaconinterval(), target);
  }

  // int64 BeaconJitter = 3;
  if (this->_internal_beaconjitter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_beaconjitter(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ReconfigureReq)
  return target;
}

size_t ReconfigureReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ReconfigureReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int64 ReconnectInterval = 1;
  if (this->_internal_reconnectinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reconnectinterval());
  }

  // int64 BeaconInterval = 2;
  if (this->_internal_beaconinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_beaconinterval());
  }

  // int64 BeaconJitter = 3;
  if (this->_internal_beaconjitter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_beaconjitter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconfigureReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconfigureReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconfigureReq::GetClassData() const { return &_class_data_; }


void ReconfigureReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconfigureReq*>(&to_msg);
  auto& from = static_cast<const ReconfigureReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ReconfigureReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_reconnectinterval() != 0) {
    _this->_internal_set_reconnectinterval(from._internal_reconnectinterval());
  }
  if (from._internal_beaconinterval() != 0) {
    _this->_internal_set_beaconinterval(from._internal_beaconinterval());
  }
  if (from._internal_beaconjitter() != 0) {
    _this->_internal_set_beaconjitter(from._internal_beaconjitter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconfigureReq::CopyFrom(const ReconfigureReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ReconfigureReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconfigureReq::IsInitialized() const {
  return true;
}

void ReconfigureReq::InternalSwap(ReconfigureReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconfigureReq, _impl_.beaconjitter_)
      + sizeof(ReconfigureReq::_impl_.beaconjitter_)
      - PROTOBUF_FIELD_OFFSET(ReconfigureReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconfigureReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[129]);
}

// ===================================================================

class Reconfigure::_Internal {
 public:
  static const ::sliverpb::Response& response(const Reconfigure* msg);
};

const ::sliverpb::Response&
Reconfigure::_Internal::response(const Reconfigure* msg) {
  return *msg->_impl_.response_;
}
void Reconfigure::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
Reconfigure::Reconfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.Reconfigure)
}
Reconfigure::Reconfigure(const Reconfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reconfigure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.Reconfigure)
}

inline void Reconfigure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Reconfigure::~Reconfigure() {
  // @@protoc_insertion_point(destructor:sliverpb.Reconfigure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reconfigure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Reconfigure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reconfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.Reconfigure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reconfigure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reconfigure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.Reconfigure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.Reconfigure)
  return target;
}

size_t Reconfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.Reconfigure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reconfigure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reconfigure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reconfigure::GetClassData() const { return &_class_data_; }


void Reconfigure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reconfigure*>(&to_msg);
  auto& from = static_cast<const Reconfigure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.Reconfigure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reconfigure::CopyFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.Reconfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reconfigure::IsInitialized() const {
  return true;
}

void Reconfigure::InternalSwap(Reconfigure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reconfigure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[130]);
}

// ===================================================================

class PollIntervalReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const PollIntervalReq* msg);
};

const ::sliverpb::Request&
PollIntervalReq::_Internal::request(const PollIntervalReq* msg) {
  return *msg->_impl_.request_;
}
void PollIntervalReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
PollIntervalReq::PollIntervalReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PollIntervalReq)
}
PollIntervalReq::PollIntervalReq(const PollIntervalReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollIntervalReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pollinterval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.pollinterval_ = from._impl_.pollinterval_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.PollIntervalReq)
}

inline void PollIntervalReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.pollinterval_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PollIntervalReq::~PollIntervalReq() {
  // @@protoc_insertion_point(destructor:sliverpb.PollIntervalReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollIntervalReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void PollIntervalReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollIntervalReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PollIntervalReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.pollinterval_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollIntervalReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 PollInterval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pollinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollIntervalReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PollIntervalReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PollInterval = 1;
  if (this->_internal_pollinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pollinterval(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PollIntervalReq)
  return target;
}

size_t PollIntervalReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PollIntervalReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // int64 PollInterval = 1;
  if (this->_internal_pollinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pollinterval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollIntervalReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollIntervalReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollIntervalReq::GetClassData() const { return &_class_data_; }


void PollIntervalReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollIntervalReq*>(&to_msg);
  auto& from = static_cast<const PollIntervalReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PollIntervalReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_pollinterval() != 0) {
    _this->_internal_set_pollinterval(from._internal_pollinterval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollIntervalReq::CopyFrom(const PollIntervalReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PollIntervalReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollIntervalReq::IsInitialized() const {
  return true;
}

void PollIntervalReq::InternalSwap(PollIntervalReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PollIntervalReq, _impl_.pollinterval_)
      + sizeof(PollIntervalReq::_impl_.pollinterval_)
      - PROTOBUF_FIELD_OFFSET(PollIntervalReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PollIntervalReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[131]);
}

// ===================================================================

class PollInterval::_Internal {
 public:
  static const ::sliverpb::Response& response(const PollInterval* msg);
};

const ::sliverpb::Response&
PollInterval::_Internal::response(const PollInterval* msg) {
  return *msg->_impl_.response_;
}
void PollInterval::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
PollInterval::PollInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.PollInterval)
}
PollInterval::PollInterval(const PollInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.PollInterval)
}

inline void PollInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PollInterval::~PollInterval() {
  // @@protoc_insertion_point(destructor:sliverpb.PollInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void PollInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.PollInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.PollInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.PollInterval)
  return target;
}

size_t PollInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.PollInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollInterval::GetClassData() const { return &_class_data_; }


void PollInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollInterval*>(&to_msg);
  auto& from = static_cast<const PollInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.PollInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollInterval::CopyFrom(const PollInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.PollInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollInterval::IsInitialized() const {
  return true;
}

void PollInterval::InternalSwap(PollInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[132]);
}

// ===================================================================

class SSHCommandReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const SSHCommandReq* msg);
};

const ::sliverpb::Request&
SSHCommandReq::_Internal::request(const SSHCommandReq* msg) {
  return *msg->_impl_.request_;
}
void SSHCommandReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
SSHCommandReq::SSHCommandReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SSHCommandReq)
}
SSHCommandReq::SSHCommandReq(const SSHCommandReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSHCommandReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.privkey_){}
    , decltype(_impl_.krb5conf_){}
    , decltype(_impl_.keytab_){}
    , decltype(_impl_.realm_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.privkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_privkey().empty()) {
    _this->_impl_.privkey_.Set(from._internal_privkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.krb5conf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.krb5conf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_krb5conf().empty()) {
    _this->_impl_.krb5conf_.Set(from._internal_krb5conf(), 
      _this->GetArenaForAllocation());
  }
  _impl_.keytab_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keytab_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keytab().empty()) {
    _this->_impl_.keytab_.Set(from._internal_keytab(), 
      _this->GetArenaForAllocation());
  }
  _impl_.realm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realm().empty()) {
    _this->_impl_.realm_.Set(from._internal_realm(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.SSHCommandReq)
}

inline void SSHCommandReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.privkey_){}
    , decltype(_impl_.krb5conf_){}
    , decltype(_impl_.keytab_){}
    , decltype(_impl_.realm_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.privkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.krb5conf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.krb5conf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keytab_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keytab_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSHCommandReq::~SSHCommandReq() {
  // @@protoc_insertion_point(destructor:sliverpb.SSHCommandReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSHCommandReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.command_.Destroy();
  _impl_.password_.Destroy();
  _impl_.privkey_.Destroy();
  _impl_.krb5conf_.Destroy();
  _impl_.keytab_.Destroy();
  _impl_.realm_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void SSHCommandReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSHCommandReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SSHCommandReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.command_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.privkey_.ClearToEmpty();
  _impl_.krb5conf_.ClearToEmpty();
  _impl_.keytab_.ClearToEmpty();
  _impl_.realm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSHCommandReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommandReq.Username"));
        } else
          goto handle_unusual;
        continue;
      // string Hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommandReq.Hostname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommandReq.Command"));
        } else
          goto handle_unusual;
        continue;
      // string Password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommandReq.Password"));
        } else
          goto handle_unusual;
        continue;
      // bytes PrivKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_privkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Krb5Conf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_krb5conf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommandReq.Krb5Conf"));
        } else
          goto handle_unusual;
        continue;
      // bytes Keytab = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_keytab();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Realm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_realm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommandReq.Realm"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSHCommandReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SSHCommandReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommandReq.Username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string Hostname = 2;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommandReq.Hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // uint32 Port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // string Command = 4;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommandReq.Command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command(), target);
  }

  // string Password = 5;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommandReq.Password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_password(), target);
  }

  // bytes PrivKey = 6;
  if (!this->_internal_privkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_privkey(), target);
  }

  // string Krb5Conf = 7;
  if (!this->_internal_krb5conf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_krb5conf().data(), static_cast<int>(this->_internal_krb5conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommandReq.Krb5Conf");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_krb5conf(), target);
  }

  // bytes Keytab = 8;
  if (!this->_internal_keytab().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_keytab(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // string Realm = 10;
  if (!this->_internal_realm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realm().data(), static_cast<int>(this->_internal_realm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommandReq.Realm");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_realm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SSHCommandReq)
  return target;
}

size_t SSHCommandReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SSHCommandReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Hostname = 2;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string Command = 4;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string Password = 5;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // bytes PrivKey = 6;
  if (!this->_internal_privkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privkey());
  }

  // string Krb5Conf = 7;
  if (!this->_internal_krb5conf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_krb5conf());
  }

  // bytes Keytab = 8;
  if (!this->_internal_keytab().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keytab());
  }

  // string Realm = 10;
  if (!this->_internal_realm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realm());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 Port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSHCommandReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSHCommandReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSHCommandReq::GetClassData() const { return &_class_data_; }


void SSHCommandReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSHCommandReq*>(&to_msg);
  auto& from = static_cast<const SSHCommandReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SSHCommandReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_privkey().empty()) {
    _this->_internal_set_privkey(from._internal_privkey());
  }
  if (!from._internal_krb5conf().empty()) {
    _this->_internal_set_krb5conf(from._internal_krb5conf());
  }
  if (!from._internal_keytab().empty()) {
    _this->_internal_set_keytab(from._internal_keytab());
  }
  if (!from._internal_realm().empty()) {
    _this->_internal_set_realm(from._internal_realm());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSHCommandReq::CopyFrom(const SSHCommandReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SSHCommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSHCommandReq::IsInitialized() const {
  return true;
}

void SSHCommandReq::InternalSwap(SSHCommandReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.privkey_, lhs_arena,
      &other->_impl_.privkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.krb5conf_, lhs_arena,
      &other->_impl_.krb5conf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keytab_, lhs_arena,
      &other->_impl_.keytab_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realm_, lhs_arena,
      &other->_impl_.realm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSHCommandReq, _impl_.port_)
      + sizeof(SSHCommandReq::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(SSHCommandReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSHCommandReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[133]);
}

// ===================================================================

class SSHCommand::_Internal {
 public:
  static const ::sliverpb::Response& response(const SSHCommand* msg);
};

const ::sliverpb::Response&
SSHCommand::_Internal::response(const SSHCommand* msg) {
  return *msg->_impl_.response_;
}
void SSHCommand::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
SSHCommand::SSHCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.SSHCommand)
}
SSHCommand::SSHCommand(const SSHCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSHCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stdout_pb().empty()) {
    _this->_impl_.stdout_pb_.Set(from._internal_stdout_pb(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stderr_pb().empty()) {
    _this->_impl_.stderr_pb_.Set(from._internal_stderr_pb(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.SSHCommand)
}

inline void SSHCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stdout_pb_){}
    , decltype(_impl_.stderr_pb_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stdout_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stdout_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stderr_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stderr_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSHCommand::~SSHCommand() {
  // @@protoc_insertion_point(destructor:sliverpb.SSHCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSHCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stdout_pb_.Destroy();
  _impl_.stderr_pb_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SSHCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSHCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.SSHCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stdout_pb_.ClearToEmpty();
  _impl_.stderr_pb_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSHCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stdout_pb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stdout_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommand.stdout_pb"));
        } else
          goto handle_unusual;
        continue;
      // string stderr_pb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stderr_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.SSHCommand.stderr_pb"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSHCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.SSHCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stdout_pb = 1;
  if (!this->_internal_stdout_pb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout_pb().data(), static_cast<int>(this->_internal_stdout_pb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommand.stdout_pb");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stdout_pb(), target);
  }

  // string stderr_pb = 2;
  if (!this->_internal_stderr_pb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr_pb().data(), static_cast<int>(this->_internal_stderr_pb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.SSHCommand.stderr_pb");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stderr_pb(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.SSHCommand)
  return target;
}

size_t SSHCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.SSHCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stdout_pb = 1;
  if (!this->_internal_stdout_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout_pb());
  }

  // string stderr_pb = 2;
  if (!this->_internal_stderr_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr_pb());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSHCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSHCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSHCommand::GetClassData() const { return &_class_data_; }


void SSHCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSHCommand*>(&to_msg);
  auto& from = static_cast<const SSHCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.SSHCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stdout_pb().empty()) {
    _this->_internal_set_stdout_pb(from._internal_stdout_pb());
  }
  if (!from._internal_stderr_pb().empty()) {
    _this->_internal_set_stderr_pb(from._internal_stderr_pb());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSHCommand::CopyFrom(const SSHCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.SSHCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSHCommand::IsInitialized() const {
  return true;
}

void SSHCommand::InternalSwap(SSHCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stdout_pb_, lhs_arena,
      &other->_impl_.stdout_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stderr_pb_, lhs_arena,
      &other->_impl_.stderr_pb_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSHCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[134]);
}

// ===================================================================

class GetPrivsReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const GetPrivsReq* msg);
};

const ::sliverpb::Request&
GetPrivsReq::_Internal::request(const GetPrivsReq* msg) {
  return *msg->_impl_.request_;
}
void GetPrivsReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
GetPrivsReq::GetPrivsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.GetPrivsReq)
}
GetPrivsReq::GetPrivsReq(const GetPrivsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPrivsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.GetPrivsReq)
}

inline void GetPrivsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPrivsReq::~GetPrivsReq() {
  // @@protoc_insertion_point(destructor:sliverpb.GetPrivsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPrivsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void GetPrivsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPrivsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.GetPrivsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPrivsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPrivsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.GetPrivsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.GetPrivsReq)
  return target;
}

size_t GetPrivsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.GetPrivsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPrivsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPrivsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPrivsReq::GetClassData() const { return &_class_data_; }


void GetPrivsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPrivsReq*>(&to_msg);
  auto& from = static_cast<const GetPrivsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.GetPrivsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPrivsReq::CopyFrom(const GetPrivsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.GetPrivsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrivsReq::IsInitialized() const {
  return true;
}

void GetPrivsReq::InternalSwap(GetPrivsReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPrivsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[135]);
}

// ===================================================================

class WindowsPrivilegeEntry::_Internal {
 public:
};

WindowsPrivilegeEntry::WindowsPrivilegeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.WindowsPrivilegeEntry)
}
WindowsPrivilegeEntry::WindowsPrivilegeEntry(const WindowsPrivilegeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WindowsPrivilegeEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.enabledbydefault_){}
    , decltype(_impl_.removed_){}
    , decltype(_impl_.usedforaccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usedforaccess_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.usedforaccess_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.WindowsPrivilegeEntry)
}

inline void WindowsPrivilegeEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.enabledbydefault_){false}
    , decltype(_impl_.removed_){false}
    , decltype(_impl_.usedforaccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WindowsPrivilegeEntry::~WindowsPrivilegeEntry() {
  // @@protoc_insertion_point(destructor:sliverpb.WindowsPrivilegeEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WindowsPrivilegeEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void WindowsPrivilegeEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WindowsPrivilegeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.WindowsPrivilegeEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usedforaccess_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.usedforaccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowsPrivilegeEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.WindowsPrivilegeEntry.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.WindowsPrivilegeEntry.Description"));
        } else
          goto handle_unusual;
        continue;
      // bool Enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EnabledByDefault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enabledbydefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool UsedForAccess = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.usedforaccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WindowsPrivilegeEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.WindowsPrivilegeEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.WindowsPrivilegeEntry.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.WindowsPrivilegeEntry.Description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool Enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  // bool EnabledByDefault = 4;
  if (this->_internal_enabledbydefault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enabledbydefault(), target);
  }

  // bool Removed = 5;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_removed(), target);
  }

  // bool UsedForAccess = 6;
  if (this->_internal_usedforaccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_usedforaccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.WindowsPrivilegeEntry)
  return target;
}

size_t WindowsPrivilegeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.WindowsPrivilegeEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool Enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool EnabledByDefault = 4;
  if (this->_internal_enabledbydefault() != 0) {
    total_size += 1 + 1;
  }

  // bool Removed = 5;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  // bool UsedForAccess = 6;
  if (this->_internal_usedforaccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WindowsPrivilegeEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WindowsPrivilegeEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WindowsPrivilegeEntry::GetClassData() const { return &_class_data_; }


void WindowsPrivilegeEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WindowsPrivilegeEntry*>(&to_msg);
  auto& from = static_cast<const WindowsPrivilegeEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.WindowsPrivilegeEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_enabledbydefault() != 0) {
    _this->_internal_set_enabledbydefault(from._internal_enabledbydefault());
  }
  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  if (from._internal_usedforaccess() != 0) {
    _this->_internal_set_usedforaccess(from._internal_usedforaccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WindowsPrivilegeEntry::CopyFrom(const WindowsPrivilegeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.WindowsPrivilegeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowsPrivilegeEntry::IsInitialized() const {
  return true;
}

void WindowsPrivilegeEntry::InternalSwap(WindowsPrivilegeEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowsPrivilegeEntry, _impl_.usedforaccess_)
      + sizeof(WindowsPrivilegeEntry::_impl_.usedforaccess_)
      - PROTOBUF_FIELD_OFFSET(WindowsPrivilegeEntry, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowsPrivilegeEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[136]);
}

// ===================================================================

class GetPrivs::_Internal {
 public:
  static const ::sliverpb::Response& response(const GetPrivs* msg);
};

const ::sliverpb::Response&
GetPrivs::_Internal::response(const GetPrivs* msg) {
  return *msg->_impl_.response_;
}
void GetPrivs::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
GetPrivs::GetPrivs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.GetPrivs)
}
GetPrivs::GetPrivs(const GetPrivs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPrivs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.privinfo_){from._impl_.privinfo_}
    , decltype(_impl_.processintegrity_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.processintegrity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processintegrity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processintegrity().empty()) {
    _this->_impl_.processintegrity_.Set(from._internal_processintegrity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processname().empty()) {
    _this->_impl_.processname_.Set(from._internal_processname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.GetPrivs)
}

inline void GetPrivs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.privinfo_){arena}
    , decltype(_impl_.processintegrity_){}
    , decltype(_impl_.processname_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.processintegrity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processintegrity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPrivs::~GetPrivs() {
  // @@protoc_insertion_point(destructor:sliverpb.GetPrivs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPrivs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privinfo_.~RepeatedPtrField();
  _impl_.processintegrity_.Destroy();
  _impl_.processname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void GetPrivs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPrivs::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.GetPrivs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privinfo_.Clear();
  _impl_.processintegrity_.ClearToEmpty();
  _impl_.processname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPrivs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.WindowsPrivilegeEntry PrivInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_privinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ProcessIntegrity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processintegrity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.GetPrivs.ProcessIntegrity"));
        } else
          goto handle_unusual;
        continue;
      // string ProcessName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_processname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.GetPrivs.ProcessName"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPrivs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.GetPrivs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.WindowsPrivilegeEntry PrivInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_privinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_privinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ProcessIntegrity = 2;
  if (!this->_internal_processintegrity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processintegrity().data(), static_cast<int>(this->_internal_processintegrity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.GetPrivs.ProcessIntegrity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processintegrity(), target);
  }

  // string ProcessName = 3;
  if (!this->_internal_processname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.GetPrivs.ProcessName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_processname(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.GetPrivs)
  return target;
}

size_t GetPrivs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.GetPrivs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.WindowsPrivilegeEntry PrivInfo = 1;
  total_size += 1UL * this->_internal_privinfo_size();
  for (const auto& msg : this->_impl_.privinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ProcessIntegrity = 2;
  if (!this->_internal_processintegrity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processintegrity());
  }

  // string ProcessName = 3;
  if (!this->_internal_processname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPrivs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPrivs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPrivs::GetClassData() const { return &_class_data_; }


void GetPrivs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPrivs*>(&to_msg);
  auto& from = static_cast<const GetPrivs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.GetPrivs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privinfo_.MergeFrom(from._impl_.privinfo_);
  if (!from._internal_processintegrity().empty()) {
    _this->_internal_set_processintegrity(from._internal_processintegrity());
  }
  if (!from._internal_processname().empty()) {
    _this->_internal_set_processname(from._internal_processname());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPrivs::CopyFrom(const GetPrivs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.GetPrivs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrivs::IsInitialized() const {
  return true;
}

void GetPrivs::InternalSwap(GetPrivs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.privinfo_.InternalSwap(&other->_impl_.privinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processintegrity_, lhs_arena,
      &other->_impl_.processintegrity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processname_, lhs_arena,
      &other->_impl_.processname_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPrivs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[137]);
}

// ===================================================================

class RegisterExtensionReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RegisterExtensionReq* msg);
};

const ::sliverpb::Request&
RegisterExtensionReq::_Internal::request(const RegisterExtensionReq* msg) {
  return *msg->_impl_.request_;
}
void RegisterExtensionReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RegisterExtensionReq::RegisterExtensionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegisterExtensionReq)
}
RegisterExtensionReq::RegisterExtensionReq(const RegisterExtensionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterExtensionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.init_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    _this->_impl_.os_.Set(from._internal_os(), 
      _this->GetArenaForAllocation());
  }
  _impl_.init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.init_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_init().empty()) {
    _this->_impl_.init_.Set(from._internal_init(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegisterExtensionReq)
}

inline void RegisterExtensionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.init_){}
    , decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.init_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterExtensionReq::~RegisterExtensionReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RegisterExtensionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterExtensionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.data_.Destroy();
  _impl_.os_.Destroy();
  _impl_.init_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RegisterExtensionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterExtensionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegisterExtensionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.os_.ClearToEmpty();
  _impl_.init_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterExtensionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegisterExtensionReq.Name"));
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegisterExtensionReq.OS"));
        } else
          goto handle_unusual;
        continue;
      // string Init = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_init();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RegisterExtensionReq.Init"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterExtensionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegisterExtensionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegisterExtensionReq.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes Data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string OS = 3;
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegisterExtensionReq.OS");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_os(), target);
  }

  // string Init = 4;
  if (!this->_internal_init().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_init().data(), static_cast<int>(this->_internal_init().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RegisterExtensionReq.Init");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_init(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegisterExtensionReq)
  return target;
}

size_t RegisterExtensionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegisterExtensionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes Data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string OS = 3;
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string Init = 4;
  if (!this->_internal_init().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_init());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterExtensionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterExtensionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterExtensionReq::GetClassData() const { return &_class_data_; }


void RegisterExtensionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterExtensionReq*>(&to_msg);
  auto& from = static_cast<const RegisterExtensionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegisterExtensionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_os().empty()) {
    _this->_internal_set_os(from._internal_os());
  }
  if (!from._internal_init().empty()) {
    _this->_internal_set_init(from._internal_init());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterExtensionReq::CopyFrom(const RegisterExtensionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegisterExtensionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterExtensionReq::IsInitialized() const {
  return true;
}

void RegisterExtensionReq::InternalSwap(RegisterExtensionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_, lhs_arena,
      &other->_impl_.os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.init_, lhs_arena,
      &other->_impl_.init_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterExtensionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[138]);
}

// ===================================================================

class RegisterExtension::_Internal {
 public:
  static const ::sliverpb::Response& response(const RegisterExtension* msg);
};

const ::sliverpb::Response&
RegisterExtension::_Internal::response(const RegisterExtension* msg) {
  return *msg->_impl_.response_;
}
void RegisterExtension::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RegisterExtension::RegisterExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RegisterExtension)
}
RegisterExtension::RegisterExtension(const RegisterExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RegisterExtension)
}

inline void RegisterExtension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterExtension::~RegisterExtension() {
  // @@protoc_insertion_point(destructor:sliverpb.RegisterExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RegisterExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RegisterExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RegisterExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RegisterExtension)
  return target;
}

size_t RegisterExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RegisterExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterExtension::GetClassData() const { return &_class_data_; }


void RegisterExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterExtension*>(&to_msg);
  auto& from = static_cast<const RegisterExtension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RegisterExtension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterExtension::CopyFrom(const RegisterExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RegisterExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterExtension::IsInitialized() const {
  return true;
}

void RegisterExtension::InternalSwap(RegisterExtension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[139]);
}

// ===================================================================

class CallExtensionReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const CallExtensionReq* msg);
};

const ::sliverpb::Request&
CallExtensionReq::_Internal::request(const CallExtensionReq* msg) {
  return *msg->_impl_.request_;
}
void CallExtensionReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
CallExtensionReq::CallExtensionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.CallExtensionReq)
}
CallExtensionReq::CallExtensionReq(const CallExtensionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallExtensionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.export__){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.serverstore_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  _impl_.export__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.export__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_export_().empty()) {
    _this->_impl_.export__.Set(from._internal_export_(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.serverstore_ = from._impl_.serverstore_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.CallExtensionReq)
}

inline void CallExtensionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.export__){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.serverstore_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.export__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.export__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallExtensionReq::~CallExtensionReq() {
  // @@protoc_insertion_point(destructor:sliverpb.CallExtensionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallExtensionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.args_.Destroy();
  _impl_.export__.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void CallExtensionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallExtensionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.CallExtensionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _impl_.export__.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.serverstore_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallExtensionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.CallExtensionReq.Name"));
        } else
          goto handle_unusual;
        continue;
      // bool ServerStore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serverstore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Export = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_export_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.CallExtensionReq.Export"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallExtensionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.CallExtensionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.CallExtensionReq.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool ServerStore = 2;
  if (this->_internal_serverstore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_serverstore(), target);
  }

  // bytes Args = 3;
  if (!this->_internal_args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  // string Export = 4;
  if (!this->_internal_export_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_export_().data(), static_cast<int>(this->_internal_export_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.CallExtensionReq.Export");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_export_(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.CallExtensionReq)
  return target;
}

size_t CallExtensionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.CallExtensionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes Args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // string Export = 4;
  if (!this->_internal_export_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_export_());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // bool ServerStore = 2;
  if (this->_internal_serverstore() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallExtensionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallExtensionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallExtensionReq::GetClassData() const { return &_class_data_; }


void CallExtensionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallExtensionReq*>(&to_msg);
  auto& from = static_cast<const CallExtensionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.CallExtensionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (!from._internal_export_().empty()) {
    _this->_internal_set_export_(from._internal_export_());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_serverstore() != 0) {
    _this->_internal_set_serverstore(from._internal_serverstore());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallExtensionReq::CopyFrom(const CallExtensionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.CallExtensionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallExtensionReq::IsInitialized() const {
  return true;
}

void CallExtensionReq::InternalSwap(CallExtensionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.export__, lhs_arena,
      &other->_impl_.export__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallExtensionReq, _impl_.serverstore_)
      + sizeof(CallExtensionReq::_impl_.serverstore_)
      - PROTOBUF_FIELD_OFFSET(CallExtensionReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallExtensionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[140]);
}

// ===================================================================

class CallExtension::_Internal {
 public:
  static const ::sliverpb::Response& response(const CallExtension* msg);
};

const ::sliverpb::Response&
CallExtension::_Internal::response(const CallExtension* msg) {
  return *msg->_impl_.response_;
}
void CallExtension::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
CallExtension::CallExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.CallExtension)
}
CallExtension::CallExtension(const CallExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.serverstore_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  _this->_impl_.serverstore_ = from._impl_.serverstore_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.CallExtension)
}

inline void CallExtension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.serverstore_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallExtension::~CallExtension() {
  // @@protoc_insertion_point(destructor:sliverpb.CallExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void CallExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.CallExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_.serverstore_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ServerStore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serverstore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.CallExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Output = 1;
  if (!this->_internal_output().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_output(), target);
  }

  // bool ServerStore = 2;
  if (this->_internal_serverstore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_serverstore(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.CallExtension)
  return target;
}

size_t CallExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.CallExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // bool ServerStore = 2;
  if (this->_internal_serverstore() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallExtension::GetClassData() const { return &_class_data_; }


void CallExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallExtension*>(&to_msg);
  auto& from = static_cast<const CallExtension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.CallExtension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_serverstore() != 0) {
    _this->_internal_set_serverstore(from._internal_serverstore());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallExtension::CopyFrom(const CallExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.CallExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallExtension::IsInitialized() const {
  return true;
}

void CallExtension::InternalSwap(CallExtension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallExtension, _impl_.serverstore_)
      + sizeof(CallExtension::_impl_.serverstore_)
      - PROTOBUF_FIELD_OFFSET(CallExtension, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[141]);
}

// ===================================================================

class ListExtensionsReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const ListExtensionsReq* msg);
};

const ::sliverpb::Request&
ListExtensionsReq::_Internal::request(const ListExtensionsReq* msg) {
  return *msg->_impl_.request_;
}
void ListExtensionsReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
ListExtensionsReq::ListExtensionsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ListExtensionsReq)
}
ListExtensionsReq::ListExtensionsReq(const ListExtensionsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListExtensionsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ListExtensionsReq)
}

inline void ListExtensionsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListExtensionsReq::~ListExtensionsReq() {
  // @@protoc_insertion_point(destructor:sliverpb.ListExtensionsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListExtensionsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void ListExtensionsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListExtensionsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ListExtensionsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListExtensionsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListExtensionsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ListExtensionsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ListExtensionsReq)
  return target;
}

size_t ListExtensionsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ListExtensionsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListExtensionsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListExtensionsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListExtensionsReq::GetClassData() const { return &_class_data_; }


void ListExtensionsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListExtensionsReq*>(&to_msg);
  auto& from = static_cast<const ListExtensionsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ListExtensionsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListExtensionsReq::CopyFrom(const ListExtensionsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ListExtensionsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListExtensionsReq::IsInitialized() const {
  return true;
}

void ListExtensionsReq::InternalSwap(ListExtensionsReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListExtensionsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[142]);
}

// ===================================================================

class ListExtensions::_Internal {
 public:
  static const ::sliverpb::Response& response(const ListExtensions* msg);
};

const ::sliverpb::Response&
ListExtensions::_Internal::response(const ListExtensions* msg) {
  return *msg->_impl_.response_;
}
void ListExtensions::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
ListExtensions::ListExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.ListExtensions)
}
ListExtensions::ListExtensions(const ListExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListExtensions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.ListExtensions)
}

inline void ListExtensions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListExtensions::~ListExtensions() {
  // @@protoc_insertion_point(destructor:sliverpb.ListExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void ListExtensions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.ListExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string Names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sliverpb.ListExtensions.Names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.ListExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.ListExtensions.Names");
    target = stream->WriteString(1, s, target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.ListExtensions)
  return target;
}

size_t ListExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.ListExtensions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListExtensions::GetClassData() const { return &_class_data_; }


void ListExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListExtensions*>(&to_msg);
  auto& from = static_cast<const ListExtensions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.ListExtensions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListExtensions::CopyFrom(const ListExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.ListExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListExtensions::IsInitialized() const {
  return true;
}

void ListExtensions::InternalSwap(ListExtensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[143]);
}

// ===================================================================

class RportFwdStopListenerReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RportFwdStopListenerReq* msg);
};

const ::sliverpb::Request&
RportFwdStopListenerReq::_Internal::request(const RportFwdStopListenerReq* msg) {
  return *msg->_impl_.request_;
}
void RportFwdStopListenerReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RportFwdStopListenerReq::RportFwdStopListenerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RportFwdStopListenerReq)
}
RportFwdStopListenerReq::RportFwdStopListenerReq(const RportFwdStopListenerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RportFwdStopListenerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sliverpb.RportFwdStopListenerReq)
}

inline void RportFwdStopListenerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RportFwdStopListenerReq::~RportFwdStopListenerReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RportFwdStopListenerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RportFwdStopListenerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RportFwdStopListenerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RportFwdStopListenerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RportFwdStopListenerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RportFwdStopListenerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RportFwdStopListenerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RportFwdStopListenerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RportFwdStopListenerReq)
  return target;
}

size_t RportFwdStopListenerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RportFwdStopListenerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RportFwdStopListenerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RportFwdStopListenerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RportFwdStopListenerReq::GetClassData() const { return &_class_data_; }


void RportFwdStopListenerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RportFwdStopListenerReq*>(&to_msg);
  auto& from = static_cast<const RportFwdStopListenerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RportFwdStopListenerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RportFwdStopListenerReq::CopyFrom(const RportFwdStopListenerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RportFwdStopListenerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RportFwdStopListenerReq::IsInitialized() const {
  return true;
}

void RportFwdStopListenerReq::InternalSwap(RportFwdStopListenerReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RportFwdStopListenerReq, _impl_.id_)
      + sizeof(RportFwdStopListenerReq::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(RportFwdStopListenerReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RportFwdStopListenerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[144]);
}

// ===================================================================

class RportFwdStartListenerReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RportFwdStartListenerReq* msg);
};

const ::sliverpb::Request&
RportFwdStartListenerReq::_Internal::request(const RportFwdStartListenerReq* msg) {
  return *msg->_impl_.request_;
}
void RportFwdStartListenerReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RportFwdStartListenerReq::RportFwdStartListenerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RportFwdStartListenerReq)
}
RportFwdStartListenerReq::RportFwdStartListenerReq(const RportFwdStartListenerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RportFwdStartListenerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bindaddress_){}
    , decltype(_impl_.forwardaddress_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.bindport_){}
    , decltype(_impl_.forwardport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bindaddress().empty()) {
    _this->_impl_.bindaddress_.Set(from._internal_bindaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.forwardaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forwardaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forwardaddress().empty()) {
    _this->_impl_.forwardaddress_.Set(from._internal_forwardaddress(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.bindport_, &from._impl_.bindport_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.forwardport_) -
    reinterpret_cast<char*>(&_impl_.bindport_)) + sizeof(_impl_.forwardport_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RportFwdStartListenerReq)
}

inline void RportFwdStartListenerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bindaddress_){}
    , decltype(_impl_.forwardaddress_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.bindport_){0u}
    , decltype(_impl_.forwardport_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forwardaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forwardaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RportFwdStartListenerReq::~RportFwdStartListenerReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RportFwdStartListenerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RportFwdStartListenerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bindaddress_.Destroy();
  _impl_.forwardaddress_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RportFwdStartListenerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RportFwdStartListenerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RportFwdStartListenerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bindaddress_.ClearToEmpty();
  _impl_.forwardaddress_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.bindport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.forwardport_) -
      reinterpret_cast<char*>(&_impl_.bindport_)) + sizeof(_impl_.forwardport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RportFwdStartListenerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BindAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bindaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RportFwdStartListenerReq.BindAddress"));
        } else
          goto handle_unusual;
        continue;
      // uint32 BindPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bindport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 forwardPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.forwardport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string forwardAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_forwardaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RportFwdStartListenerReq.forwardAddress"));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RportFwdStartListenerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RportFwdStartListenerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BindAddress = 1;
  if (!this->_internal_bindaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bindaddress().data(), static_cast<int>(this->_internal_bindaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RportFwdStartListenerReq.BindAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bindaddress(), target);
  }

  // uint32 BindPort = 2;
  if (this->_internal_bindport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bindport(), target);
  }

  // uint32 forwardPort = 3;
  if (this->_internal_forwardport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_forwardport(), target);
  }

  // string forwardAddress = 4;
  if (!this->_internal_forwardaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_forwardaddress().data(), static_cast<int>(this->_internal_forwardaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RportFwdStartListenerReq.forwardAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_forwardaddress(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RportFwdStartListenerReq)
  return target;
}

size_t RportFwdStartListenerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RportFwdStartListenerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BindAddress = 1;
  if (!this->_internal_bindaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bindaddress());
  }

  // string forwardAddress = 4;
  if (!this->_internal_forwardaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_forwardaddress());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 BindPort = 2;
  if (this->_internal_bindport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bindport());
  }

  // uint32 forwardPort = 3;
  if (this->_internal_forwardport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_forwardport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RportFwdStartListenerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RportFwdStartListenerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RportFwdStartListenerReq::GetClassData() const { return &_class_data_; }


void RportFwdStartListenerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RportFwdStartListenerReq*>(&to_msg);
  auto& from = static_cast<const RportFwdStartListenerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RportFwdStartListenerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bindaddress().empty()) {
    _this->_internal_set_bindaddress(from._internal_bindaddress());
  }
  if (!from._internal_forwardaddress().empty()) {
    _this->_internal_set_forwardaddress(from._internal_forwardaddress());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_bindport() != 0) {
    _this->_internal_set_bindport(from._internal_bindport());
  }
  if (from._internal_forwardport() != 0) {
    _this->_internal_set_forwardport(from._internal_forwardport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RportFwdStartListenerReq::CopyFrom(const RportFwdStartListenerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RportFwdStartListenerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RportFwdStartListenerReq::IsInitialized() const {
  return true;
}

void RportFwdStartListenerReq::InternalSwap(RportFwdStartListenerReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bindaddress_, lhs_arena,
      &other->_impl_.bindaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.forwardaddress_, lhs_arena,
      &other->_impl_.forwardaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RportFwdStartListenerReq, _impl_.forwardport_)
      + sizeof(RportFwdStartListenerReq::_impl_.forwardport_)
      - PROTOBUF_FIELD_OFFSET(RportFwdStartListenerReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RportFwdStartListenerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[145]);
}

// ===================================================================

class RportFwdListener::_Internal {
 public:
  static const ::sliverpb::Response& response(const RportFwdListener* msg);
};

const ::sliverpb::Response&
RportFwdListener::_Internal::response(const RportFwdListener* msg) {
  return *msg->_impl_.response_;
}
void RportFwdListener::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RportFwdListener::RportFwdListener(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RportFwdListener)
}
RportFwdListener::RportFwdListener(const RportFwdListener& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RportFwdListener* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bindaddress_){}
    , decltype(_impl_.forwardaddress_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.bindport_){}
    , decltype(_impl_.forwardport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bindaddress().empty()) {
    _this->_impl_.bindaddress_.Set(from._internal_bindaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.forwardaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forwardaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forwardaddress().empty()) {
    _this->_impl_.forwardaddress_.Set(from._internal_forwardaddress(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.forwardport_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.forwardport_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RportFwdListener)
}

inline void RportFwdListener::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bindaddress_){}
    , decltype(_impl_.forwardaddress_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.bindport_){0u}
    , decltype(_impl_.forwardport_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bindaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forwardaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forwardaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RportFwdListener::~RportFwdListener() {
  // @@protoc_insertion_point(destructor:sliverpb.RportFwdListener)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RportFwdListener::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bindaddress_.Destroy();
  _impl_.forwardaddress_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RportFwdListener::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RportFwdListener::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RportFwdListener)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bindaddress_.ClearToEmpty();
  _impl_.forwardaddress_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.forwardport_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.forwardport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RportFwdListener::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BindAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bindaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RportFwdListener.BindAddress"));
        } else
          goto handle_unusual;
        continue;
      // uint32 bindPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bindport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string forwardAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_forwardaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RportFwdListener.forwardAddress"));
        } else
          goto handle_unusual;
        continue;
      // uint32 forwardPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.forwardport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RportFwdListener::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RportFwdListener)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string BindAddress = 2;
  if (!this->_internal_bindaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bindaddress().data(), static_cast<int>(this->_internal_bindaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RportFwdListener.BindAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bindaddress(), target);
  }

  // uint32 bindPort = 3;
  if (this->_internal_bindport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bindport(), target);
  }

  // string forwardAddress = 4;
  if (!this->_internal_forwardaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_forwardaddress().data(), static_cast<int>(this->_internal_forwardaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RportFwdListener.forwardAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_forwardaddress(), target);
  }

  // uint32 forwardPort = 5;
  if (this->_internal_forwardport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_forwardport(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RportFwdListener)
  return target;
}

size_t RportFwdListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RportFwdListener)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BindAddress = 2;
  if (!this->_internal_bindaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bindaddress());
  }

  // string forwardAddress = 4;
  if (!this->_internal_forwardaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_forwardaddress());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 bindPort = 3;
  if (this->_internal_bindport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bindport());
  }

  // uint32 forwardPort = 5;
  if (this->_internal_forwardport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_forwardport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RportFwdListener::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RportFwdListener::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RportFwdListener::GetClassData() const { return &_class_data_; }


void RportFwdListener::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RportFwdListener*>(&to_msg);
  auto& from = static_cast<const RportFwdListener&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RportFwdListener)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bindaddress().empty()) {
    _this->_internal_set_bindaddress(from._internal_bindaddress());
  }
  if (!from._internal_forwardaddress().empty()) {
    _this->_internal_set_forwardaddress(from._internal_forwardaddress());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_bindport() != 0) {
    _this->_internal_set_bindport(from._internal_bindport());
  }
  if (from._internal_forwardport() != 0) {
    _this->_internal_set_forwardport(from._internal_forwardport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RportFwdListener::CopyFrom(const RportFwdListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RportFwdListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RportFwdListener::IsInitialized() const {
  return true;
}

void RportFwdListener::InternalSwap(RportFwdListener* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bindaddress_, lhs_arena,
      &other->_impl_.bindaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.forwardaddress_, lhs_arena,
      &other->_impl_.forwardaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RportFwdListener, _impl_.forwardport_)
      + sizeof(RportFwdListener::_impl_.forwardport_)
      - PROTOBUF_FIELD_OFFSET(RportFwdListener, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RportFwdListener::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[146]);
}

// ===================================================================

class RportFwdListeners::_Internal {
 public:
  static const ::sliverpb::Response& response(const RportFwdListeners* msg);
};

const ::sliverpb::Response&
RportFwdListeners::_Internal::response(const RportFwdListeners* msg) {
  return *msg->_impl_.response_;
}
void RportFwdListeners::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RportFwdListeners::RportFwdListeners(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RportFwdListeners)
}
RportFwdListeners::RportFwdListeners(const RportFwdListeners& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RportFwdListeners* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listeners_){from._impl_.listeners_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RportFwdListeners)
}

inline void RportFwdListeners::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listeners_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RportFwdListeners::~RportFwdListeners() {
  // @@protoc_insertion_point(destructor:sliverpb.RportFwdListeners)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RportFwdListeners::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listeners_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RportFwdListeners::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RportFwdListeners::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RportFwdListeners)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listeners_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RportFwdListeners::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sliverpb.RportFwdListener Listeners = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listeners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RportFwdListeners::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RportFwdListeners)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sliverpb.RportFwdListener Listeners = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_listeners_size()); i < n; i++) {
    const auto& repfield = this->_internal_listeners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RportFwdListeners)
  return target;
}

size_t RportFwdListeners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RportFwdListeners)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sliverpb.RportFwdListener Listeners = 1;
  total_size += 1UL * this->_internal_listeners_size();
  for (const auto& msg : this->_impl_.listeners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RportFwdListeners::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RportFwdListeners::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RportFwdListeners::GetClassData() const { return &_class_data_; }


void RportFwdListeners::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RportFwdListeners*>(&to_msg);
  auto& from = static_cast<const RportFwdListeners&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RportFwdListeners)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listeners_.MergeFrom(from._impl_.listeners_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RportFwdListeners::CopyFrom(const RportFwdListeners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RportFwdListeners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RportFwdListeners::IsInitialized() const {
  return true;
}

void RportFwdListeners::InternalSwap(RportFwdListeners* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.listeners_.InternalSwap(&other->_impl_.listeners_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RportFwdListeners::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[147]);
}

// ===================================================================

class RportFwdListenersReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RportFwdListenersReq* msg);
};

const ::sliverpb::Request&
RportFwdListenersReq::_Internal::request(const RportFwdListenersReq* msg) {
  return *msg->_impl_.request_;
}
void RportFwdListenersReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RportFwdListenersReq::RportFwdListenersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RportFwdListenersReq)
}
RportFwdListenersReq::RportFwdListenersReq(const RportFwdListenersReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RportFwdListenersReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:sliverpb.RportFwdListenersReq)
}

inline void RportFwdListenersReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RportFwdListenersReq::~RportFwdListenersReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RportFwdListenersReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RportFwdListenersReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RportFwdListenersReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RportFwdListenersReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RportFwdListenersReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RportFwdListenersReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RportFwdListenersReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RportFwdListenersReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RportFwdListenersReq)
  return target;
}

size_t RportFwdListenersReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RportFwdListenersReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RportFwdListenersReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RportFwdListenersReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RportFwdListenersReq::GetClassData() const { return &_class_data_; }


void RportFwdListenersReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RportFwdListenersReq*>(&to_msg);
  auto& from = static_cast<const RportFwdListenersReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RportFwdListenersReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RportFwdListenersReq::CopyFrom(const RportFwdListenersReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RportFwdListenersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RportFwdListenersReq::IsInitialized() const {
  return true;
}

void RportFwdListenersReq::InternalSwap(RportFwdListenersReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RportFwdListenersReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[148]);
}

// ===================================================================

class RPortfwd::_Internal {
 public:
  static const ::sliverpb::Response& response(const RPortfwd* msg);
};

const ::sliverpb::Response&
RPortfwd::_Internal::response(const RPortfwd* msg) {
  return *msg->_impl_.response_;
}
void RPortfwd::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
RPortfwd::RPortfwd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RPortfwd)
}
RPortfwd::RPortfwd(const RPortfwd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPortfwd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::sliverpb::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tunnelid_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RPortfwd)
}

inline void RPortfwd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPortfwd::~RPortfwd() {
  // @@protoc_insertion_point(destructor:sliverpb.RPortfwd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPortfwd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void RPortfwd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPortfwd::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RPortfwd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tunnelid_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPortfwd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RPortfwd.Host"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Response Response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPortfwd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RPortfwd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocol(), target);
  }

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RPortfwd.Host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RPortfwd)
  return target;
}

size_t RPortfwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RPortfwd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // .sliverpb.Response Response = 9;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPortfwd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPortfwd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPortfwd::GetClassData() const { return &_class_data_; }


void RPortfwd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPortfwd*>(&to_msg);
  auto& from = static_cast<const RPortfwd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RPortfwd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::sliverpb::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPortfwd::CopyFrom(const RPortfwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RPortfwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPortfwd::IsInitialized() const {
  return true;
}

void RPortfwd::InternalSwap(RPortfwd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPortfwd, _impl_.tunnelid_)
      + sizeof(RPortfwd::_impl_.tunnelid_)
      - PROTOBUF_FIELD_OFFSET(RPortfwd, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPortfwd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[149]);
}

// ===================================================================

class RPortfwdReq::_Internal {
 public:
  static const ::sliverpb::Request& request(const RPortfwdReq* msg);
};

const ::sliverpb::Request&
RPortfwdReq::_Internal::request(const RPortfwdReq* msg) {
  return *msg->_impl_.request_;
}
void RPortfwdReq::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
RPortfwdReq::RPortfwdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sliverpb.RPortfwdReq)
}
RPortfwdReq::RPortfwdReq(const RPortfwdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPortfwdReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.tunnelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::sliverpb::Request(*from._impl_.request_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tunnelid_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  // @@protoc_insertion_point(copy_constructor:sliverpb.RPortfwdReq)
}

inline void RPortfwdReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.tunnelid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPortfwdReq::~RPortfwdReq() {
  // @@protoc_insertion_point(destructor:sliverpb.RPortfwdReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPortfwdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void RPortfwdReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPortfwdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sliverpb.RPortfwdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tunnelid_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.tunnelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPortfwdReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sliverpb.RPortfwdReq.Host"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TunnelID = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tunnelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sliverpb.Request Request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPortfwdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sliverpb.RPortfwdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocol(), target);
  }

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sliverpb.RPortfwdReq.Host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tunnelid(), target);
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sliverpb.RPortfwdReq)
  return target;
}

size_t RPortfwdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sliverpb.RPortfwdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Host = 3;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // .sliverpb.Request Request = 9;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // uint32 Port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // int32 Protocol = 2;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // uint64 TunnelID = 8 [jstype = JS_STRING];
  if (this->_internal_tunnelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tunnelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPortfwdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPortfwdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPortfwdReq::GetClassData() const { return &_class_data_; }


void RPortfwdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPortfwdReq*>(&to_msg);
  auto& from = static_cast<const RPortfwdReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sliverpb.RPortfwdReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::sliverpb::Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_tunnelid() != 0) {
    _this->_internal_set_tunnelid(from._internal_tunnelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPortfwdReq::CopyFrom(const RPortfwdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sliverpb.RPortfwdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPortfwdReq::IsInitialized() const {
  return true;
}

void RPortfwdReq::InternalSwap(RPortfwdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPortfwdReq, _impl_.tunnelid_)
      + sizeof(RPortfwdReq::_impl_.tunnelid_)
      - PROTOBUF_FIELD_OFFSET(RPortfwdReq, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPortfwdReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sliver_2eproto_getter, &descriptor_table_sliver_2eproto_once,
      file_level_metadata_sliver_2eproto[150]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sliverpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sliverpb::Envelope*
Arena::CreateMaybeMessage< ::sliverpb::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Envelope >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::BeaconTasks*
Arena::CreateMaybeMessage< ::sliverpb::BeaconTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::BeaconTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Register*
Arena::CreateMaybeMessage< ::sliverpb::Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Register >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::BeaconRegister*
Arena::CreateMaybeMessage< ::sliverpb::BeaconRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::BeaconRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SessionRegister*
Arena::CreateMaybeMessage< ::sliverpb::SessionRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SessionRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::OpenSession*
Arena::CreateMaybeMessage< ::sliverpb::OpenSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::OpenSession >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::CloseSession*
Arena::CreateMaybeMessage< ::sliverpb::CloseSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::CloseSession >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Ping*
Arena::CreateMaybeMessage< ::sliverpb::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::KillReq*
Arena::CreateMaybeMessage< ::sliverpb::KillReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::KillReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PsReq*
Arena::CreateMaybeMessage< ::sliverpb::PsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Ps*
Arena::CreateMaybeMessage< ::sliverpb::Ps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Ps >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::TerminateReq*
Arena::CreateMaybeMessage< ::sliverpb::TerminateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::TerminateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Terminate*
Arena::CreateMaybeMessage< ::sliverpb::Terminate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Terminate >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::IfconfigReq*
Arena::CreateMaybeMessage< ::sliverpb::IfconfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::IfconfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Ifconfig*
Arena::CreateMaybeMessage< ::sliverpb::Ifconfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Ifconfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::NetInterface*
Arena::CreateMaybeMessage< ::sliverpb::NetInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::NetInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::LsReq*
Arena::CreateMaybeMessage< ::sliverpb::LsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::LsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Ls*
Arena::CreateMaybeMessage< ::sliverpb::Ls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Ls >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::FileInfo*
Arena::CreateMaybeMessage< ::sliverpb::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::CdReq*
Arena::CreateMaybeMessage< ::sliverpb::CdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::CdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PwdReq*
Arena::CreateMaybeMessage< ::sliverpb::PwdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PwdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Pwd*
Arena::CreateMaybeMessage< ::sliverpb::Pwd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Pwd >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RmReq*
Arena::CreateMaybeMessage< ::sliverpb::RmReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RmReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Rm*
Arena::CreateMaybeMessage< ::sliverpb::Rm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Rm >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::MvReq*
Arena::CreateMaybeMessage< ::sliverpb::MvReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::MvReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Mv*
Arena::CreateMaybeMessage< ::sliverpb::Mv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Mv >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::MkdirReq*
Arena::CreateMaybeMessage< ::sliverpb::MkdirReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::MkdirReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Mkdir*
Arena::CreateMaybeMessage< ::sliverpb::Mkdir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Mkdir >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::DownloadReq*
Arena::CreateMaybeMessage< ::sliverpb::DownloadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::DownloadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Download*
Arena::CreateMaybeMessage< ::sliverpb::Download >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Download >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::UploadReq*
Arena::CreateMaybeMessage< ::sliverpb::UploadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::UploadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Upload*
Arena::CreateMaybeMessage< ::sliverpb::Upload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Upload >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ProcessDumpReq*
Arena::CreateMaybeMessage< ::sliverpb::ProcessDumpReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ProcessDumpReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ProcessDump*
Arena::CreateMaybeMessage< ::sliverpb::ProcessDump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ProcessDump >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RunAsReq*
Arena::CreateMaybeMessage< ::sliverpb::RunAsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RunAsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RunAs*
Arena::CreateMaybeMessage< ::sliverpb::RunAs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RunAs >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ImpersonateReq*
Arena::CreateMaybeMessage< ::sliverpb::ImpersonateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ImpersonateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Impersonate*
Arena::CreateMaybeMessage< ::sliverpb::Impersonate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Impersonate >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RevToSelfReq*
Arena::CreateMaybeMessage< ::sliverpb::RevToSelfReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RevToSelfReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RevToSelf*
Arena::CreateMaybeMessage< ::sliverpb::RevToSelf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RevToSelf >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::CurrentTokenOwnerReq*
Arena::CreateMaybeMessage< ::sliverpb::CurrentTokenOwnerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::CurrentTokenOwnerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::CurrentTokenOwner*
Arena::CreateMaybeMessage< ::sliverpb::CurrentTokenOwner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::CurrentTokenOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::InvokeGetSystemReq*
Arena::CreateMaybeMessage< ::sliverpb::InvokeGetSystemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::InvokeGetSystemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::GetSystem*
Arena::CreateMaybeMessage< ::sliverpb::GetSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::GetSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::MakeTokenReq*
Arena::CreateMaybeMessage< ::sliverpb::MakeTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::MakeTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::MakeToken*
Arena::CreateMaybeMessage< ::sliverpb::MakeToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::MakeToken >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::TaskReq*
Arena::CreateMaybeMessage< ::sliverpb::TaskReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::TaskReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Task*
Arena::CreateMaybeMessage< ::sliverpb::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ExecuteAssemblyReq*
Arena::CreateMaybeMessage< ::sliverpb::ExecuteAssemblyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ExecuteAssemblyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::InvokeExecuteAssemblyReq*
Arena::CreateMaybeMessage< ::sliverpb::InvokeExecuteAssemblyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::InvokeExecuteAssemblyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::InvokeInProcExecuteAssemblyReq*
Arena::CreateMaybeMessage< ::sliverpb::InvokeInProcExecuteAssemblyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::InvokeInProcExecuteAssemblyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ExecuteAssembly*
Arena::CreateMaybeMessage< ::sliverpb::ExecuteAssembly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ExecuteAssembly >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::InvokeMigrateReq*
Arena::CreateMaybeMessage< ::sliverpb::InvokeMigrateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::InvokeMigrateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Migrate*
Arena::CreateMaybeMessage< ::sliverpb::Migrate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Migrate >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ExecuteReq*
Arena::CreateMaybeMessage< ::sliverpb::ExecuteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ExecuteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ExecuteWindowsReq*
Arena::CreateMaybeMessage< ::sliverpb::ExecuteWindowsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ExecuteWindowsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Execute*
Arena::CreateMaybeMessage< ::sliverpb::Execute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Execute >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SideloadReq*
Arena::CreateMaybeMessage< ::sliverpb::SideloadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SideloadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Sideload*
Arena::CreateMaybeMessage< ::sliverpb::Sideload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Sideload >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::InvokeSpawnDllReq*
Arena::CreateMaybeMessage< ::sliverpb::InvokeSpawnDllReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::InvokeSpawnDllReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SpawnDllReq*
Arena::CreateMaybeMessage< ::sliverpb::SpawnDllReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SpawnDllReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SpawnDll*
Arena::CreateMaybeMessage< ::sliverpb::SpawnDll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SpawnDll >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::NetstatReq*
Arena::CreateMaybeMessage< ::sliverpb::NetstatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::NetstatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SockTabEntry_SockAddr*
Arena::CreateMaybeMessage< ::sliverpb::SockTabEntry_SockAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SockTabEntry_SockAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SockTabEntry*
Arena::CreateMaybeMessage< ::sliverpb::SockTabEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SockTabEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Netstat*
Arena::CreateMaybeMessage< ::sliverpb::Netstat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Netstat >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::EnvReq*
Arena::CreateMaybeMessage< ::sliverpb::EnvReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::EnvReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::EnvInfo*
Arena::CreateMaybeMessage< ::sliverpb::EnvInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::EnvInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SetEnvReq*
Arena::CreateMaybeMessage< ::sliverpb::SetEnvReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SetEnvReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SetEnv*
Arena::CreateMaybeMessage< ::sliverpb::SetEnv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SetEnv >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::UnsetEnvReq*
Arena::CreateMaybeMessage< ::sliverpb::UnsetEnvReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::UnsetEnvReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::UnsetEnv*
Arena::CreateMaybeMessage< ::sliverpb::UnsetEnv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::UnsetEnv >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::DNSSessionInit*
Arena::CreateMaybeMessage< ::sliverpb::DNSSessionInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::DNSSessionInit >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::DNSPoll*
Arena::CreateMaybeMessage< ::sliverpb::DNSPoll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::DNSPoll >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::DNSBlockHeader*
Arena::CreateMaybeMessage< ::sliverpb::DNSBlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::DNSBlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::HTTPSessionInit*
Arena::CreateMaybeMessage< ::sliverpb::HTTPSessionInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::HTTPSessionInit >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ScreenshotReq*
Arena::CreateMaybeMessage< ::sliverpb::ScreenshotReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ScreenshotReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Screenshot*
Arena::CreateMaybeMessage< ::sliverpb::Screenshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Screenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::StartServiceReq*
Arena::CreateMaybeMessage< ::sliverpb::StartServiceReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::StartServiceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ServiceInfo*
Arena::CreateMaybeMessage< ::sliverpb::ServiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ServiceInfoReq*
Arena::CreateMaybeMessage< ::sliverpb::ServiceInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ServiceInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::StopServiceReq*
Arena::CreateMaybeMessage< ::sliverpb::StopServiceReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::StopServiceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RemoveServiceReq*
Arena::CreateMaybeMessage< ::sliverpb::RemoveServiceReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RemoveServiceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::BackdoorReq*
Arena::CreateMaybeMessage< ::sliverpb::BackdoorReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::BackdoorReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Backdoor*
Arena::CreateMaybeMessage< ::sliverpb::Backdoor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Backdoor >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryReadReq*
Arena::CreateMaybeMessage< ::sliverpb::RegistryReadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryReadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryRead*
Arena::CreateMaybeMessage< ::sliverpb::RegistryRead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryRead >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryWriteReq*
Arena::CreateMaybeMessage< ::sliverpb::RegistryWriteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryWriteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryWrite*
Arena::CreateMaybeMessage< ::sliverpb::RegistryWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryCreateKeyReq*
Arena::CreateMaybeMessage< ::sliverpb::RegistryCreateKeyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryCreateKeyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryCreateKey*
Arena::CreateMaybeMessage< ::sliverpb::RegistryCreateKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryCreateKey >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryDeleteKeyReq*
Arena::CreateMaybeMessage< ::sliverpb::RegistryDeleteKeyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryDeleteKeyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryDeleteKey*
Arena::CreateMaybeMessage< ::sliverpb::RegistryDeleteKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryDeleteKey >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistrySubKeyListReq*
Arena::CreateMaybeMessage< ::sliverpb::RegistrySubKeyListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistrySubKeyListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistrySubKeyList*
Arena::CreateMaybeMessage< ::sliverpb::RegistrySubKeyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistrySubKeyList >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryListValuesReq*
Arena::CreateMaybeMessage< ::sliverpb::RegistryListValuesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryListValuesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegistryValuesList*
Arena::CreateMaybeMessage< ::sliverpb::RegistryValuesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegistryValuesList >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Tunnel*
Arena::CreateMaybeMessage< ::sliverpb::Tunnel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Tunnel >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::TunnelData*
Arena::CreateMaybeMessage< ::sliverpb::TunnelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::TunnelData >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ShellReq*
Arena::CreateMaybeMessage< ::sliverpb::ShellReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ShellReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Shell*
Arena::CreateMaybeMessage< ::sliverpb::Shell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Shell >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PortfwdReq*
Arena::CreateMaybeMessage< ::sliverpb::PortfwdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PortfwdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Portfwd*
Arena::CreateMaybeMessage< ::sliverpb::Portfwd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Portfwd >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Socks*
Arena::CreateMaybeMessage< ::sliverpb::Socks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Socks >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SocksData*
Arena::CreateMaybeMessage< ::sliverpb::SocksData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SocksData >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotStartListenerReq*
Arena::CreateMaybeMessage< ::sliverpb::PivotStartListenerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotStartListenerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotStopListenerReq*
Arena::CreateMaybeMessage< ::sliverpb::PivotStopListenerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotStopListenerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotListener*
Arena::CreateMaybeMessage< ::sliverpb::PivotListener >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotListener >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotHello*
Arena::CreateMaybeMessage< ::sliverpb::PivotHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotHello >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotServerKeyExchange*
Arena::CreateMaybeMessage< ::sliverpb::PivotServerKeyExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotServerKeyExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotPeer*
Arena::CreateMaybeMessage< ::sliverpb::PivotPeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotPeerEnvelope*
Arena::CreateMaybeMessage< ::sliverpb::PivotPeerEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotPeerEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotPing*
Arena::CreateMaybeMessage< ::sliverpb::PivotPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotPing >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::NetConnPivot*
Arena::CreateMaybeMessage< ::sliverpb::NetConnPivot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::NetConnPivot >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotPeerFailure*
Arena::CreateMaybeMessage< ::sliverpb::PivotPeerFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotPeerFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotListenersReq*
Arena::CreateMaybeMessage< ::sliverpb::PivotListenersReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotListenersReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PivotListeners*
Arena::CreateMaybeMessage< ::sliverpb::PivotListeners >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PivotListeners >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGPortForwardStartReq*
Arena::CreateMaybeMessage< ::sliverpb::WGPortForwardStartReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGPortForwardStartReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGPortForward*
Arena::CreateMaybeMessage< ::sliverpb::WGPortForward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGPortForward >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGPortForwardStopReq*
Arena::CreateMaybeMessage< ::sliverpb::WGPortForwardStopReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGPortForwardStopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGSocksStartReq*
Arena::CreateMaybeMessage< ::sliverpb::WGSocksStartReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGSocksStartReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGSocks*
Arena::CreateMaybeMessage< ::sliverpb::WGSocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGSocks >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGSocksStopReq*
Arena::CreateMaybeMessage< ::sliverpb::WGSocksStopReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGSocksStopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGTCPForwardersReq*
Arena::CreateMaybeMessage< ::sliverpb::WGTCPForwardersReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGTCPForwardersReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGSocksServersReq*
Arena::CreateMaybeMessage< ::sliverpb::WGSocksServersReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGSocksServersReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGTCPForwarder*
Arena::CreateMaybeMessage< ::sliverpb::WGTCPForwarder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGTCPForwarder >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGSocksServer*
Arena::CreateMaybeMessage< ::sliverpb::WGSocksServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGSocksServer >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGSocksServers*
Arena::CreateMaybeMessage< ::sliverpb::WGSocksServers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGSocksServers >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WGTCPForwarders*
Arena::CreateMaybeMessage< ::sliverpb::WGTCPForwarders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WGTCPForwarders >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ReconfigureReq*
Arena::CreateMaybeMessage< ::sliverpb::ReconfigureReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ReconfigureReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::Reconfigure*
Arena::CreateMaybeMessage< ::sliverpb::Reconfigure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::Reconfigure >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PollIntervalReq*
Arena::CreateMaybeMessage< ::sliverpb::PollIntervalReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PollIntervalReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::PollInterval*
Arena::CreateMaybeMessage< ::sliverpb::PollInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::PollInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SSHCommandReq*
Arena::CreateMaybeMessage< ::sliverpb::SSHCommandReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SSHCommandReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::SSHCommand*
Arena::CreateMaybeMessage< ::sliverpb::SSHCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::SSHCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::GetPrivsReq*
Arena::CreateMaybeMessage< ::sliverpb::GetPrivsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::GetPrivsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::WindowsPrivilegeEntry*
Arena::CreateMaybeMessage< ::sliverpb::WindowsPrivilegeEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::WindowsPrivilegeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::GetPrivs*
Arena::CreateMaybeMessage< ::sliverpb::GetPrivs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::GetPrivs >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegisterExtensionReq*
Arena::CreateMaybeMessage< ::sliverpb::RegisterExtensionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegisterExtensionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RegisterExtension*
Arena::CreateMaybeMessage< ::sliverpb::RegisterExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RegisterExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::CallExtensionReq*
Arena::CreateMaybeMessage< ::sliverpb::CallExtensionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::CallExtensionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::CallExtension*
Arena::CreateMaybeMessage< ::sliverpb::CallExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::CallExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ListExtensionsReq*
Arena::CreateMaybeMessage< ::sliverpb::ListExtensionsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ListExtensionsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::ListExtensions*
Arena::CreateMaybeMessage< ::sliverpb::ListExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::ListExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RportFwdStopListenerReq*
Arena::CreateMaybeMessage< ::sliverpb::RportFwdStopListenerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RportFwdStopListenerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RportFwdStartListenerReq*
Arena::CreateMaybeMessage< ::sliverpb::RportFwdStartListenerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RportFwdStartListenerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RportFwdListener*
Arena::CreateMaybeMessage< ::sliverpb::RportFwdListener >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RportFwdListener >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RportFwdListeners*
Arena::CreateMaybeMessage< ::sliverpb::RportFwdListeners >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RportFwdListeners >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RportFwdListenersReq*
Arena::CreateMaybeMessage< ::sliverpb::RportFwdListenersReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RportFwdListenersReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RPortfwd*
Arena::CreateMaybeMessage< ::sliverpb::RPortfwd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RPortfwd >(arena);
}
template<> PROTOBUF_NOINLINE ::sliverpb::RPortfwdReq*
Arena::CreateMaybeMessage< ::sliverpb::RPortfwdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sliverpb::RPortfwdReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
