syntax = "proto3";
package sliverpb;
import "common.proto";

/*
  
  >>> Reserved Numbers <<<

    For tunnel messages:
      uint64 TunnelID = 8 [jstype = JS_STRING]; // JS can't represent a uint64
      uint32 SessionID = 9;

    For request/response messages:
      Request Request = 9;
      Response Response = 9;
  
    - Request messages should be named with the suffix "Req"

*/

// Envelope - Used to encode implant<->server messages since we 
//            cannot use gRPC due to the various transports used.
message Envelope {
  int64 ID = 1;   // Envelope ID used to track request/response
  uint32 Type = 2; // Message type
  bytes Data = 3;  // Actual message data

  bool UnknownMessageType = 4; // Set if the implant did not understand the message
}

// BeaconTasks - DO NOT CONFUSE WITH clientpb.BeaconTasks
message BeaconTasks {
  string ID = 1;
  repeated Envelope Tasks = 2;
  int64 NextCheckin = 3;
}

// Register - First message the implant sends to the server
message Register {
  string Name = 1;
  string Hostname = 2;
  string Uuid = 3;
  string Username = 4;
  string Uid = 5;
  string Gid = 6;
  string Os = 7;
  string Arch = 8;
  int32 Pid = 9;
  string Filename = 10;
  string ActiveC2 = 11;
  string Version = 12;
  int64 ReconnectInterval = 13;
  string ProxyURL = 14;
  string ConfigID = 16;
  int64 PeerID = 17;
  string Locale = 18;
}

message BeaconRegister {
  string ID = 1;
  int64 Interval = 2;
  int64 Jitter = 3;
  Register Register = 4;
  int64 NextCheckin = 5;
}

message SessionRegister {
  string ID = 1;
  Register Register = 2;
}


message OpenSession {
  repeated string C2s = 1;
  int64 Delay = 2;

  Response Response = 8;
  Request Request = 9;
}

message CloseSession {

  // No message content

  Response Response = 8;
  Request Request = 9;
}

// Ping - Not ICMP, just sends a rount trip message to an implant to
//        see if it's still responding.
message Ping {
  int32 Nonce = 1;

  // Ping is special
  Response Response = 8;
  Request Request = 9;
}

// KillSessionReq - Request the implant to kill a session
message KillReq {
  bool Force = 1;

  Request Request = 9;
}


// PsReq - Request the implant to list ses of a remote session.
message PsReq {
  Request Request = 9;
}

message Ps {
  repeated Process Processes = 1;

  Response Response = 9;
}

// TerminateReq - Request the implant terminate a remote processes
message TerminateReq {
  int32 Pid = 1;
  bool Force = 2;

  Request Request = 9;
}

message Terminate {
  int32 Pid = 1;

  Response Response = 9;
}

// IfconfigReq - Request the implant to list network interfaces
message IfconfigReq {
  Request Request = 9;
}

message Ifconfig {
  repeated NetInterface NetInterfaces = 1;

  Response Response = 9;
}

message NetInterface {
  int32 Index = 1;
  string Name = 2;
  string MAC = 3;
  repeated string IPAddresses = 4;
}

message LsReq {
  string Path = 1;

  Request Request = 9;
}

message Ls {
  string Path = 1;
  bool Exists = 2;
  repeated FileInfo Files = 3;
  string timezone = 4;
  int32 timezoneOffset = 5;

  Response Response = 9;
}

message FileInfo {
  string Name = 1;
  bool IsDir = 2;
  int64 Size = 3;
  int64 ModTime = 4;
  string Mode = 5;
  string Link = 6;
}

message CdReq {
  string Path = 1;
  Request Request = 9;
}

message PwdReq {
  Request Request = 9;
}

message Pwd {
  string Path = 1;

  Response Response = 9;
}

message RmReq {
  string Path = 1;
  bool Recursive = 2;
  bool Force = 3;

  Request Request = 9;
}

message Rm {
  string Path = 1;

  Response Response = 9;
}

message MvReq {
  string Src = 1;
  string Dst = 2;

  Request Request = 9;
}

message Mv {
  string Src = 1;
  string Dst = 2;

  Response Response = 9;
}

message MkdirReq {
  string Path = 1;

  Request Request = 9;
}

message Mkdir {
  string Path = 1;

  Response Response = 9;
}

message DownloadReq {
  string Path = 1;
  int64 Start = 2;
  int64 Stop = 3;
  bool Recurse = 4;

  Request Request = 9;
}

message Download {
  string Path = 1;
  string Encoder = 2;
  bool Exists = 3;
  int64 Start = 4;
  int64 Stop = 5;
  bytes Data = 6;
  bool IsDir = 7;
  int32 ReadFiles = 8;
  int32 UnreadableFiles = 10;

  Response Response = 9;
}

message UploadReq {
  string Path = 1;
  string Encoder = 2;
  bytes Data = 3;
  bool IsIOC = 4;

  Request Request = 9;
}

message Upload {
  string Path = 1;

  Response Response = 9;
}

message ProcessDumpReq {
  int32 Pid = 1;
  int32 Timeout = 2;

  Request Request = 9;
}

message ProcessDump {
  bytes Data = 1;

  Response Response = 9;
}

message RunAsReq {
  string Username = 1;
  string ProcessName = 2;
  string Args = 3;
  string Domain = 4;
  string Password = 5;
  bool HideWindow = 6;
  bool NetOnly = 7;

  Request Request = 9;
}

message RunAs {
  string Output = 1;

  Response Response = 9;
}

message ImpersonateReq {
  string Username = 1;
  Request Request = 9;
}

message Impersonate {
  Response Response = 9;
}

message RevToSelfReq {
  Request Request = 9;
}

message RevToSelf {
  Response Response = 9;
}

message CurrentTokenOwnerReq {
  Request Request = 9;
}

message CurrentTokenOwner {
  string Output = 1;

  Response Response = 9;
}

// InvokeGetSystemReq - Implant-side version of GetSystemReq, this message
//                      contains the .Data based on the client's req.Config
message InvokeGetSystemReq {
  bytes Data = 1;
  string HostingProcess = 2;

  Request Request = 9;
}

// GetSystem - The result of a InvokeGetSystemReq attempt
message GetSystem {

  Response Response = 9;
}

message MakeTokenReq {
  string Username = 1;
  string Password = 2;
  string Domain = 3;
  uint32 LogonType = 4;

  Request Request = 9;
}

message MakeToken {
  Response Response = 9;
}

message Token{
  int64 TokenId = 1;
  int64 LogonSessionId = 2;
  int32 LogonType = 3;
  string Username = 4;
  int32 TokenType = 5;
  int32 TokenImpLevel = 6;
  int32 PrivilegesCount = 7;
  int32 TokenIntegrity = 8;
}

message ListTokensReq{
    Request Request = 9;
}

message ListTokens{
  repeated Token Tokens = 1;

  Response Response = 9;
}

message TaskReq {
  string Encoder = 1;
  bool RWXPages = 2;
  uint32 Pid = 3;
  bytes Data = 4;

  Request Request = 9;
}

message Task {
  Response Response = 9;
}

message ExecuteAssemblyReq {
  bytes Assembly = 1;
  string Arguments = 2;
  string Process = 3;
  bool IsDLL = 4;
  string Arch = 5;
  string ClassName = 6;
  string Method = 7;
  string AppDomain = 8;
  uint32 PPid = 10;
  repeated string ProcessArgs = 11;
  // In process specific fields
  bool InProcess = 12;
  string Runtime = 13;
  bool AmsiBypass = 14;
  bool EtwBypass = 15;
  Request Request = 9;
}

message InvokeExecuteAssemblyReq {
  bytes Data = 1;
  string process = 2;
  uint32 PPid = 10;
  repeated string ProcessArgs = 11;

  Request Request = 9;
}

message InvokeInProcExecuteAssemblyReq {
  bytes Data = 1;
  repeated string Arguments = 2;
  string Runtime = 3;
  bool AmsiBypass = 4;
  bool EtwBypass = 5;
  Request Request = 9;
}

message ExecuteAssembly {
  bytes Output = 1;

  Response Response = 9;
}

message InvokeMigrateReq {
  uint32 Pid = 1;
  bytes Data = 2;

  Request Request = 9;
}

message Migrate {
  bool Success = 1;

  Response Response = 9;
}

message ExecuteReq {
  string Path = 1;
  repeated string Args = 2;
  bool Output = 3;
  string stdout_pb = 4;
  string stderr_pb = 5;
  uint32 PPid = 10;

  Request Request = 9;
}

message ExecuteWindowsReq {
  string Path = 1;
  repeated string Args = 2;
  bool Output = 3;
  string stdout_pb = 4;
  string stderr_pb = 5;
  bool UseToken = 6;
  uint32 PPid = 10;

  Request Request = 9;
}

message Execute {
  uint32 Status = 1;
  bytes stdout_pb = 2;
  bytes stderr_pb = 3;
  uint32 Pid = 4;

  Response Response = 9;
}

message SideloadReq {
  bytes Data = 1;
  string ProcessName = 2;
  string Args = 3;
  string EntryPoint = 4;
  bool Kill = 5;
  bool isDLL = 6;
  bool isUnicode = 7;
  uint32 PPid = 10;
  repeated string ProcessArgs = 11;

  Request Request = 9;
}

message Sideload {
  string Result = 1;

  Response Response = 9;
}

message InvokeSpawnDllReq {
  bytes Data = 1;
  string ProcessName = 2;
  string Args = 3;
  string EntryPoint = 4;
  bool Kill = 5;
  uint32 PPid = 10;
  repeated string ProcessArgs = 11;

  Request Request = 9;
}

message SpawnDllReq {
  bytes Data = 1;
  string ProcessName = 2;
  uint32 Offset = 3;
  string Args = 4;
  bool Kill = 5;
  uint32 PPid = 10;
  repeated string ProcessArgs = 11;

  Request Request = 9;
}

message SpawnDll {
  string Result = 1;

  Response Response = 9;
}

message NetstatReq {
  bool TCP = 1;
  bool UDP = 2;
  bool IP4 = 3;
  bool IP6 = 5;
  bool Listening = 6;

  Request Request = 9;
}

message SockTabEntry {
  message SockAddr {
    string Ip = 1;
    uint32 Port = 2;
  }
  SockAddr LocalAddr = 1;
  SockAddr RemoteAddr = 2;
  string SkState = 3;
  uint32 UID = 4;
  Process Process = 5;
  string Protocol = 6;
}

message Netstat {
  repeated SockTabEntry Entries = 1;

  Response Response = 9;
}

message EnvReq {
  string Name = 1;
  Request Request = 9;
}

message EnvInfo {
  repeated EnvVar Variables = 1;
  Response Response = 9;
}

message SetEnvReq {
  EnvVar Variable = 1;
  Request Request = 9;
}

message SetEnv {
  Response Response = 9;
}

message UnsetEnvReq {
  string Name = 1;
  Request Request = 9;
}

message UnsetEnv {
  Response Response = 9;
}

// DNS Specific messages
message DNSSessionInit {
  bytes Key = 1;
}

message DNSPoll {
  repeated DNSBlockHeader blocks = 1;
}

message DNSBlockHeader {
  string ID = 1;
  uint32 Size = 2;
}

// HTTP Sepecific message
message HTTPSessionInit {
  bytes Key = 1;
}

// ScreenshotReq - Request the implant take a screenshot
message ScreenshotReq {
  Request Request = 9;
}

message Screenshot {
  bytes Data = 1;

  Response Response = 9;
}

message StartServiceReq {
  string ServiceName = 1;
  string ServiceDescription = 2;
  string BinPath = 3;
  string Hostname = 4;
  string Arguments = 5;
  Request Request = 9;
}

message ServiceInfo {
  Response Response = 9;
}

message ServiceInfoReq {
  string ServiceName = 1;
  string Hostname = 2;
}

message StopServiceReq {
  ServiceInfoReq ServiceInfo = 1;

  Request Request = 9;
}

message RemoveServiceReq {
  ServiceInfoReq ServiceInfo = 1;

  Request Request = 9;
}

message BackdoorReq {
  string FilePath = 1;
  string ProfileName = 2;

  Request Request = 9;
}

message Backdoor {
  Response Response = 9;
}

// Registry - Registry related messages
enum RegistryType {
  Unknown = 0;
  Binary = 1;
  String = 2;
  DWORD = 3;
  QWORD = 4;
}

message RegistryReadReq {
  string Hive = 1;
  string Path = 2;
  string Key = 3;
  string Hostname = 4;
  Request Request = 9;
}

message RegistryRead {
  string Value = 1;
  Response Response = 9;
}

message RegistryWriteReq {
  string Hive = 1;
  string Path = 2;
  string Key = 3;
  string Hostname = 4;
  string StringValue = 5;
  bytes ByteValue = 6;
  uint32 DWordValue = 7;
  uint64 QWordValue = 8;
  uint32 Type = 10;

  Request Request = 9;
}

message RegistryWrite {
  Response Response = 9;
}

message RegistryCreateKeyReq {
  string Hive = 1;
  string Path = 2; 
  string Key = 3;
  string Hostname = 4;
  Request Request = 9;
}

message RegistryCreateKey {
  Response Response = 9;
}

message RegistryDeleteKeyReq {
  string Hive = 1;
  string Path = 2;
  string Key = 3;
  string Hostname = 4;
  Request Request = 9;
}

message RegistryDeleteKey {
  Response Response = 9;
}

message RegistrySubKeyListReq {
  string Hive = 1;
  string Path = 2;
  // Keep the same ID as the other registry operations
  string Hostname = 4;
  Request Request = 9;
}

message RegistrySubKeyList {
  repeated string Subkeys = 1;
  Response Response = 9;
}

message RegistryListValuesReq {
  string Hive = 1;
  string Path = 2;
  // Keep the same ID as the other registry operations
  string Hostname = 4;
  Request Request = 9;
}

message RegistryValuesList {
  repeated string ValueNames = 1;

  Response Response = 9;
}

// Tunnel - Tunnel related messages
message Tunnel {
  uint64 TunnelID = 8 [jstype = JS_STRING];
  string SessionID = 9;
}

message TunnelData {
  bytes Data  = 1;
  bool Closed = 2;
  uint64 Sequence = 3;
  uint64 Ack = 4;
  bool Resend = 5;
  bool CreateReverse = 6;
  RPortfwd rportfwd = 7;
  uint64 TunnelID = 8 [jstype = JS_STRING];
  string SessionID = 9;
}

// ShellReq - Request the implant open a realtime shell tunnel
message ShellReq {
  string Path = 1;
  bool EnablePTY = 2;
  uint32 Pid = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING]; // Bind to this tunnel
  Request Request = 9;
}

// Shell - Request the implant open a realtime shell tunnel
message Shell {
  string Path = 1;
  bool EnablePTY = 2;
  uint32 Pid = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING];
  Response Response = 9;
}


message PortfwdReq {
  uint32 Port = 1;
  int32 Protocol = 2;
  string Host = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING]; // Bind to this tunnel
  Request Request = 9;
}

message Portfwd {
  uint32 Port = 1;
  int32 Protocol = 2;
  string Host = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING]; // Bind to this tunnel
  Response Response = 9;
}

// *** Socks ***
message Socks {

  uint64 TunnelID = 8 [jstype = JS_STRING];
  string SessionID = 9;
}

message SocksData {
  bytes Data  = 1;
  bool CloseConn = 2;
  string Username = 3;
  string Password = 4;
  uint64 Sequence = 5;

  uint64 TunnelID = 8 [jstype = JS_STRING];
  Request Request = 9;
}

// *** Pivots ***

enum PivotType {
  TCP = 0;
  UDP = 1;
  NamedPipe = 2;
}

message PivotStartListenerReq {
  PivotType Type = 1;
  string BindAddress = 2;
  repeated bool Options = 3;

  Request Request = 9;
}

message PivotStopListenerReq {
  uint32 ID = 1;
  
  Request Request = 9;
}

message PivotListener {
  uint32 ID = 1;
  PivotType Type = 2;
  string BindAddress = 3;
  repeated NetConnPivot Pivots = 4;

  Response Response = 9;
}
 
message PivotHello {
  bytes PublicKey = 1;
  int64 PeerID = 2 [jstype = JS_STRING];
  string PublicKeySignature = 3;
  bytes SessionKey = 4;
}

message PivotServerKeyExchange {
  int64 OriginID = 1;
  bytes SessionKey = 2;
}

message PivotPeer {
  int64 PeerID = 1 [jstype = JS_STRING];
  string Name = 2;
}

message PivotPeerEnvelope {
  repeated PivotPeer Peers = 1;
  uint32 Type = 2;
  bytes PivotSessionID = 3;
  bytes Data = 4;
  int64 PeerFailureAt = 5;
}

message PivotPing {
  uint32 Nonce = 1;
}

message NetConnPivot {
  int64 PeerID = 1 [jstype = JS_STRING];
  string RemoteAddress = 2;
}

enum PeerFailureType {
  SEND_FAILURE = 0;
  DISCONNECT = 1;
}

message PivotPeerFailure {
  int64 PeerID = 1 [jstype = JS_STRING];
  PeerFailureType Type = 2;
  string Err = 3;
}

message PivotListenersReq {

  Request Request = 9;
}

message PivotListeners {
  repeated PivotListener Listeners = 1;

  Response Response = 9;
}

// *** Wiregard ***
message WGPortForwardStartReq {
  int32 LocalPort = 1;
  string RemoteAddress = 2;
  Request Request = 9;
}

message WGPortForward {
  WGTCPForwarder Forwarder = 1;
  Response Response = 9;
}

message WGPortForwardStopReq {
  int32 ID = 1;
  Request Request = 9;
}

message WGSocksStartReq {
  int32 Port = 1;
  Request Request = 9;
}

message WGSocks {
  WGSocksServer Server = 1;
  Response Response = 9;
}

message WGSocksStopReq {
  int32 ID = 1;  
  Request Request = 9;
}

message WGTCPForwardersReq {
  Request Request = 9;
}

message WGSocksServersReq {
  Request Request = 9;
}

message WGTCPForwarder {
  int32 ID = 1;
  string LocalAddr = 2;
  string RemoteAddr = 3;
}

message WGSocksServer {
  int32 ID = 1;
  string LocalAddr = 2;
}

message WGSocksServers {
  repeated WGSocksServer Servers = 1;
  Response Response = 9;
}

message WGTCPForwarders {
  repeated WGTCPForwarder Forwarders = 1;
  Response Response = 9;
}

// ReconfigureReq - Request the implant to reconfigure itself
message ReconfigureReq {
  int64 ReconnectInterval = 1;
  int64 BeaconInterval = 2;
  int64 BeaconJitter = 3;

  Request Request = 9;
}

message Reconfigure {

  Response Response = 9;
}

// PollIntervalReq - Request the implant to update it's poll intervbal
message PollIntervalReq {
  int64 PollInterval = 1;

  Request Request = 9;
}

message PollInterval {
  Response Response = 9;
}

message SSHCommandReq {
  string Username = 1;
  string Hostname = 2;
  uint32 Port = 3;
  string Command = 4;
  string Password = 5;
  bytes PrivKey = 6;
  string Krb5Conf = 7;
  bytes Keytab = 8;
  string Realm = 10;
  Request Request = 9;
}

message SSHCommand {
  string stdout_pb = 1;
  string stderr_pb = 2;
  Response Response = 9;
}

message GetPrivsReq {
  Request Request = 9;
}

message WindowsPrivilegeEntry {
  string Name = 1;
  string Description = 2;
  bool Enabled = 3;
  bool EnabledByDefault = 4;
  bool Removed = 5;
  bool UsedForAccess = 6;
}

message GetPrivs {
  repeated WindowsPrivilegeEntry PrivInfo = 1;
  string ProcessIntegrity = 2;
  string ProcessName = 3;

  Response Response = 9;
}

// Extensions

message RegisterExtensionReq {
  string Name = 1;
  bytes Data = 2;
  string OS = 3;
  string Init = 4;

  Request Request = 9;
}

message RegisterExtension {
  Response Response = 9;
}

message CallExtensionReq {
  string Name = 1;
  bool ServerStore = 2;
  bytes Args = 3;
  string Export = 4;

  Request Request = 9;
}

message CallExtension {
  bytes Output = 1;
  bool ServerStore = 2;

  Response Response = 9;
}

message ListExtensionsReq {
  Request Request = 9;
}

message ListExtensions {
  repeated string Names = 1;

  Response Response = 9;
}


// *** RportFwd ***

message RportFwdStopListenerReq {
  uint32 ID = 1;
  
  Request Request = 9;
}

message RportFwdStartListenerReq {
  string BindAddress = 1;
  uint32 BindPort = 2;
  uint32 forwardPort = 3;
  string forwardAddress = 4;

  Request Request = 9;
}

message RportFwdListener {
  uint32 ID = 1;
  string BindAddress = 2;
  uint32 bindPort = 3;
  string forwardAddress =4;
  uint32 forwardPort = 5;

  Response Response = 9;
}


message RportFwdListeners {
  repeated RportFwdListener Listeners = 1;

  Response Response = 9;
}

message RportFwdListenersReq {

  Request Request = 9;
}


message RPortfwd {
  uint32 Port = 1;
  int32 Protocol = 2;
  string Host = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING]; // Bind to this tunnel
    Response Response = 9;

}

message RPortfwdReq {
  uint32 Port = 1;
  int32 Protocol = 2;
  string Host = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING]; // Bind to this tunnel
  Request Request = 9;

}


